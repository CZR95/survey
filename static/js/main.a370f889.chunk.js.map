{"version":3,"sources":["components/header/Header.js","components/footer/Footer.js","layouts/modal/Modal.js","layouts/switch/Switch.js","components/category/CategoryManage.js","global/GlobalUtil.js","global/GlobalAPI.js","components/category/CategoryManage_v2.js","components/record/RecordAdd.js","components/record/RecordAdd_2.js","components/record/RecordBatchAdd.js","components/record/RecordView.js","components/record/RecordView_v2.js","components/record/RecordSummary.js","components/settlement/Settlement.js","components/login/Login_v1.js","components/surveyForm/SurveyForm.js","components/portfolio/PortfolioView_v1.js","App.js","serviceWorker.js","locales/i18n.js","index.js"],"names":["Header","state","aaa","show","className","Navbar","collapseOnSelect","expand","bg","variant","Container","fluid","Brand","as","Link","to","Toggle","aria-controls","Collapse","id","Nav","Component","SuccessModal","props","Modal","size","aria-labelledby","centered","Body","Row","Col","icon","faCheckCircle","Button","onClick","onHide","FailedModal","errMsg","faTimesCircle","EditRecordModal","faEdit","Form","Group","controlId","Label","column","sm","Control","plaintext","readOnly","value","record_id","type","placeholder","defaultValue","date","base_amount","adjust_amount","category","subcategory","remark","DeleteRecordModal","faTrashAlt","ConfirmModal","faTasks","data","map","index","name","shareBill","amount","adjust","total","actionSubmit","SwitchRecType","css_switchActive","css_switchNonactive","switchRecType","getCurrentMonth","Date","month","parseInt","getMonth","getCurrentYear","getFullYear","amountDisplayConverter","toString","includes","newAmount","replace","parseFloat","toFixed","amountToFixed2","getDayOfWeek","getDay","getLayoutDatalist","list","key","getTodayDate","length","day","getDate","todayDate","console","log","isEmpty","getYearList","yearList","i","push","getIndexByName","apiGetUserList","a","url","baseUrl","axios","get","then","result","response","catch","err","JSON","stringify","apiGetRecordTypeList","apiGetCategoryList","apiGetSubcategoryList","recordType","apiGetRemarkList","apiGetSettlementList","searchForm","userId","Settlement","recordTypeList","categoryList","subcategoryList","userList","settlementList","pageController","userInfoPageShow","surveyInfoPageShow","surveyDetail","productList","checked","img","user","startDate","endDate","modalInsertForm","insertType","modalEditForm","editType","modalSettlementForm","modalShow","year","isOpenBalanceAvailable","openBalance","amountIn","amountOut","balance","successModalShow","failedModalShow","confirmModalShow","modalAddRecordShow","modalEditRecordShow","modalSuccess","css","containerStyle1","divStyle1","inputStyle1","btnSubmit","btnReset","btnClear","layoutUserInfoPage","lg","md","onChange","event","setSurveyDetail","Constant","target","Text","setState","layoutSurveyInfoPage","xs","Card","setProductList","Img","src","process","layoutSearchFormTableViewRow","td_style","Global","open_balance","amount_in","amount_out","faPen","record_type_id","deleteRecord","layoutModalSuccess","layoutModalSettlement","backdrop","animation","Title","setModalSettlementForm","apiGetSettlementCheck","InputGroup","FormControl","aria-label","aria-describedby","isInvalid","Footer","apiPostSettlementCreate","message","fromYear","toYear","totalExpense","totalRevenue","summary","error","settlementForm","modalFailedErrMsg","post","setSearchForm","setModalEditForm","array","this","layout","App","path","component","SurveyForm","withNamespaces","Boolean","window","location","hostname","match","resources","en","translation","cn_simp","cn_trad","i18n","use","reactI18nextModule","init","lng","keySeparator","interpolation","escapeValue","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a370f889.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport NavDropdown from \"react-bootstrap/NavDropdown\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass Header extends Component {\r\n  state = {\r\n    aaa: {\r\n      show: false,\r\n    },\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"\">\r\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n          <Container fluid>\r\n            <Navbar.Brand as={Link} to=\"/survey\">\r\n              Survey\r\n            </Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n              <Nav className=\"me-auto\">\r\n                <Nav.Link as={Link} to=\"/survey\">\r\n                  Survey\r\n                </Nav.Link>\r\n                <Nav.Link as={Link} to=\"/analysis\">\r\n                  Analysis\r\n                </Nav.Link>\r\n                {/* <NavDropdown\r\n                  title=\"Fees Calculator\"\r\n                  id=\"collasible-nav-dropdown\"\r\n                >\r\n                  <NavDropdown.Item href=\"#action/3.1\">\r\n                    MY Stock Market\r\n                  </NavDropdown.Item>\r\n                  <NavDropdown.Item href=\"#action/3.2\">\r\n                    Another action\r\n                  </NavDropdown.Item>\r\n                  <NavDropdown.Item href=\"#action/3.3\">\r\n                    Something\r\n                  </NavDropdown.Item>\r\n                  <NavDropdown.Divider />\r\n                  <NavDropdown.Item href=\"#action/3.4\">\r\n                    Separated link\r\n                  </NavDropdown.Item>\r\n                </NavDropdown> */}\r\n              </Nav>\r\n              {/* <Nav>\r\n                <Nav.Link as={Link} to=\"/v1/login\">\r\n                  Login\r\n                </Nav.Link>\r\n                <Nav.Link eventKey={2} href=\"#memes\">\r\n                  Dank memes\r\n                </Nav.Link>\r\n              </Nav> */}\r\n            </Navbar.Collapse>\r\n          </Container>\r\n        </Navbar>\r\n\r\n        {/* <Container className=\"fluid\">\r\n          <Row>\r\n            <Col as={Link} to=\"/v1/record/add\">\r\n              <span className=\"\">User Manage</span>\r\n            </Col>\r\n            <Col as={Link} to=\"/v1/category/manage\">\r\n              <span className=\"\">Category</span>\r\n            </Col>\r\n            <Col as={Link} to=\"/v2/category/manage\">\r\n              <span className=\"\">Category</span>\r\n            </Col>\r\n            <Col as={Link} to=\"/type/manage\">\r\n              <span className=\"\">Type Manage</span>\r\n            </Col>\r\n            <Col></Col>\r\n          </Row>\r\n          <Row>\r\n            <Col as={Link} to=\"/record/batch-add\">\r\n              <span className=\"\">Record Batch Add</span>\r\n            </Col>\r\n             <Col as={Link} to=\"/record/add\">\r\n              <span className=\"\">Record Add</span>\r\n            </Col> }\r\n            <Col as={Link} to=\"/v2/record/add\">\r\n              <span className=\"\">Record Add</span>\r\n            </Col>\r\n            <Col as={Link} to=\"/v2/record/view\">\r\n              <span className=\"\">Record View</span>\r\n            </Col>\r\n            {/* <Col as={Link} to=\"/record/view\">\r\n              <span className=\"\">Record View</span>\r\n            </Col> }\r\n            <Col as={Link} to=\"/record/summary\">\r\n              <span className=\"\">Summary</span>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col as={Link} to=\"/v1/settlement/manage\">\r\n              <span className=\"\">Settlement</span>\r\n            </Col>\r\n            <Col as={Link} to=\"\">\r\n              <span className=\"\"></span>\r\n            </Col>\r\n            <Col as={Link} to=\"\">\r\n              <span className=\"\"></span>\r\n            </Col>\r\n            <Col as={Link} to=\"\">\r\n              <span className=\"\"></span>\r\n            </Col>\r\n          </Row>\r\n        </Container> */}\r\n\r\n        {/* {this.OffCanvasExample} */}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // OffCanvasExample = () => {\r\n  //   return (\r\n  //     <>\r\n  //       <Button\r\n  //         variant=\"primary\"\r\n  //         onClick={this.setState({\r\n  //           aaa: {\r\n  //             ...this.state.aaa,\r\n  //             show: true,\r\n  //           },\r\n  //         })}\r\n  //         className=\"me-2\"\r\n  //       >\r\n  //         aaaa\r\n  //       </Button>\r\n  //       {/* <Offcanvas show={this.state.aaa.show} onHide={handleClose} {...props}> */}\r\n  //       <Offcanvas show={this.state.aaa.show}>\r\n  //         <Offcanvas.Header closeButton>\r\n  //           <Offcanvas.Title>Offcanvas</Offcanvas.Title>\r\n  //         </Offcanvas.Header>\r\n  //         <Offcanvas.Body>\r\n  //           Some text as placeholder. In real life you can have the elements you\r\n  //           have chosen. Like, text, images, lists, etc.\r\n  //         </Offcanvas.Body>\r\n  //       </Offcanvas>\r\n  //     </>\r\n  //   );\r\n  // };\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nclass Footer extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div>\r\n        <p>12346</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\n// font-awesome\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCheckCircle } from \"@fortawesome/free-regular-svg-icons\";\r\nimport { faTimesCircle } from \"@fortawesome/free-regular-svg-icons\";\r\nimport { faTrashAlt } from \"@fortawesome/free-regular-svg-icons\";\r\nimport { faEdit } from \"@fortawesome/free-regular-svg-icons\";\r\nimport { faTasks } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport const ModalCenter = (props) => {\r\n  return (\r\n    <Modal {...props} aria-labelledby=\"contained-modal-title-vcenter\">\r\n      <Modal.Header closeButton>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          Using Grid in Modal\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body className=\"show-grid\">\r\n        <Container>\r\n          <Row>\r\n            <Col xs={12} md={8}>\r\n              .col-xs-12 .col-md-8\r\n            </Col>\r\n            <Col xs={6} md={4}>\r\n              .col-xs-6 .col-md-4\r\n            </Col>\r\n          </Row>\r\n\r\n          <Row>\r\n            <Col xs={6} md={4}>\r\n              .col-xs-6 .col-md-4\r\n            </Col>\r\n            <Col xs={6} md={4}>\r\n              .col-xs-6 .col-md-4\r\n            </Col>\r\n            <Col xs={6} md={4}>\r\n              .col-xs-6 .col-md-4\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button onClick={props.onHide}>Close</Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport const SuccessModal = (props) => {\r\n  // <SuccessModal\r\n  // show={this.state.successModalShow}\r\n  // onHide={() => this.setState({ successModalShow: false })}\r\n  // />\r\n  return (\r\n    <Modal\r\n      {...props}\r\n      size=\"sm\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n    >\r\n      {/* <Modal.Header closeButton>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          Using Grid in Modal\r\n        </Modal.Title>\r\n      </Modal.Header> */}\r\n      <Modal.Body className=\"show-grid\">\r\n        <Container fluid className=\"text-center m-2\">\r\n          <Row>\r\n            <Col>\r\n              <FontAwesomeIcon\r\n                icon={faCheckCircle}\r\n                size=\"3x\"\r\n                className=\"mb-3 text-success\"\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <h4>Success</h4>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <p>Added Successful</p>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <Button\r\n                variant=\"success\"\r\n                onClick={props.onHide}\r\n                className=\"rounded-pill width-100p\"\r\n              >\r\n                Close\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport const FailedModal = (props) => {\r\n  // <FailedModal\r\n  // show={this.state.failedModalShow}\r\n  // onHide={() => this.setState({ failedModalShow: false })}\r\n  // />\r\n  let errMsg = props.errMsg == null ? \"\" : props.errMsg;\r\n\r\n  return (\r\n    <Modal\r\n      {...props}\r\n      size=\"sm\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n    >\r\n      {/* <Modal.Header closeButton>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          Using Grid in Modal\r\n        </Modal.Title>\r\n      </Modal.Header> */}\r\n      <Modal.Body className=\"show-grid\">\r\n        <Container fluid className=\"text-center m-2\">\r\n          <Row>\r\n            <Col>\r\n              <FontAwesomeIcon\r\n                icon={faTimesCircle}\r\n                size=\"3x\"\r\n                className=\"mb-3 text-danger\"\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <h4>Failed</h4>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <p>{errMsg}</p>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <Button\r\n                variant=\"danger\"\r\n                onClick={props.onHide}\r\n                className=\"rounded-pill width-100p\"\r\n              >\r\n                Close\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport const EditRecordModal = (props) => {\r\n  return (\r\n    <Modal\r\n      {...props}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n    >\r\n      {/* <Modal.Header closeButton>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          Using Grid in Modal\r\n        </Modal.Title>\r\n      </Modal.Header> */}\r\n      <Modal.Body className=\"show-grid\">\r\n        <Container fluid className=\"text-center m-2\">\r\n          <Row>\r\n            <Col>\r\n              <FontAwesomeIcon\r\n                icon={faEdit}\r\n                size=\"2x\"\r\n                className=\"mb-3 text-primary\"\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <h4>Update Record</h4>\r\n            </Col>\r\n          </Row>\r\n          <hr />\r\n          <Form className=\"font-weight-bold text-right\">\r\n            <Form.Group as={Row} controlId=\"formPlaintextId\">\r\n              <Form.Label column sm=\"4\">\r\n                ID\r\n              </Form.Label>\r\n              <Col sm=\"8\">\r\n                <Form.Control\r\n                  plaintext\r\n                  readOnly\r\n                  value={props.value.record_id}\r\n                />\r\n              </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row} controlId=\"formPlaintextDate\">\r\n              <Form.Label column sm=\"4\">\r\n                Date\r\n              </Form.Label>\r\n              <Col sm=\"8\">\r\n                <Form.Control\r\n                  type=\"date\"\r\n                  placeholder=\"Date\"\r\n                  defaultValue={props.value.date}\r\n                />\r\n              </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row} controlId=\"formPlaintextBaseAmount\">\r\n              <Form.Label column sm=\"4\">\r\n                Base Amount\r\n              </Form.Label>\r\n              <Col sm=\"8\">\r\n                <Form.Control\r\n                  type=\"number\"\r\n                  placeholder=\"Base Amount\"\r\n                  defaultValue={props.value.base_amount}\r\n                />\r\n              </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row} controlId=\"formPlaintextAdjustAmount\">\r\n              <Form.Label column sm=\"4\">\r\n                Adjust Amount\r\n              </Form.Label>\r\n              <Col sm=\"8\">\r\n                <Form.Control\r\n                  type=\"number\"\r\n                  placeholder=\"Adjust Amount\"\r\n                  defaultValue={props.value.adjust_amount}\r\n                />\r\n              </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row} controlId=\"formPlaintextCategory\">\r\n              <Form.Label column sm=\"4\">\r\n                Category\r\n              </Form.Label>\r\n              <Col sm=\"8\">\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder=\"Category\"\r\n                  defaultValue={props.value.category}\r\n                />\r\n              </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row} controlId=\"formPlaintextSubcategory\">\r\n              <Form.Label column sm=\"4\">\r\n                Subcategory\r\n              </Form.Label>\r\n              <Col sm=\"8\">\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder=\"Subcategory\"\r\n                  defaultValue={props.value.subcategory}\r\n                />\r\n              </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row} controlId=\"formPlaintextRemark\">\r\n              <Form.Label column sm=\"4\">\r\n                Remark\r\n              </Form.Label>\r\n              <Col sm=\"8\">\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder=\"Remark\"\r\n                  defaultValue={props.value.remark}\r\n                />\r\n              </Col>\r\n            </Form.Group>\r\n          </Form>\r\n          <br />\r\n          <Row>\r\n            <Col>\r\n              <Button\r\n                variant=\"secondary\"\r\n                onClick={props.onHide}\r\n                className=\"rounded-pill width-100p\"\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </Col>\r\n            <Col>\r\n              <Button\r\n                variant=\"primary\"\r\n                onClick={props.onHide}\r\n                className=\"rounded-pill width-100p\"\r\n              >\r\n                Update\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport const DeleteRecordModal = (props) => {\r\n  return (\r\n    <Modal\r\n      {...props}\r\n      size=\"sm\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n    >\r\n      {/* <Modal.Header closeButton>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          Using Grid in Modal\r\n        </Modal.Title>\r\n      </Modal.Header> */}\r\n      <Modal.Body className=\"show-grid\">\r\n        <Container fluid className=\"text-center m-2\">\r\n          <Row>\r\n            <Col>\r\n              <FontAwesomeIcon\r\n                icon={faTrashAlt}\r\n                size=\"2x\"\r\n                className=\"mb-3 text-danger\"\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <h4>Delete</h4>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <p>Are you sure want to delete this item?</p>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <Button\r\n                variant=\"secondary\"\r\n                onClick={props.onHide}\r\n                className=\"rounded-pill width-100p\"\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </Col>\r\n            <Col>\r\n              <Button\r\n                variant=\"danger\"\r\n                onClick={props.onHide}\r\n                className=\"rounded-pill width-100p\"\r\n              >\r\n                Delete\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport const ConfirmModal = (props) => {\r\n  // <SuccessModal\r\n  // show={this.state.successModalShow}\r\n  // onHide={() => this.setState({ successModalShow: false })}\r\n  // />\r\n\r\n  return (\r\n    <Modal\r\n      {...props}\r\n      size=\"xl\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n    >\r\n      {/* <Modal.Header closeButton>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          Using Grid in Modal\r\n        </Modal.Title>\r\n      </Modal.Header> */}\r\n\r\n      <Modal.Body className=\"show-grid\">\r\n        <Container fluid className=\"text-center m-2\">\r\n          <Row>\r\n            <Col>\r\n              <FontAwesomeIcon\r\n                icon={faTasks}\r\n                size=\"2x\"\r\n                className=\"mb-3 text-warning\"\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <h4>Confirmation</h4>\r\n            </Col>\r\n          </Row>\r\n          <hr />\r\n          {/* Body */}\r\n          <Form.Group as={Row} controlId=\"formPlaintextDate\">\r\n            <Form.Label column sm=\"4\">\r\n              Date\r\n            </Form.Label>\r\n            <Col sm=\"8\">\r\n              <Form.Control\r\n                type=\"date\"\r\n                placeholder=\"Date\"\r\n                readOnly\r\n                defaultValue={props.date}\r\n              />\r\n            </Col>\r\n          </Form.Group>\r\n          <Form.Group as={Row} controlId=\"formPlaintextCategory\">\r\n            <Form.Label column sm=\"4\">\r\n              Category\r\n            </Form.Label>\r\n            <Col sm=\"8\">\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Category\"\r\n                readOnly\r\n                defaultValue={props.category}\r\n              />\r\n            </Col>\r\n          </Form.Group>\r\n          <Form.Group as={Row} controlId=\"formPlaintextSubcategory\">\r\n            <Form.Label column sm=\"4\">\r\n              Subcategory\r\n            </Form.Label>\r\n            <Col sm=\"8\">\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Subcategory\"\r\n                readOnly\r\n                defaultValue={props.subcategory}\r\n              />\r\n            </Col>\r\n          </Form.Group>\r\n          <Form.Group as={Row} controlId=\"formPlaintextRemark\">\r\n            <Form.Label column sm=\"4\">\r\n              Remark\r\n            </Form.Label>\r\n            <Col sm=\"8\">\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Remark\"\r\n                readOnly\r\n                defaultValue={props.remark}\r\n              />\r\n            </Col>\r\n          </Form.Group>\r\n          <Form.Row className=\"text-center mb-2 \">\r\n            <Col>\r\n              <span>Name</span>\r\n            </Col>\r\n            <Col>\r\n              <span>Share Amount</span>\r\n            </Col>\r\n            <Col>\r\n              <span>Amount</span>\r\n            </Col>\r\n            <Col>\r\n              <span>Adjust</span>\r\n            </Col>\r\n            <Col>\r\n              <span>Total</span>\r\n            </Col>\r\n          </Form.Row>\r\n\r\n          {props.data.map((value, index) => (\r\n            <Form.Row className=\"text-center py-1\">\r\n              <Col>\r\n                <p>{value.name}</p>\r\n              </Col>\r\n              <Col>\r\n                <p>{value.shareBill}</p>\r\n              </Col>\r\n              <Col>\r\n                <p>{value.amount}</p>\r\n              </Col>\r\n              <Col>\r\n                <p>{value.adjust}</p>\r\n              </Col>\r\n              <Col>\r\n                <p>{value.total}</p>\r\n              </Col>\r\n            </Form.Row>\r\n          ))}\r\n\r\n          {/* {props.data.map((value, index) => (\r\n            <Form.Row className=\"text-center py-1\">\r\n              <Col>\r\n                <p>{value.name}</p>\r\n              </Col>\r\n              <Col>\r\n                <p>{parseFloat(value.shareBill) + parseFloat(value.amount)}</p>\r\n              </Col>\r\n              <Col>\r\n                <p>{value.adjust}</p>\r\n              </Col>\r\n              <Col>\r\n                <p>{value.total}</p>\r\n              </Col>\r\n            </Form.Row>\r\n          ))} */}\r\n          <hr />\r\n\r\n          {/* Button */}\r\n          <Row>\r\n            <Col>\r\n              <Button\r\n                variant=\"secondary\"\r\n                onClick={props.onHide}\r\n                className=\"rounded-pill width-100p\"\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </Col>\r\n            <Col>\r\n              <Button\r\n                variant=\"warning\"\r\n                onClick={props.actionSubmit}\r\n                className=\"rounded-pill width-100p\"\r\n              >\r\n                <span className={\"text-white\"}>Submit</span>\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Row from \"react-bootstrap/Row\";\r\n\r\nexport const SwitchRecType = (props) => {\r\n  const css_switchActive =\r\n    \"text-center bg-primary text-white border border-primary py-1 \";\r\n  const css_switchNonactive =\r\n    \"text-center bg-light text-primary border border-primary py-1 \";\r\n\r\n  return (\r\n    <Container>\r\n      <Row className=\"rounded-pill bg-gray\">\r\n        <Col\r\n          className={\r\n            props.type === \"expenses\"\r\n              ? css_switchActive + \" rounded-pill-left\"\r\n              : css_switchNonactive + \" rounded-pill-left\"\r\n          }\r\n          onClick={() => props.switchRecType(\"expenses\")}\r\n        >\r\n          <span>Expenses</span>\r\n        </Col>\r\n        <Col\r\n          className={\r\n            props.type === \"revenue\"\r\n              ? css_switchActive + \" rounded-pill-right\"\r\n              : css_switchNonactive + \" rounded-pill-right\"\r\n          }\r\n          onClick={() => props.switchRecType(\"revenue\")}\r\n        >\r\n          <span>Revenue</span>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n","import React, { Component } from \"react\";\r\n\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Row from \"react-bootstrap/Row\";\r\n\r\nimport axios from \"axios\";\r\n\r\nimport { SuccessModal, FailedModal } from \"../../layouts/modal/Modal\";\r\nimport { SwitchRecType } from \"../../layouts/switch/Switch\";\r\n\r\nclass ExpensesType extends Component {\r\n  state = {\r\n    categoryList: [],\r\n    subcategoryList: [],\r\n    viewCategory: \"\",\r\n    inputCategory: \"\",\r\n    inputSubcategory: \"\",\r\n    categoryType: \"subcategory\",\r\n    successModalShow: false,\r\n    failedModalShow: false,\r\n    recordType: \"expenses\",\r\n  };\r\n\r\n  css = {\r\n    containerStyle1: \"border-2-gray rounded p-3\",\r\n    divStyle1: \"py-2 px-3\",\r\n    inputStyle1: \"width-100p\",\r\n    switchCatTypeActive: \"text-center btn-blue py-1 border-2-blue rounded-pill\",\r\n    switchCatTypeNonactive:\r\n      \"text-center btn-white py-1 border-2-gray rounded-pill\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.apiGetCategoryList(this.state.recordType);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <br />\r\n        <SuccessModal\r\n          show={this.state.successModalShow}\r\n          onHide={() => this.setState({ successModalShow: false })}\r\n        />\r\n\r\n        <FailedModal\r\n          show={this.state.failedModalShow}\r\n          onHide={() => this.setState({ failedModalShow: false })}\r\n        />\r\n\r\n        <SwitchRecType\r\n          type={this.state.recordType}\r\n          switchRecType={this.switchRecordType}\r\n        />\r\n\r\n        <br />\r\n        <Container>\r\n          <Row>\r\n            {this.state.recordType === \"expenses\" ? (\r\n              <h4>Expenses Category</h4>\r\n            ) : (\r\n              <h4>Revenue Category</h4>\r\n            )}\r\n          </Row>\r\n        </Container>\r\n\r\n        <Container className={this.css.containerStyle1}>\r\n          <Row>\r\n            <Col className={this.css.divStyle1}>\r\n              <input\r\n                type=\"text\"\r\n                list=\"category\"\r\n                placeholder=\"Category\"\r\n                className={this.css.inputStyle1}\r\n                onBlur={this.apiGetSubcategoryList}\r\n              />\r\n              <datalist id=\"category\">{this.layoutCategoryDatalist()}</datalist>\r\n            </Col>\r\n          </Row>\r\n\r\n          {this.layoutSubcategoryDatalist()}\r\n        </Container>\r\n\r\n        <br />\r\n        <Container>\r\n          <Row>\r\n            {this.state.recordType === \"expenses\" ? (\r\n              <h4>Add Expenses Category</h4>\r\n            ) : (\r\n              <h4>Add Revenue Category</h4>\r\n            )}\r\n          </Row>\r\n        </Container>\r\n\r\n        <Container className={this.css.containerStyle1}>\r\n          <Row>\r\n            <Col sm={3} md={3} lg={3}>\r\n              <div\r\n                className={\r\n                  this.state.categoryType === \"category\"\r\n                    ? this.css.switchCatTypeActive\r\n                    : this.css.switchCatTypeNonactive\r\n                }\r\n                onClick={() => this.switchCategoryType(\"category\")}\r\n              >\r\n                <span>Category</span>\r\n              </div>\r\n            </Col>\r\n            <Col sm={3} md={3} lg={3}>\r\n              <div\r\n                className={\r\n                  this.state.categoryType === \"subcategory\"\r\n                    ? this.css.switchCatTypeActive\r\n                    : this.css.switchCatTypeNonactive\r\n                }\r\n                onClick={() => this.switchCategoryType(\"subcategory\")}\r\n              >\r\n                <span>Subcategory</span>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n\r\n          {this.state.categoryType === \"subcategory\"\r\n            ? this.layoutAddSubcategoryForm()\r\n            : this.layoutAddCategoryForm()}\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // layout function\r\n  layoutAddCategoryForm = () => {\r\n    return (\r\n      <div>\r\n        <Row>\r\n          <Col className={this.css.divStyle1}>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Category\"\r\n              className={this.css.inputStyle1}\r\n              onBlur={this.setInputCategory}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col sm={2} md={2} lg={3}>\r\n            <input\r\n              type=\"submit\"\r\n              className={this.css.inputStyle1}\r\n              onClick={this.btnSubmit}\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  layoutAddSubcategoryForm = () => {\r\n    return (\r\n      <div>\r\n        <Row>\r\n          <Col className={this.css.divStyle1}>\r\n            <input\r\n              type=\"text\"\r\n              list=\"category\"\r\n              placeholder=\"Category\"\r\n              className={this.css.inputStyle1}\r\n              onBlur={this.setInputCategory}\r\n            />\r\n            <datalist id=\"category\">{this.layoutCategoryDatalist()}</datalist>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col className={this.css.divStyle1}>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Subcategory\"\r\n              className={this.css.inputStyle1}\r\n              onBlur={this.setInputSubcategory}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col sm={2} md={2} lg={3}>\r\n            <input\r\n              type=\"submit\"\r\n              className={this.css.inputStyle1}\r\n              onClick={this.btnSubmit}\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  layoutCategoryDatalist = () => {\r\n    return this.state.categoryList.map((value, index) => (\r\n      <option key={index} value={value.name}></option>\r\n    ));\r\n  };\r\n\r\n  layoutSubcategoryDatalist = () => {\r\n    return this.state.subcategoryList.map((value, index) => (\r\n      <li key={index}>{value.name}</li>\r\n    ));\r\n  };\r\n  // Layout function end\r\n\r\n  // API function\r\n  apiGetCategoryList = (type) => {\r\n    console.log(\"type: \" + type);\r\n    axios\r\n      .get(\r\n        process.env.REACT_APP_BASE_URL +\r\n          process.env.REACT_APP_CATEGORY_GET_LIST +\r\n          \"?type=\" +\r\n          type\r\n      )\r\n      .then((response) => {\r\n        if (response.data.message === \"success\") {\r\n          this.setState({ categoryList: response.data.data });\r\n        }\r\n      });\r\n  };\r\n\r\n  apiGetSubcategoryList = (event) => {\r\n    // GET expenses/revenue subcategory list\r\n    console.log(\"eventCategory: \" + event.target.value);\r\n    let eventCategory = event.target.value;\r\n    let type = this.state.recordType;\r\n\r\n    if (eventCategory !== \"\" && this.state.viewCategory !== eventCategory) {\r\n      this.setState({ viewCategory: eventCategory });\r\n\r\n      let url =\r\n        process.env.REACT_APP_BASE_URL +\r\n        process.env.REACT_APP_SUBCATEGORY_GET_LIST +\r\n        \"?category=\" +\r\n        eventCategory +\r\n        \"&type=\" +\r\n        type;\r\n      console.log(\"URL: \" + url);\r\n      axios.get(url).then((response) => {\r\n        if (response.data.message === \"success\") {\r\n          this.setState({ subcategoryList: response.data.data });\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  apiPostAddCategory = () => {\r\n    // POST add new category Expenses/Revenue\r\n    let category = this.state.inputCategory;\r\n    let type = this.state.recordType;\r\n\r\n    axios\r\n      .post(\r\n        process.env.REACT_APP_BASE_URL +\r\n          process.env.REACT_APP_CATEGORY_POST_CREATE,\r\n        {\r\n          category: category,\r\n          type: type,\r\n        }\r\n      )\r\n      .then((response) => {\r\n        if (response.data.message === \"success\") {\r\n          console.log(\"set successModalShow true\");\r\n          this.setState({ successModalShow: true });\r\n        } else {\r\n          console.log(\"set failedModalShow true\");\r\n          this.setState({ failedModalShow: true });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        console.log(error.data);\r\n        this.setState({ failedModalShow: true });\r\n      });\r\n  };\r\n\r\n  apiPostAddSubcategory = () => {\r\n    // POST expenses add new subcategory\r\n    let category = this.state.inputCategory;\r\n    let subcategory = this.state.inputSubcategory;\r\n    let type = this.state.recordType;\r\n\r\n    axios\r\n      .post(process.env.REACT_APP_API_POST_CREATE_SUBCATEGORY, {\r\n        category: category,\r\n        subcategory: subcategory,\r\n        type: type,\r\n      })\r\n      .then((response) => {\r\n        if (response.data.message === \"success\") {\r\n          console.log(\"set successModalShow true\");\r\n          this.setState({ successModalShow: true });\r\n        } else {\r\n          console.log(\"set failedModalShow true\");\r\n          this.setState({ failedModalShow: true });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        this.setState({ failedModalShow: true });\r\n      });\r\n  };\r\n  // API function end\r\n\r\n  switchRecordType = (type) => {\r\n    console.log(\"type: \" + type);\r\n    if (this.state.recordType !== type) {\r\n      console.log(\"switch record type\");\r\n      this.setState({ recordType: type });\r\n      this.apiGetCategoryList(type);\r\n    }\r\n  };\r\n\r\n  // Update state value\r\n  btnSubmit = () => {\r\n    console.log(\"btn submit click\");\r\n    if (this.state.categoryType === \"category\") {\r\n      this.apiPostAddCategory();\r\n    } else if (this.state.categoryType === \"subcategory\") {\r\n      this.apiPostAddSubcategory();\r\n    }\r\n  };\r\n\r\n  btnClearAll = () => {};\r\n\r\n  switchCategoryType = (categoryType) => {\r\n    console.log(\"switchCategoryType: \" + categoryType);\r\n    this.setState({ categoryType: categoryType });\r\n  };\r\n\r\n  setInputCategory = (event) => {\r\n    console.log(\"inputCategory: \" + event.target.value);\r\n    this.setState({ inputCategory: event.target.value });\r\n  };\r\n\r\n  setInputSubcategory = (event) => {\r\n    console.log(\"inputSubcategory: \" + event.target.value);\r\n    this.setState({ inputSubcategory: event.target.value });\r\n  };\r\n  // Update state value end\r\n}\r\n\r\nexport default ExpensesType;\r\n","import React, { Component } from \"react\";\r\nexport const getCurrentMonth = () => {\r\n  let date = new Date();\r\n  let month = parseInt(date.getMonth()) + 1;\r\n\r\n  if (month < 10) {\r\n    return \"0\" + month;\r\n  } else {\r\n    return month;\r\n  }\r\n};\r\n\r\nexport const getCurrentYear = () => {\r\n  let date = new Date();\r\n  return date.getFullYear();\r\n};\r\n\r\nexport const amountDisplayConverter = (amount) => {\r\n  // Convert amount to display format\r\n  let type = amount.toString().includes(\"-\") ? \"- \" : \"\";\r\n  let newAmount = amount.toString().replace(\"-\", \"\");\r\n\r\n  return (\r\n    type +\r\n    \"RM \" +\r\n    parseFloat(newAmount)\r\n      .toFixed(2)\r\n      .replace(/\\d(?=(\\d{3})+\\.)/g, \"$&,\")\r\n  );\r\n};\r\n\r\nexport const amountToFixed2 = (amount) => {\r\n  // Convert amount to display format\r\n  return parseFloat(amount).toFixed(2);\r\n};\r\n\r\nexport const getDayOfWeek = (date) => {\r\n  // Get day of the week\r\n  let newDate = new Date(date);\r\n  let day = newDate.getDay();\r\n\r\n  switch (day) {\r\n    case 0:\r\n      return \"Sunday\";\r\n    case 1:\r\n      return \"Monday\";\r\n    case 2:\r\n      return \"Tuesday\";\r\n    case 3:\r\n      return \"Wednesday\";\r\n    case 4:\r\n      return \"Thursday\";\r\n    case 5:\r\n      return \"Friday\";\r\n    case 6:\r\n      return \"Satuday\";\r\n    default:\r\n      return \"\";\r\n  }\r\n};\r\n\r\nexport const getLayoutDatalist = (list) => {\r\n  // Create datalist for Form.Control\r\n  // Note: should add switch case if special handling required\r\n  return list.map((value, index) => (\r\n    <option key={index} value={value.name}></option>\r\n  ));\r\n};\r\n\r\nexport const getTodayDate = () => {\r\n  var date = new Date();\r\n  var month =\r\n    (date.getMonth() + 1).toString().length === 1\r\n      ? \"0\" + (date.getMonth() + 1)\r\n      : date.getMonth() + 1;\r\n  var day =\r\n    date.getDate().toString().length === 1\r\n      ? \"0\" + date.getDate()\r\n      : date.getDate();\r\n\r\n  var todayDate = date.getFullYear() + \"-\" + month + \"-\" + day;\r\n  console.log(\"todayDate: \" + todayDate);\r\n  return todayDate;\r\n};\r\n\r\nexport const isEmpty = (value) => {\r\n  if (value != null && value != \"\") {\r\n    return false;\r\n  } else {\r\n    return true;\r\n  }\r\n};\r\n\r\nexport const getYearList = () => {\r\n  let yearList = [];\r\n  let endYear = getCurrentYear();\r\n\r\n  for (let i = endYear; i >= 2020; i--) {\r\n    yearList.push({ name: i });\r\n  }\r\n  return yearList;\r\n};\r\n\r\nexport const getIndexByName = (list, name) => {\r\n  for (let value of list) {\r\n    if (value.name === name) {\r\n      console.log(\"getIndexByName: \" + name + \" index: \" + value.id);\r\n      return value.id;\r\n    }\r\n  }\r\n\r\n  return \"\";\r\n};\r\n\r\nexport const generateUrlParamsByJson = (jsonObject) => {\r\n  // not yet using this function\r\n  let urlParams = \"\";\r\n  for (var key in jsonObject) {\r\n    if (jsonObject.hasOwnProperty(key)) {\r\n      console.log(key + \" -> \" + jsonObject[key]);\r\n    }\r\n  }\r\n\r\n  return \"\";\r\n};","import axios from \"axios\";\r\n\r\nlet baseUrl = process.env.REACT_APP_BASE_URL;\r\n\r\nexport const apiGetUserList = async () => {\r\n  // GET user list\r\n  let url = baseUrl + process.env.REACT_APP_USER_GET_LIST;\r\n  let response;\r\n\r\n  console.log(\"URL: \" + url);\r\n  await axios\r\n    .get(url)\r\n    .then((result) => {\r\n      response = result.data;\r\n    })\r\n    .catch((err) => {\r\n      console.log(\"Request Error: \" + err);\r\n      response = \"{}\";\r\n    });\r\n  console.log(\"response: \" + JSON.stringify(response));\r\n  return response;\r\n};\r\n\r\nexport const apiGetRecordTypeList = async () => {\r\n  // GET record type list\r\n  let url = baseUrl + process.env.REACT_APP_RECORD_TYPE_GET_LIST;\r\n  let response;\r\n\r\n  console.log(\"URL: \" + url);\r\n  await axios\r\n    .get(url)\r\n    .then((result) => {\r\n      response = result.data;\r\n    })\r\n    .catch((err) => {\r\n      console.log(\"Request Error: \" + err);\r\n      response = \"{}\";\r\n    });\r\n  console.log(\"response: \" + JSON.stringify(response));\r\n  return response;\r\n};\r\n\r\nexport const apiGetCategoryList = async (type) => {\r\n  // GET category list\r\n  type = type == null ? \"\" : type;\r\n  let url = baseUrl + process.env.REACT_APP_CATEGORY_GET_LIST + \"?type=\" + type;\r\n  let response;\r\n\r\n  console.log(\"URL: \" + url);\r\n  await axios\r\n    .get(url)\r\n    .then((result) => {\r\n      response = result.data;\r\n    })\r\n    .catch((err) => {\r\n      console.log(\"Request Error: \" + err);\r\n      response = \"{}\";\r\n    });\r\n  console.log(\"response: \" + JSON.stringify(response));\r\n  return response;\r\n};\r\n\r\nexport const apiGetSubcategoryList = async (recordType, category) => {\r\n  // GET subcategory list\r\n  recordType = recordType == null ? \"\" : recordType;\r\n  category = category == null ? \"\" : category;\r\n  let url =\r\n    baseUrl +\r\n    process.env.REACT_APP_SUBCATEGORY_GET_LIST +\r\n    \"?category=\" +\r\n    category +\r\n    \"&recordType=\" +\r\n    recordType;\r\n  let response;\r\n\r\n  console.log(\"URL: \" + url);\r\n  await axios\r\n    .get(url)\r\n    .then((result) => {\r\n      response = result.data;\r\n    })\r\n    .catch((err) => {\r\n      console.log(\"Request Error: \" + err);\r\n      response = \"{}\";\r\n    });\r\n  console.log(\"response: \" + JSON.stringify(response));\r\n  return response;\r\n};\r\n\r\nexport const apiGetRemarkList = async () => {\r\n  // GET subcategory list\r\n  // recordType = recordType == null ? \"\" : recordType;\r\n  // category = category == null ? \"\" : category;\r\n  let url = baseUrl + process.env.REACT_APP_REMARK_GET_LIST;\r\n  // \"?category=\" +\r\n  // category +\r\n  // \"&recordType=\" +\r\n  // recordType;\r\n  let response;\r\n\r\n  console.log(\"URL: \" + url);\r\n  await axios\r\n    .get(url)\r\n    .then((result) => {\r\n      response = result.data;\r\n    })\r\n    .catch((err) => {\r\n      console.log(\"Request Error: \" + err);\r\n      response = \"{}\";\r\n    });\r\n  console.log(\"response: \" + JSON.stringify(response));\r\n  return response;\r\n};\r\n\r\nexport const apiGetSettlementList = async (searchForm) => {\r\n  // GET settlement list\r\n  console.log(\"apiGetSettlementList searchForm: \" + JSON.stringify(searchForm));\r\n\r\n  let userId = searchForm.userId === null ? \"\" : searchForm.userId;\r\n  // let category = category == null ? \"\" : category;\r\n  let url =\r\n    baseUrl + process.env.REACT_APP_SETTLEMENT_GET_LIST + \"?userId=\" + userId;\r\n  // \"&recordType=\" +\r\n  // recordType;\r\n  let response;\r\n\r\n  console.log(\"URL: \" + url);\r\n  await axios\r\n    .get(url)\r\n    .then((result) => {\r\n      response = result.data;\r\n    })\r\n    .catch((err) => {\r\n      console.log(\"Request Error: \" + err);\r\n      response = \"{}\";\r\n    });\r\n  console.log(\"response: \" + JSON.stringify(response));\r\n  return response;\r\n};\r\n\r\nexport const apiPostSettlementCreate = async (settlementForm) => {\r\n  // GET settlement list\r\n  console.log(\r\n    \"apiPostSettlementCreate settlementForm: \" + JSON.stringify(settlementForm)\r\n  );\r\n\r\n  let userId = settlementForm.userId === null ? \"\" : settlementForm.userId;\r\n  // let category = category == null ? \"\" : category;\r\n  let url =\r\n    baseUrl +\r\n    process.env.REACT_APP_SETTLEMENT_POST_CREATE +\r\n    \"?userId=\" +\r\n    userId;\r\n  // \"&recordType=\" +\r\n  // recordType;\r\n  let response;\r\n\r\n  console.log(\"URL: \" + url);\r\n  await axios\r\n    .get(url)\r\n    .then((result) => {\r\n      response = result.data;\r\n    })\r\n    .catch((err) => {\r\n      console.log(\"Request Error: \" + err);\r\n      response = \"{}\";\r\n    });\r\n  console.log(\"response: \" + JSON.stringify(response));\r\n  return response;\r\n};\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n// import { useAsync } from \"react-async\";\r\nimport Constant from \"../../global/Constant.json\";\r\n\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Table from \"react-bootstrap/Table\";\r\n\r\n// font-awesome\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPen } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faTrashAlt } from \"@fortawesome/free-regular-svg-icons\";\r\n\r\nimport * as Global from \"../../global/GlobalUtil\";\r\n\r\nimport {\r\n  apiGetRecordTypeList,\r\n  apiGetCategoryList,\r\n  apiGetSubcategoryList,\r\n} from \"../../global/GlobalAPI\";\r\n\r\nimport {\r\n  SuccessModal,\r\n  FailedModal,\r\n  ConfirmModal,\r\n} from \"../../layouts/modal/Modal\";\r\n\r\nclass Category extends Component {\r\n  state = {\r\n    recordTypeList: [],\r\n    categoryList: [],\r\n    subcategoryList: [],\r\n    userList: [],\r\n\r\n    // default value\r\n    searchForm: {\r\n      filterType: \"\",\r\n      recordType: \"\",\r\n      category: \"\",\r\n      subcategory: \"\",\r\n    },\r\n\r\n    modalInsertForm: {\r\n      insertType: \"\",\r\n      recordType: \"\",\r\n      category: \"\",\r\n      subcategory: \"\",\r\n    },\r\n\r\n    modalEditForm: {\r\n      editType: \"\",\r\n      id: \"\",\r\n      name: \"\",\r\n    },\r\n\r\n    successModalShow: false,\r\n    failedModalShow: false,\r\n    confirmModalShow: false,\r\n    modalAddRecordShow: false,\r\n    modalEditRecordShow: false,\r\n  };\r\n\r\n  css = {\r\n    containerStyle1: \"border-2-gray rounded p-3\",\r\n    divStyle1: \"py-2 px-3\",\r\n    inputStyle1: \"width-100p\",\r\n    btnSubmit: \"width-100p rounded-pill btn-green border-none py-1\",\r\n    btnReset: \"width-100p rounded-pill btn-blue py-1\",\r\n    btnClear: \"width-100p rounded-pill btn-yellow border-none py-1\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.apiGetRecordTypeList();\r\n    this.apiGetCategoryList();\r\n    // this.getUserList();\r\n    this.apiGetSubcategoryList();\r\n  }\r\n\r\n  render() {\r\n    if (this.state.inputDate === \"\") {\r\n      var date = new Date();\r\n      var month =\r\n        (date.getMonth() + 1).toString().length === 1\r\n          ? \"0\" + (date.getMonth() + 1)\r\n          : date.getMonth() + 1;\r\n      var day =\r\n        date.getDate().toString().length === 1\r\n          ? \"0\" + date.getDate()\r\n          : date.getDate();\r\n\r\n      var todayDate = date.getFullYear() + \"-\" + month + \"-\" + day;\r\n      console.log(\"todayDate:\" + todayDate);\r\n      this.setState({ inputDate: todayDate });\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <br />\r\n        {/* Modal */}\r\n        <SuccessModal\r\n          show={this.state.successModalShow}\r\n          onHide={() => this.setState({ successModalShow: false })}\r\n        />\r\n        <FailedModal\r\n          show={this.state.failedModalShow}\r\n          errMsg={this.state.modalFailedErrMsg}\r\n          onHide={() => this.setState({ failedModalShow: false })}\r\n        />\r\n\r\n        {this.layoutModalAddRecord()}\r\n        {this.layoutModalEditRecord()}\r\n\r\n        {/* <ConfirmModal\r\n          show={this.state.confirmModalShow}\r\n          date={this.state.inputDate}\r\n          category={this.state.inputCategory}\r\n          subcategory={this.state.inputSubcategory}\r\n          remark={this.state.inputRemark}\r\n          data={this.state.userShareBillList}\r\n          actionSubmit={this.apiPostAddRecord2}\r\n          onHide={() => this.setState({ confirmModalShow: false })}\r\n        /> */}\r\n        {/* <SwitchRecType\r\n          type={this.state.recordType}\r\n          switchRecType={this.switchRecordType}\r\n        /> */}\r\n        <br />\r\n        <Container className={this.css.containerStyle1}>\r\n          <Form>\r\n            <Form.Row>\r\n              <Form.Group as={Col}>\r\n                <Form.Label className={\"width-10p\"}>Filter By:</Form.Label>\r\n                <Form.Check\r\n                  className={\"px-2\"}\r\n                  inline\r\n                  label=\"All\"\r\n                  name=\"filterType\"\r\n                  type=\"radio\"\r\n                  defaultChecked={true}\r\n                  id={\"radio-all\"}\r\n                  onClick={(event) =>\r\n                    this.setSearchForm(Constant.filterType, \"\")\r\n                  }\r\n                />\r\n                <Form.Check\r\n                  className={\"px-2\"}\r\n                  inline\r\n                  label=\"Record Type\"\r\n                  name=\"filterType\"\r\n                  type=\"radio\"\r\n                  id={\"radio-record-type\"}\r\n                  onClick={(event) =>\r\n                    this.setSearchForm(Constant.filterType, Constant.recordType)\r\n                  }\r\n                />\r\n                <Form.Check\r\n                  className={\"px-2\"}\r\n                  inline\r\n                  label=\"Category\"\r\n                  name=\"filterType\"\r\n                  type=\"radio\"\r\n                  id={\"radio-category\"}\r\n                  onClick={(event) =>\r\n                    this.setSearchForm(Constant.filterType, Constant.category)\r\n                  }\r\n                />\r\n                <Form.Check\r\n                  className={\"px-2\"}\r\n                  inline\r\n                  label=\"Subcategory\"\r\n                  name=\"filterType\"\r\n                  type=\"radio\"\r\n                  id={\"radio-subcategory\"}\r\n                  onClick={(event) =>\r\n                    this.setSearchForm(\r\n                      Constant.filterType,\r\n                      Constant.subcategory\r\n                    )\r\n                  }\r\n                />\r\n              </Form.Group>\r\n            </Form.Row>\r\n            <Form.Row>\r\n              <Form.Group as={Col} md={4}>\r\n                <Form.Label>Record Type</Form.Label>\r\n                <Form.Control\r\n                  list=\"recordType\"\r\n                  onChange={(event) =>\r\n                    this.setSearchForm(Constant.recordType, event.target.value)\r\n                  }\r\n                ></Form.Control>\r\n              </Form.Group>\r\n              <Form.Group as={Col} md={4}>\r\n                <Form.Label>Category</Form.Label>\r\n                <Form.Control\r\n                  list=\"category\"\r\n                  onChange={(event) =>\r\n                    this.setSearchForm(Constant.category, event.target.value)\r\n                  }\r\n                ></Form.Control>\r\n              </Form.Group>\r\n              <Form.Group as={Col} md={4}>\r\n                <Form.Label>Subcategory</Form.Label>\r\n                <Form.Control\r\n                  list=\"subcategory\"\r\n                  onChange={(event) =>\r\n                    this.setSearchForm(Constant.subcategory, event.target.value)\r\n                  }\r\n                ></Form.Control>\r\n              </Form.Group>\r\n            </Form.Row>\r\n            <Form.Row>\r\n              <Form.Group as={Col} md={4}>\r\n                <Button size=\"md\" block onClick={() => \"\"}>\r\n                  Search\r\n                </Button>\r\n              </Form.Group>\r\n              <Form.Group as={Col} md={4}>\r\n                <Button\r\n                  size=\"md\"\r\n                  block\r\n                  onClick={() => this.setState({ modalAddRecordShow: true })}\r\n                >\r\n                  Add New\r\n                </Button>\r\n              </Form.Group>\r\n            </Form.Row>\r\n          </Form>\r\n        </Container>\r\n        <br />\r\n\r\n        <Container>\r\n          <Table responsive>\r\n            {this.layoutSearchFormTableViewHead()}\r\n            {this.layoutSearchFormTableViewRow()}\r\n          </Table>\r\n        </Container>\r\n\r\n        <datalist id=\"newType\">\r\n          <option key=\"1\" value=\"Record Type\" defaultChecked=\"true\"></option>\r\n          <option key=\"2\" value=\"Category\"></option>\r\n          <option key=\"3\" value=\"Subcategory\"></option>\r\n        </datalist>\r\n\r\n        <datalist id=\"recordType\">\r\n          {Global.getLayoutDatalist(this.state.recordTypeList)}\r\n        </datalist>\r\n        <datalist id=\"category\">\r\n          {Global.getLayoutDatalist(this.state.categoryList)}\r\n        </datalist>\r\n        <datalist id=\"subcategory\">\r\n          {Global.getLayoutDatalist(this.state.subcategoryList)}\r\n        </datalist>\r\n\r\n        <datalist id=\"modalInsertFormCategory\">\r\n          {Global.getLayoutDatalist(\r\n            this.getCategoryListByRecordType(\r\n              this.state.modalInsertForm.recordType\r\n            )\r\n          )}\r\n        </datalist>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Layout function\r\n  layoutSearchFormTableViewHead = () => {\r\n    let filterType = this.state.searchForm.filterType;\r\n\r\n    switch (filterType) {\r\n      case Constant.recordType: {\r\n        return (\r\n          <thead>\r\n            <tr>\r\n              <th>#</th>\r\n              <th>Record Type</th>\r\n              <th>Actions</th>\r\n            </tr>\r\n          </thead>\r\n        );\r\n      }\r\n      case Constant.category: {\r\n        return (\r\n          <thead>\r\n            <tr>\r\n              <th>#</th>\r\n              <th>Record Type</th>\r\n              <th>Category</th>\r\n              <th>Actions</th>\r\n            </tr>\r\n          </thead>\r\n        );\r\n      }\r\n      case \"\":\r\n      case Constant.subcategory: {\r\n        return (\r\n          <thead>\r\n            <tr>\r\n              <th>#</th>\r\n              <th>Record Type</th>\r\n              <th>Category</th>\r\n              <th>Subcategory</th>\r\n              <th>Actions</th>\r\n            </tr>\r\n          </thead>\r\n        );\r\n      }\r\n      default:\r\n        return \"\";\r\n    }\r\n  };\r\n\r\n  layoutSearchFormTableViewRow = () => {\r\n    let recordTypeList = this.state.recordTypeList;\r\n    let categoryList = this.state.categoryList;\r\n    let subcategoryList = this.state.subcategoryList;\r\n\r\n    let filterType = this.state.searchForm.filterType;\r\n    let recordType = this.state.searchForm.recordType;\r\n    let category = this.state.searchForm.category;\r\n    let subcategory = this.state.searchForm.subcategory;\r\n\r\n    let newRecordTypeList = [];\r\n    let newCategoryList = [];\r\n    let newSubcategoryList = [];\r\n\r\n    switch (filterType) {\r\n      case Constant.recordType: {\r\n        recordTypeList.forEach((value, index) => {\r\n          if (\r\n            recordType == \"\" ||\r\n            (recordType != \"\" && value.name === recordType)\r\n          ) {\r\n            newRecordTypeList.push(recordTypeList[index]);\r\n          }\r\n        });\r\n\r\n        return (\r\n          <tbody>\r\n            {newRecordTypeList.map((value, index) => (\r\n              <tr>\r\n                <td>{index + 1}</td>\r\n                <td>{value.name}</td>\r\n                <td>\r\n                  <FontAwesomeIcon\r\n                    icon={faPen}\r\n                    size=\"1x\"\r\n                    className=\"mx-2\"\r\n                    onClick={() =>\r\n                      this.setState({\r\n                        modalEditRecordShow: true,\r\n                        modalEditForm: {\r\n                          ...this.state.modalEditForm,\r\n                          editType: Constant.recordType,\r\n                          id: value.record_type_id,\r\n                          name: value.name,\r\n                        },\r\n                      })\r\n                    }\r\n                  />\r\n                  <FontAwesomeIcon\r\n                    icon={faTrashAlt}\r\n                    size=\"1x\"\r\n                    className=\"mx-2\"\r\n                    onClick={() => this.deleteRecord(value)}\r\n                  />\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        );\r\n      }\r\n      case Constant.category: {\r\n        categoryList.forEach((value, index) => {\r\n          if (\r\n            (recordType == \"\" ||\r\n              (recordType != \"\" && value.record_type === recordType)) &&\r\n            (category == \"\" || (category != \"\" && value.name === category))\r\n          ) {\r\n            newCategoryList.push(categoryList[index]);\r\n          }\r\n        });\r\n\r\n        return (\r\n          <tbody>\r\n            {newCategoryList.map((value, index) => (\r\n              <tr>\r\n                <td>{index + 1}</td>\r\n                <td>{value.record_type}</td>\r\n                <td>{value.name}</td>\r\n                <td>\r\n                  <FontAwesomeIcon\r\n                    icon={faPen}\r\n                    size=\"1x\"\r\n                    className=\"mx-2\"\r\n                    onClick={() =>\r\n                      this.setState({\r\n                        modalEditRecordShow: true,\r\n                        modalEditForm: {\r\n                          ...this.state.modalEditForm,\r\n                          editType: Constant.category,\r\n                          id: value.category_id,\r\n                          name: value.name,\r\n                        },\r\n                      })\r\n                    }\r\n                  />\r\n                  <FontAwesomeIcon\r\n                    icon={faTrashAlt}\r\n                    size=\"1x\"\r\n                    className=\"mx-2\"\r\n                    onClick={() => this.deleteRecord(value)}\r\n                  />\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        );\r\n      }\r\n      case \"\":\r\n      case Constant.subcategory: {\r\n        subcategoryList.forEach((value, index) => {\r\n          if (\r\n            (recordType == \"\" ||\r\n              (recordType != \"\" && value.record_type === recordType)) &&\r\n            (category == \"\" ||\r\n              (category != \"\" && value.category === category)) &&\r\n            (subcategory == \"\" ||\r\n              (subcategory != \"\" && value.name === subcategory))\r\n          ) {\r\n            newSubcategoryList.push(subcategoryList[index]);\r\n          }\r\n        });\r\n\r\n        return (\r\n          <tbody>\r\n            {newSubcategoryList.map((value, index) => (\r\n              <tr>\r\n                <td>{index + 1}</td>\r\n                <td>{value.record_type}</td>\r\n                <td>{value.category}</td>\r\n                <td>{value.name}</td>\r\n                <td>\r\n                  <FontAwesomeIcon\r\n                    icon={faPen}\r\n                    size=\"1x\"\r\n                    className=\"mx-2\"\r\n                    onClick={() =>\r\n                      this.setState({\r\n                        modalEditRecordShow: true,\r\n                        modalEditForm: {\r\n                          ...this.state.modalEditForm,\r\n                          editType: Constant.subcategory,\r\n                          id: value.subcategory_id,\r\n                          name: value.name,\r\n                        },\r\n                      })\r\n                    }\r\n                  />\r\n                  <FontAwesomeIcon\r\n                    icon={faTrashAlt}\r\n                    size=\"1x\"\r\n                    className=\"mx-2\"\r\n                    onClick={() => this.deleteRecord(value)}\r\n                  />\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        );\r\n      }\r\n      default:\r\n        return \"\";\r\n    }\r\n  };\r\n\r\n  // Modal edit record\r\n  layoutModalEditRecord = (value) => {\r\n    console.log(\"layoutModalEditRecord\");\r\n    console.log(\"modalEditForm: \" + JSON.stringify(this.state.modalEditForm));\r\n\r\n    return (\r\n      <Modal\r\n        size=\"lg\"\r\n        backdrop=\"true\"\r\n        animation=\"true\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n        show={this.state.modalEditRecordShow}\r\n      >\r\n        <Modal.Header>\r\n          <Modal.Title className=\"text-center\">Edit Record</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body className=\"show-grid\">\r\n          <Form className=\"\">\r\n            <Form.Row>\r\n              <Form.Group as={Col} controlId=\"\">\r\n                <Form.Label>{this.state.modalEditForm.editType}</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  list=\"newType\"\r\n                  defaultValue={this.state.modalEditForm.name}\r\n                  onChange={(event) =>\r\n                    this.setModalEditForm(Constant.name, event.target.value)\r\n                  }\r\n                  // readOnly\r\n                  // value={props.value.record_id}\r\n                />\r\n              </Form.Group>\r\n            </Form.Row>\r\n          </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            variant=\"secondary\"\r\n            onClick={() => this.setState({ modalEditRecordShow: false })}\r\n          >\r\n            Close\r\n          </Button>\r\n\r\n          {this.layoutModalEditRecordFooter()}\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n  };\r\n\r\n  layoutModalEditRecordFooter = () => {\r\n    if (this.state.modalEditForm.editType === Constant.recordType) {\r\n      return (\r\n        <Button\r\n          variant=\"primary\"\r\n          onClick={() => this.apiPostUpdateRecordType()}\r\n        >\r\n          Save Changes\r\n        </Button>\r\n      );\r\n    } else if (this.state.modalEditForm.editType === Constant.category) {\r\n      return (\r\n        <Button variant=\"primary\" onClick={() => this.apiPostUpdateCategory()}>\r\n          Save Changes\r\n        </Button>\r\n      );\r\n    } else if (this.state.modalEditForm.editType === Constant.subcategory) {\r\n      return (\r\n        <Button\r\n          variant=\"primary\"\r\n          onClick={() => this.apiPostUpdateSubcategory()}\r\n        >\r\n          Save Changes\r\n        </Button>\r\n      );\r\n    }\r\n  };\r\n\r\n  // End of Modal edit record\r\n\r\n  layoutModalAddRecord = () => {\r\n    return (\r\n      <Modal\r\n        size=\"lg\"\r\n        backdrop=\"true\"\r\n        animation=\"true\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n        show={this.state.modalAddRecordShow}\r\n      >\r\n        <Modal.Header>\r\n          <Modal.Title className=\"text-center\">Add Record</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body className=\"show-grid\">\r\n          <Form className=\"\">\r\n            <Form.Row>\r\n              <Form.Group as={Col} controlId=\"\">\r\n                <Form.Label>Select Insert Type</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  list=\"newType\"\r\n                  onChange={(event) =>\r\n                    this.setModalInsertForm(\r\n                      Constant.insertType,\r\n                      event.target.value\r\n                    )\r\n                  }\r\n                  // readOnly\r\n                  // value={props.value.record_id}\r\n                />\r\n              </Form.Group>\r\n            </Form.Row>\r\n          </Form>\r\n          {this.layoutModalAddRecordBody()}\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            variant=\"secondary\"\r\n            onClick={() => this.setState({ modalAddRecordShow: false })}\r\n          >\r\n            Close\r\n          </Button>\r\n\r\n          {this.layoutModalAddRecordFooter()}\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n  };\r\n\r\n  layoutModalAddRecordBody = () => {\r\n    let formBody;\r\n    let formButton;\r\n\r\n    // layout controller\r\n    if (this.state.modalInsertForm.insertType === \"Record Type\") {\r\n      formBody = (\r\n        <Form.Row>\r\n          <Form.Group as={Col}>\r\n            <Form.Label>Record Type</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              placeholder=\"Record Type\"\r\n              onChange={(event) =>\r\n                this.setModalInsertForm(Constant.recordType, event.target.value)\r\n              }\r\n            ></Form.Control>\r\n          </Form.Group>\r\n        </Form.Row>\r\n      );\r\n    } else if (this.state.modalInsertForm.insertType === \"Category\") {\r\n      formBody = (\r\n        <Form.Row>\r\n          <Form.Group as={Col}>\r\n            <Form.Label>Record Type</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              list=\"recordType\"\r\n              placeholder=\"Record Type\"\r\n              onChange={(event) =>\r\n                this.setModalInsertForm(Constant.recordType, event.target.value)\r\n              }\r\n            ></Form.Control>\r\n          </Form.Group>\r\n          <Form.Group as={Col}>\r\n            <Form.Label>Category</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              // list=\"category\"\r\n              placeholder=\"Category\"\r\n              onChange={(event) =>\r\n                this.setModalInsertForm(Constant.category, event.target.value)\r\n              }\r\n            ></Form.Control>\r\n          </Form.Group>\r\n        </Form.Row>\r\n      );\r\n    } else if (this.state.modalInsertForm.insertType === \"Subcategory\") {\r\n      formBody = (\r\n        <Form.Row>\r\n          <Form.Group as={Col}>\r\n            <Form.Label>Record Type</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              list=\"recordType\"\r\n              placeholder=\"Record Type\"\r\n              onChange={(event) =>\r\n                this.setModalInsertForm(Constant.recordType, event.target.value)\r\n              }\r\n            ></Form.Control>\r\n          </Form.Group>\r\n          <Form.Group as={Col} md={4}>\r\n            <Form.Label>Category</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              list=\"modalInsertFormCategory\"\r\n              placeholder=\"Category\"\r\n              onChange={(event) =>\r\n                this.setModalInsertForm(Constant.category, event.target.value)\r\n              }\r\n            ></Form.Control>\r\n          </Form.Group>\r\n          <Form.Group as={Col} md={4}>\r\n            <Form.Label>Subcategory</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              // list=\"category\"\r\n              placeholder=\"Subcategory\"\r\n              onChange={(event) =>\r\n                this.setModalInsertForm(\r\n                  Constant.subcategory,\r\n                  event.target.value\r\n                )\r\n              }\r\n            ></Form.Control>\r\n          </Form.Group>\r\n        </Form.Row>\r\n      );\r\n    }\r\n\r\n    // layout controller end\r\n\r\n    // return layout\r\n\r\n    return (\r\n      <div>\r\n        {/* {formHeader} */}\r\n        {formBody}\r\n        {formButton}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  layoutModalAddRecordFooter = () => {\r\n    if (this.state.modalInsertForm.insertType === \"Record Type\") {\r\n      return (\r\n        <Button variant=\"primary\" onClick={() => this.apiPostAddRecordType()}>\r\n          Save Changes\r\n        </Button>\r\n      );\r\n    } else if (this.state.modalInsertForm.insertType === \"Category\") {\r\n      return (\r\n        <Button variant=\"primary\" onClick={() => this.apiPostAddCategory()}>\r\n          Save Changes\r\n        </Button>\r\n      );\r\n    } else if (this.state.modalInsertForm.insertType === \"Subcategory\") {\r\n      return (\r\n        <Button variant=\"primary\" onClick={() => this.apiPostAddSubcategory()}>\r\n          Save Changes\r\n        </Button>\r\n      );\r\n    }\r\n  };\r\n\r\n  // Layout function end\r\n\r\n  // API function\r\n  apiGetRecordTypeList = async () => {\r\n    // GET record type list\r\n    await apiGetRecordTypeList().then((response) => {\r\n      if (response.message === \"success\") {\r\n        console.log(\"recordTypeList: \" + JSON.stringify(response.data));\r\n        this.setState({ recordTypeList: response.data });\r\n      }\r\n    });\r\n  };\r\n\r\n  apiGetCategoryList = async () => {\r\n    // console.log(\"type: \" + type);\r\n    await apiGetCategoryList().then((response) => {\r\n      if (response.message === \"success\") {\r\n        this.setState({ categoryList: response.data });\r\n      }\r\n    });\r\n  };\r\n\r\n  apiGetSubcategoryList = async () => {\r\n    // Used for \"searchForm\"\r\n    // \"modalInsertForm\" didn't using it\r\n    let recordType = this.state.searchForm.recordType;\r\n    let category = this.state.searchForm.category;\r\n\r\n    await apiGetSubcategoryList(recordType, category).then((response) => {\r\n      if (response.message === \"success\") {\r\n        this.setState({ subcategoryList: response.data });\r\n      }\r\n    });\r\n  };\r\n\r\n  apiPostAddRecordType = () => {\r\n    let modalInsertForm = this.state.modalInsertForm;\r\n    // console.log(\"inputRecordType \" + inputForm);\r\n\r\n    if (modalInsertForm.recordType === \"\") {\r\n      this.setState({\r\n        failedModalShow: true,\r\n        modalFailedErrMsg: \"Empty Record Type\",\r\n      });\r\n    } else {\r\n      let baseUrl = process.env.REACT_APP_BASE_URL;\r\n      let url = baseUrl + process.env.REACT_APP_RECORD_TYPE_POST_CREATE;\r\n\r\n      axios\r\n        .post(url, {\r\n          recordType: modalInsertForm.recordType,\r\n        })\r\n        .then((response) => {\r\n          if (response.data.message === \"success\") {\r\n            console.log(\"set successModalShow true\");\r\n            this.setState({\r\n              successModalShow: true,\r\n            });\r\n            // Refresh list after insert success\r\n            this.apiGetRecordTypeList();\r\n          } else {\r\n            console.log(\"errMsg: \" + response.data.message);\r\n            console.log(\"set failedModalShow true\");\r\n            this.setState({\r\n              failedModalShow: true,\r\n              modalFailedErrMsg: response.data.message,\r\n            });\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n          this.setState({\r\n            failedModalShow: true,\r\n            modalFailedErrMsg: \"Unexpected Error\",\r\n          });\r\n        });\r\n    }\r\n  };\r\n\r\n  apiPostAddCategory = () => {\r\n    let modalInsertForm = this.state.modalInsertForm;\r\n    // console.log(\"inputRecordType \" + inputForm);\r\n\r\n    if (modalInsertForm.recordType === \"\") {\r\n      this.setState({\r\n        failedModalShow: true,\r\n        modalFailedErrMsg: \"Empty Record Type\",\r\n      });\r\n    } else if (modalInsertForm.category === \"\") {\r\n      this.setState({\r\n        failedModalShow: true,\r\n        modalFailedErrMsg: \"Empty Category\",\r\n      });\r\n    } else {\r\n      let baseUrl = process.env.REACT_APP_BASE_URL;\r\n      let url = baseUrl + process.env.REACT_APP_CATEGORY_POST_CREATE;\r\n\r\n      axios\r\n        .post(url, {\r\n          recordType: modalInsertForm.recordType,\r\n          category: modalInsertForm.category,\r\n        })\r\n        .then((response) => {\r\n          if (response.data.message === \"success\") {\r\n            console.log(\"set successModalShow true\");\r\n            this.setState({\r\n              successModalShow: true,\r\n            });\r\n            // Refresh list after insert success\r\n            this.apiGetCategoryList();\r\n          } else {\r\n            console.log(\"errMsg: \" + response.data.message);\r\n            console.log(\"set failedModalShow true\");\r\n            this.setState({\r\n              failedModalShow: true,\r\n              modalFailedErrMsg: response.data.message,\r\n            });\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n          this.setState({\r\n            failedModalShow: true,\r\n            modalFailedErrMsg: \"Unexpected Error\",\r\n          });\r\n        });\r\n    }\r\n  };\r\n\r\n  apiPostAddSubcategory = () => {\r\n    let modalInsertForm = this.state.modalInsertForm;\r\n    // console.log(\"inputRecordType \" + inputForm);\r\n\r\n    if (modalInsertForm.recordType === \"\") {\r\n      this.setState({\r\n        failedModalShow: true,\r\n        modalFailedErrMsg: \"Empty Record Type\",\r\n      });\r\n    } else if (modalInsertForm.category === \"\") {\r\n      this.setState({\r\n        failedModalShow: true,\r\n        modalFailedErrMsg: \"Empty Category\",\r\n      });\r\n    } else if (modalInsertForm.subcategory === \"\") {\r\n      this.setState({\r\n        failedModalShow: true,\r\n        modalFailedErrMsg: \"Empty Subcategory\",\r\n      });\r\n    } else {\r\n      let baseUrl = process.env.REACT_APP_BASE_URL;\r\n      let url = baseUrl + process.env.REACT_APP_SUBCATEGORY_POST_CREATE;\r\n\r\n      axios\r\n        .post(url, {\r\n          recordType: modalInsertForm.recordType,\r\n          category: modalInsertForm.category,\r\n          subcategory: modalInsertForm.subcategory,\r\n        })\r\n        .then((response) => {\r\n          if (response.data.message === \"success\") {\r\n            console.log(\"set successModalShow true\");\r\n            this.setState({\r\n              successModalShow: true,\r\n            });\r\n            // Refresh list after insert success\r\n            this.apiGetSubcategoryList();\r\n          } else {\r\n            console.log(\"errMsg: \" + response.data.message);\r\n            console.log(\"set failedModalShow true\");\r\n            this.setState({\r\n              failedModalShow: true,\r\n              modalFailedErrMsg: response.data.message,\r\n            });\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n          this.setState({\r\n            failedModalShow: true,\r\n            modalFailedErrMsg: \"Unexpected Error\",\r\n          });\r\n        });\r\n    }\r\n  };\r\n\r\n  apiPostUpdateRecordType = () => {\r\n    let modalEditForm = this.state.modalEditForm;\r\n    // console.log(\"inputRecordType \" + inputForm);\r\n\r\n    if (modalEditForm.id === \"\") {\r\n      this.setState({\r\n        failedModalShow: true,\r\n        modalFailedErrMsg: \"Invalid Id\",\r\n      });\r\n    } else if (modalEditForm.name === \"\") {\r\n      this.setState({\r\n        failedModalShow: true,\r\n        modalFailedErrMsg: \"Empty Record Type\",\r\n      });\r\n    } else {\r\n      let baseUrl = process.env.REACT_APP_BASE_URL;\r\n      let url = baseUrl + process.env.REACT_APP_RECORD_TYPE_POST_UPDATE;\r\n\r\n      //console.log(\"URL: \" + url);\r\n      axios\r\n        .post(url, {\r\n          id: modalEditForm.id,\r\n          recordType: modalEditForm.name,\r\n        })\r\n        .then((response) => {\r\n          if (response.data.message === \"success\") {\r\n            console.log(\"set successModalShow true\");\r\n            this.setState({\r\n              successModalShow: true,\r\n            });\r\n            // Refresh list after insert success\r\n            this.apiGetRecordTypeList();\r\n          } else {\r\n            console.log(\"errMsg: \" + response.data.message);\r\n            console.log(\"set failedModalShow true\");\r\n            this.setState({\r\n              failedModalShow: true,\r\n              modalFailedErrMsg: response.data.message,\r\n            });\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n          this.setState({\r\n            failedModalShow: true,\r\n            modalFailedErrMsg: \"Unexpected Error\",\r\n          });\r\n        });\r\n    }\r\n  };\r\n\r\n  apiPostUpdateCategory = () => {\r\n    let modalEditForm = this.state.modalEditForm;\r\n    // console.log(\"inputRecordType \" + inputForm);\r\n\r\n    if (modalEditForm.id === \"\") {\r\n      this.setState({\r\n        failedModalShow: true,\r\n        modalFailedErrMsg: \"Invalid Id\",\r\n      });\r\n    } else if (modalEditForm.name === \"\") {\r\n      this.setState({\r\n        failedModalShow: true,\r\n        modalFailedErrMsg: \"Empty Category\",\r\n      });\r\n    } else {\r\n      let baseUrl = process.env.REACT_APP_BASE_URL;\r\n      let url = baseUrl + process.env.REACT_APP_CATEGORY_POST_UPDATE;\r\n\r\n      axios\r\n        .post(url, {\r\n          id: modalEditForm.id,\r\n          category: modalEditForm.name,\r\n        })\r\n        .then((response) => {\r\n          if (response.data.message === \"success\") {\r\n            console.log(\"set successModalShow true\");\r\n            this.setState({\r\n              successModalShow: true,\r\n            });\r\n            // Refresh list after insert success\r\n            this.apiGetCategoryList();\r\n          } else {\r\n            console.log(\"errMsg: \" + response.data.message);\r\n            console.log(\"set failedModalShow true\");\r\n            this.setState({\r\n              failedModalShow: true,\r\n              modalFailedErrMsg: response.data.message,\r\n            });\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n          this.setState({\r\n            failedModalShow: true,\r\n            modalFailedErrMsg: \"Unexpected Error\",\r\n          });\r\n        });\r\n    }\r\n  };\r\n\r\n  apiPostUpdateSubcategory = () => {\r\n    let modalEditForm = this.state.modalEditForm;\r\n    // console.log(\"inputRecordType \" + inputForm);\r\n\r\n    if (modalEditForm.id === \"\") {\r\n      this.setState({\r\n        failedModalShow: true,\r\n        modalFailedErrMsg: \"Invalid Id\",\r\n      });\r\n    } else if (modalEditForm.name === \"\") {\r\n      this.setState({\r\n        failedModalShow: true,\r\n        modalFailedErrMsg: \"Empty Subcategory\",\r\n      });\r\n    } else {\r\n      let baseUrl = process.env.REACT_APP_BASE_URL;\r\n      let url = baseUrl + process.env.REACT_APP_SUBCATEGORY_POST_UPDATE;\r\n\r\n      axios\r\n        .post(url, {\r\n          id: modalEditForm.id,\r\n          subcategory: modalEditForm.name,\r\n        })\r\n        .then((response) => {\r\n          if (response.data.message === \"success\") {\r\n            console.log(\"set successModalShow true\");\r\n            this.setState({\r\n              successModalShow: true,\r\n            });\r\n            // Refresh list after insert success\r\n            this.apiGetSubcategoryList();\r\n          } else {\r\n            console.log(\"errMsg: \" + response.data.message);\r\n            console.log(\"set failedModalShow true\");\r\n            this.setState({\r\n              failedModalShow: true,\r\n              modalFailedErrMsg: response.data.message,\r\n            });\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n          this.setState({\r\n            failedModalShow: true,\r\n            modalFailedErrMsg: \"Unexpected Error\",\r\n          });\r\n        });\r\n    }\r\n  };\r\n  // API function end\r\n\r\n  // Function\r\n  getCategoryListByRecordType = (recordType) => {\r\n    let categoryList = this.state.categoryList;\r\n\r\n    if (recordType != null) {\r\n      let newCategoryList = [];\r\n\r\n      categoryList.forEach((value, index) => {\r\n        if (value.record_type === recordType) {\r\n          newCategoryList.push(categoryList[index]);\r\n        }\r\n      });\r\n\r\n      return newCategoryList;\r\n    } else {\r\n      return categoryList;\r\n    }\r\n  };\r\n  // Funtion end\r\n\r\n  // Update state value\r\n  btnClear = () => {\r\n    console.log(\"click clear\");\r\n    this.setState({\r\n      inputCategory: \"\",\r\n      inputSubcategory: \"\",\r\n      inputNote: \"\",\r\n    });\r\n  };\r\n\r\n  setSearchForm = (type, value) => {\r\n    console.log(\"setSearchForm\");\r\n    console.log(\"type: \" + type);\r\n    console.log(\"value: \" + value);\r\n\r\n    this.setState(\r\n      {\r\n        searchForm: {\r\n          ...this.state.searchForm,\r\n          [type]: value,\r\n        },\r\n      },\r\n      () => console.log(\"searchForm: \" + JSON.stringify(this.state.searchForm))\r\n    );\r\n  };\r\n\r\n  setModalInsertForm = (type, value) => {\r\n    console.log(\"modalInsertForm\");\r\n    console.log(\"type: \" + type);\r\n    console.log(\"value: \" + value);\r\n\r\n    this.setState(\r\n      {\r\n        modalInsertForm: {\r\n          ...this.state.modalInsertForm,\r\n          [type]: value,\r\n        },\r\n      },\r\n      () =>\r\n        console.log(\r\n          \"modalInsertForm: \" + JSON.stringify(this.state.modalInsertForm)\r\n        )\r\n    );\r\n  };\r\n\r\n  setModalEditForm = (type, value) => {\r\n    console.log(\"setModalEditForm\");\r\n    console.log(\"type: \" + type);\r\n    console.log(\"value: \" + value);\r\n\r\n    this.setState(\r\n      {\r\n        modalEditForm: {\r\n          ...this.state.modalEditForm,\r\n          [type]: value,\r\n        },\r\n      },\r\n      () =>\r\n        console.log(\r\n          \"modalEditForm: \" + JSON.stringify(this.state.modalEditForm)\r\n        )\r\n    );\r\n  };\r\n\r\n  // Update state value end\r\n}\r\n\r\nexport default Category;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n// import { useAsync } from \"react-async\";\r\n\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\n// font-awesome\r\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n// import { faClone } from \"@fortawesome/free-regular-svg-icons\";\r\n\r\nimport * as Global from \"../../global/GlobalUtil\";\r\n\r\nimport {\r\n  apiGetUserList,\r\n  apiGetCategoryList,\r\n  apiGetSubcategoryList,\r\n} from \"../../global/GlobalAPI\";\r\n\r\nimport {\r\n  SuccessModal,\r\n  FailedModal,\r\n  ConfirmModal,\r\n} from \"../../layouts/modal/Modal\";\r\nimport { SwitchRecType } from \"../../layouts/switch/Switch\";\r\n\r\nclass RecordAdd extends Component {\r\n  state = {\r\n    categoryList: [],\r\n    subcategoryList: [],\r\n    userList: [],\r\n\r\n    // default value\r\n    userShareBillList: [\r\n      { id: 1, name: \"\", shareBill: 0, amount: 0, adjust: 0, total: 0 },\r\n    ],\r\n\r\n    inputDate: \"\",\r\n    inputAmount: \"\",\r\n    inputAdjustAmount: \"\",\r\n    inputCategory: \"\",\r\n    inputSubcategory: \"\",\r\n    inputRemark: \"\",\r\n    inputPersonNum: 1,\r\n    inputShareBill: \"0\",\r\n\r\n    successModalShow: false,\r\n    failedModalShow: false,\r\n    confirmModalShow: false,\r\n\r\n    recordType: \"expenses\",\r\n    grandTotal: 0,\r\n\r\n    amountTotalShare: 0,\r\n    amountPerPerson: 0,\r\n    totalSummary: 0,\r\n  };\r\n\r\n  css = {\r\n    containerStyle1: \"border-2-gray rounded p-3\",\r\n    divStyle1: \"py-2 px-3\",\r\n    inputStyle1: \"width-100p\",\r\n    btnSubmit: \"width-100p rounded-pill btn-green border-none py-1\",\r\n    btnReset: \"width-100p rounded-pill btn-blue py-1\",\r\n    btnClear: \"width-100p rounded-pill btn-yellow border-none py-1\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setCategoryList(this.state.recordType);\r\n    this.setUserList();\r\n  }\r\n\r\n  render() {\r\n    if (this.state.inputDate === \"\") {\r\n      var date = new Date();\r\n      var month =\r\n        (date.getMonth() + 1).toString().length === 1\r\n          ? \"0\" + (date.getMonth() + 1)\r\n          : date.getMonth() + 1;\r\n      var day =\r\n        date.getDate().toString().length === 1\r\n          ? \"0\" + date.getDate()\r\n          : date.getDate();\r\n\r\n      var todayDate = date.getFullYear() + \"-\" + month + \"-\" + day;\r\n      console.log(\"todayDate:\" + todayDate);\r\n      this.setState({ inputDate: todayDate });\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <br />\r\n        <SuccessModal\r\n          show={this.state.successModalShow}\r\n          onHide={() => this.setState({ successModalShow: false })}\r\n        />\r\n\r\n        <FailedModal\r\n          show={this.state.failedModalShow}\r\n          errMsg={this.state.modalFailedErrMsg}\r\n          onHide={() => this.setState({ failedModalShow: false })}\r\n        />\r\n\r\n        <ConfirmModal\r\n          show={this.state.confirmModalShow}\r\n          date={this.state.inputDate}\r\n          category={this.state.inputCategory}\r\n          subcategory={this.state.inputSubcategory}\r\n          remark={this.state.inputRemark}\r\n          data={this.state.userShareBillList}\r\n          actionSubmit={this.apiPostAddRecord2}\r\n          onHide={() => this.setState({ confirmModalShow: false })}\r\n        />\r\n\r\n        <SwitchRecType\r\n          type={this.state.recordType}\r\n          switchRecType={this.switchRecordType}\r\n        />\r\n\r\n        <br />\r\n\r\n        <Container className={this.css.containerStyle1}>\r\n          <Row>\r\n            <Col className=\"\">\r\n              {this.state.recordType === \"revenue\" ? (\r\n                <h4>Revenue</h4>\r\n              ) : (\r\n                <h4>Expenses</h4>\r\n              )}\r\n\r\n              <hr />\r\n            </Col>\r\n          </Row>\r\n          <Form>\r\n            <Form.Row>\r\n              <Form.Group as={Col}>\r\n                <Form.Label>Date</Form.Label>\r\n                <Form.Control\r\n                  type=\"date\"\r\n                  value={this.state.inputDate}\r\n                  onChange={this.setInputDate}\r\n                ></Form.Control>\r\n              </Form.Group>\r\n              <Form.Group as={Col}>\r\n                <Form.Label>Date</Form.Label>\r\n                <Form.Control\r\n                  type=\"date\"\r\n                  value={this.state.inputDate}\r\n                  //onChange={this.setInputDate}\r\n                ></Form.Control>\r\n              </Form.Group>\r\n            </Form.Row>\r\n            <Form.Row>\r\n              <Form.Group as={Col}>\r\n                <Form.Label>Category</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  list=\"category\"\r\n                  placeholder=\"Category\"\r\n                  onBlur={this.setSubcategoryList}\r\n                ></Form.Control>\r\n              </Form.Group>\r\n              <Form.Group as={Col}>\r\n                <Form.Label>Subcategory</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  list=\"subcategory\"\r\n                  placeholder=\"Subcategory\"\r\n                  onBlur={this.setInputSubcategory}\r\n                ></Form.Control>\r\n              </Form.Group>\r\n              <Form.Group as={Col}>\r\n                <Form.Label>Remark</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder=\"Remark\"\r\n                  id=\"remark\"\r\n                  name=\"remark\"\r\n                  onBlur={this.setInputRemark}\r\n                ></Form.Control>\r\n              </Form.Group>\r\n            </Form.Row>\r\n            <Form.Row>\r\n              <Form.Group as={Col}>\r\n                <Form.Label>Person</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  onChange={(event) =>\r\n                    this.calculateShareBill(event, \"personNum\")\r\n                  }\r\n                ></Form.Control>\r\n              </Form.Group>\r\n              <Form.Group as={Col}>\r\n                <Form.Label>Amount</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  defaultValue={this.state.inputShareBill}\r\n                  onChange={(event) =>\r\n                    this.calculateShareBill(event, \"shareBill\")\r\n                  }\r\n                ></Form.Control>\r\n              </Form.Group>\r\n              <Form.Group as={Col}>\r\n                <Form.Label>Total Share Amount</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  readOnly\r\n                  value={Global.amountDisplayConverter(\r\n                    this.state.amountTotalShare\r\n                  )}\r\n                ></Form.Control>\r\n              </Form.Group>\r\n              <Form.Group as={Col}>\r\n                <Form.Label>Amount/Person</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  readOnly\r\n                  value={Global.amountDisplayConverter(\r\n                    this.state.amountPerPerson\r\n                  )}\r\n                ></Form.Control>\r\n              </Form.Group>\r\n            </Form.Row>\r\n            <br />\r\n            <Form.Row className=\"text-center mb-2 \">\r\n              <Col>\r\n                <span>Name</span>\r\n              </Col>\r\n              <Col>\r\n                <span>Amount/Person</span>\r\n              </Col>\r\n              <Col>\r\n                <span>Amount</span>\r\n              </Col>\r\n              <Col>\r\n                <span>Adjust</span>\r\n              </Col>\r\n              <Col>\r\n                <span>Total</span>\r\n              </Col>\r\n            </Form.Row>\r\n            {this.layoutUserShareBill()}\r\n            <br />\r\n            <Form.Row className=\"text-center mb-2 \">\r\n              <Col></Col>\r\n              <Col></Col>\r\n              <Col></Col>\r\n              <Col>\r\n                <span>Total Summary</span>\r\n              </Col>\r\n              <Col>\r\n                <span>\r\n                  {Global.amountDisplayConverter(this.state.totalSummary)}\r\n                </span>\r\n              </Col>\r\n            </Form.Row>\r\n            <Form.Row>\r\n              <Col>\r\n                <Button\r\n                  size=\"md\"\r\n                  block\r\n                  onClick={() => this.setState({ confirmModalShow: true })}\r\n                >\r\n                  Submit\r\n                </Button>\r\n              </Col>\r\n            </Form.Row>\r\n          </Form>\r\n        </Container>\r\n\r\n        <br />\r\n        <Container className={this.css.containerStyle1}>\r\n          <div className=\"d-flex flex-row height-60vh\">\r\n            <div className=\"d-flex flex-column width-25p scroll\">\r\n              {this.layoutUserList()}\r\n            </div>\r\n\r\n            <div className=\"d-flex flex-column width-75p pl-3 \">\r\n              {/* {this.state.switchRecType == \"revenue\" ? \r\n                this.layoutRevenueForm() : \r\n                this.layoutExpensesForm()} */}\r\n              <Row>\r\n                <Col>\r\n                  {this.state.recordType === \"revenue\" ? (\r\n                    <h4>Revenue</h4>\r\n                  ) : (\r\n                    <h4>Expenses</h4>\r\n                  )}\r\n\r\n                  <hr />\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col className={this.css.divStyle1}>\r\n                  <input\r\n                    type=\"date\"\r\n                    value={this.state.inputDate}\r\n                    className={this.css.inputStyle1}\r\n                    onChange={this.setInputDate}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col className={this.css.divStyle1}>\r\n                  <input\r\n                    type=\"number\"\r\n                    placeholder=\"Amount\"\r\n                    value={this.state.inputAmount}\r\n                    className={this.css.inputStyle1}\r\n                    onChange={this.setInputAmount}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col className={this.css.divStyle1}>\r\n                  <input\r\n                    type=\"number\"\r\n                    placeholder=\"Adjust Amount\"\r\n                    value={this.state.inputAdjustAmount}\r\n                    className={this.css.inputStyle1}\r\n                    onChange={this.setInputAdjustAmount}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col className={this.css.divStyle1}>\r\n                  <input\r\n                    type=\"text\"\r\n                    list=\"category\"\r\n                    placeholder=\"Category\"\r\n                    className={this.css.inputStyle1}\r\n                    onBlur={this.setSubcategoryList}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col className={this.css.divStyle1}>\r\n                  <input\r\n                    type=\"text\"\r\n                    list=\"subcategory\"\r\n                    placeholder=\"Subcategory\"\r\n                    // value={this.state.expSubType}\r\n                    className={this.css.inputStyle1}\r\n                    onBlur={this.setInputSubcategory}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col className={this.css.divStyle1}>\r\n                  <input\r\n                    type=\"text\"\r\n                    placeholder=\"Remark\"\r\n                    id=\"remark\"\r\n                    name=\"remark\"\r\n                    className={this.css.inputStyle1}\r\n                    onBlur={this.setInputRemark}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row className=\"pt-2\">\r\n                <Col>\r\n                  <input\r\n                    type=\"button\"\r\n                    value=\"Submit\"\r\n                    className={this.css.btnSubmit}\r\n                    onClick={this.apiPostAddRecord}\r\n                  />\r\n                </Col>\r\n                <Col>\r\n                  <input\r\n                    type=\"button\"\r\n                    value=\"Clear\"\r\n                    className={this.css.btnClear}\r\n                    onClick={this.btnClear}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            </div>\r\n          </div>\r\n        </Container>\r\n        <br />\r\n\r\n        <datalist id=\"category\">{this.layoutCategoryDataList()}</datalist>\r\n\r\n        <datalist id=\"subcategory\">{this.layoutSubcategoryDatalist()}</datalist>\r\n\r\n        <datalist id=\"user\">{this.layoutUserDatalist()}</datalist>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Layout function\r\n  layoutUserList = () => {\r\n    return this.state.userList.map((value, index) => (\r\n      <div>\r\n        <input\r\n          type=\"checkbox\"\r\n          value={value.name}\r\n          checked={value.checked}\r\n          onClick={() => this.updateUserListCheckbox(value.name, value.checked)}\r\n        />\r\n        <label key={index}>{value.name}</label>\r\n        <br />\r\n        <hr />\r\n      </div>\r\n    ));\r\n  };\r\n\r\n  layoutCategoryDataList = () => {\r\n    return this.state.categoryList.map((value, index) => (\r\n      <option key={index} value={value.name}></option>\r\n    ));\r\n  };\r\n\r\n  layoutSubcategoryDatalist = () => {\r\n    return this.state.subcategoryList.map((value, index) => (\r\n      <option key={index} value={value.name}></option>\r\n    ));\r\n  };\r\n\r\n  layoutUserDatalist = () => {\r\n    return this.state.userList.map((value, index) => (\r\n      <option key={index} value={value.name}></option>\r\n    ));\r\n  };\r\n\r\n  layoutUserShareBill = () => {\r\n    return this.state.userShareBillList.map((value, index) => (\r\n      <Form.Row className=\"text-center py-1\">\r\n        <Col>\r\n          <Form.Control\r\n            id={index + \"name\"}\r\n            type=\"text\"\r\n            list=\"user\"\r\n            placeholder=\"Name\"\r\n            onChange={(event) =>\r\n              this.updateUserShareBillList(event, index, \"name\")\r\n            }\r\n          ></Form.Control>\r\n        </Col>\r\n        <Col>\r\n          <Form.Control\r\n            id={index + \"shareBill\"}\r\n            placeholder=\"Share Bill\"\r\n            value={Global.amountDisplayConverter(value.shareBill)}\r\n            readOnly\r\n          />\r\n        </Col>\r\n        <Col>\r\n          <Form.Control\r\n            id={index + \"amount\"}\r\n            placeholder=\"Amount\"\r\n            onChange={(event) =>\r\n              this.updateUserShareBillList(event, index, \"amount\")\r\n            }\r\n          />\r\n        </Col>\r\n        <Col>\r\n          <Form.Control\r\n            id={index + \"adjust\"}\r\n            placeholder=\"Adjust\"\r\n            onChange={(event) =>\r\n              this.updateUserShareBillList(event, index, \"adjust\")\r\n            }\r\n          />\r\n        </Col>\r\n        <Col>\r\n          {/* <FontAwesomeIcon icon={faClone} size=\"1x\" className=\"mt-2 mx-2\" /> */}\r\n          <Form.Control\r\n            id={index + \"total\"}\r\n            placeholder=\"Total\"\r\n            readOnly\r\n            value={Global.amountDisplayConverter(value.total)}\r\n          />\r\n        </Col>\r\n      </Form.Row>\r\n    ));\r\n  };\r\n  // Layout function end\r\n\r\n  // API function\r\n  setCategoryList = async (type) => {\r\n    console.log(\"type: \" + type);\r\n    await apiGetCategoryList(type).then((response) => {\r\n      if (response.message === \"success\") {\r\n        this.setState({ categoryList: response.data });\r\n      }\r\n    });\r\n  };\r\n\r\n  setSubcategoryList = async (event) => {\r\n    console.log(\"API apiGetSubcategoryList start\");\r\n    console.log(\"eventCategory: \" + event.target.value);\r\n    let eventCategory = event.target.value;\r\n    let type = this.state.recordType;\r\n\r\n    if (eventCategory !== \"\" && this.state.inputCategory !== eventCategory) {\r\n      this.setState({\r\n        inputCategory: eventCategory,\r\n        expSubcat: \"\",\r\n        subcategoryList: [],\r\n      });\r\n\r\n      await apiGetSubcategoryList(type, eventCategory).then((response) => {\r\n        if (response.message === \"success\") {\r\n          this.setState({ subcategoryList: response.data });\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  setUserList = async () => {\r\n    // GET user list\r\n    await apiGetUserList().then((response) => {\r\n      if (response.message === \"success\") {\r\n        let userObject = {};\r\n        // let array = [];\r\n        response.data.forEach((value, index) => {\r\n          userObject = {\r\n            userId: value.user_id,\r\n            name: value.name,\r\n            checked: false,\r\n          };\r\n          console.log(JSON.stringify(userObject));\r\n\r\n          this.setState({ userList: this.state.userList.concat(userObject) });\r\n        });\r\n\r\n        console.log(\"userList: \" + this.state.userList);\r\n      }\r\n    });\r\n  };\r\n\r\n  apiPostAddRecord2 = () => {\r\n    // POST expenses add new record\r\n    let error = false;\r\n    let errMsg = \"\";\r\n\r\n    let userList = [...this.state.userList];\r\n    let userShareBillList = [...this.state.userShareBillList];\r\n    let date = this.state.inputDate;\r\n    let recordType = this.state.recordType;\r\n    let categoryId = 0;\r\n    let subcategoryId = 0;\r\n    let remark = this.state.inputRemark;\r\n\r\n    for (let i = 0; i < userShareBillList.length; i++) {\r\n      // search userId by name\r\n      let name = userShareBillList[i].name;\r\n      const index = userList.findIndex((value) => value.name === name);\r\n      console.log(\"index: \" + index);\r\n\r\n      let userId = index !== -1 ? userList[index].userId : \"\";\r\n\r\n      console.log(\"userId: \" + userId);\r\n\r\n      // insert userId into userShareBillList\r\n      userShareBillList[i] = {\r\n        ...userShareBillList[i],\r\n        userId: userId,\r\n      };\r\n    }\r\n\r\n    // Get categoryId\r\n    for (let value of this.state.categoryList) {\r\n      console.log(value.category_id);\r\n      if (value.name === this.state.inputCategory) {\r\n        categoryId = value.category_id;\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Get subcategoryId\r\n    for (let value of this.state.subcategoryList) {\r\n      console.log(value.subcategory_id);\r\n      if (value.name === this.state.inputSubcategory) {\r\n        subcategoryId = value.subcategory_id;\r\n        break;\r\n      }\r\n    }\r\n\r\n    //console.log(JSON.stringify(this.state.categoryList));\r\n    console.log(\"date: \" + date);\r\n    console.log(\"recordType: \" + recordType);\r\n    console.log(\"categoryId: \" + categoryId);\r\n    console.log(\"subcategoryId: \" + subcategoryId);\r\n    console.log(\"remark: \" + remark);\r\n    console.log(\"userShareBillList: \" + JSON.stringify(userShareBillList));\r\n\r\n    if (error) {\r\n      this.setState({ failedModalShow: true, modalFailedErrMsg: errMsg });\r\n    } else {\r\n      axios\r\n        .post(process.env.REACT_APP_API_POST_CREATE_RECORD_2, {\r\n          date: date,\r\n          userInfo: userShareBillList,\r\n          type: recordType,\r\n          categoryId: categoryId,\r\n          subcategoryId: subcategoryId,\r\n          remark: remark,\r\n        })\r\n        .then((response) => {\r\n          if (response.data.message === \"success\") {\r\n            console.log(\"set successModalShow true\");\r\n            this.setState({ successModalShow: true });\r\n          } else {\r\n            console.log(\"errMsg: \" + response.data.message);\r\n            console.log(\"set failedModalShow true\");\r\n            this.setState({\r\n              failedModalShow: true,\r\n              modalFailedErrMsg: response.data.message,\r\n            });\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n          console.log(error.data.message);\r\n          this.setState({ failedModalShow: true });\r\n        });\r\n    }\r\n  };\r\n\r\n  apiPostAddRecord = () => {\r\n    // POST expenses add new record\r\n    let error = false;\r\n    let errMsg = \"\";\r\n\r\n    let userId = [];\r\n    let userIdObject = {};\r\n    let date = this.state.inputDate;\r\n    let recordType = this.state.recordType;\r\n    let baseAmount = this.state.inputAmount;\r\n    let adjustAmount = this.state.inputAdjustAmount;\r\n    let categoryId = 0;\r\n    let subcategoryId = 0;\r\n    let remark = this.state.inputRemark;\r\n\r\n    this.state.userList.forEach((value, index) => {\r\n      if (value.checked) {\r\n        console.log(\"checked: \" + value.checked);\r\n        userIdObject = { userId: value.userId };\r\n        userId = userId.concat(userIdObject);\r\n      }\r\n    });\r\n\r\n    // Get categoryId\r\n    for (let value of this.state.categoryList) {\r\n      console.log(value.category_id);\r\n      if (value.name === this.state.inputCategory) {\r\n        categoryId = value.category_id;\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Get subcategoryId\r\n    for (let value of this.state.subcategoryList) {\r\n      console.log(value.subcategory_id);\r\n      if (value.name === this.state.inputSubcategory) {\r\n        subcategoryId = value.subcategory_id;\r\n        break;\r\n      }\r\n    }\r\n\r\n    console.log(JSON.stringify(this.state.categoryList));\r\n    console.log(\"subcategory: \" + JSON.stringify(this.state.subcategoryList));\r\n\r\n    console.log(\"userId: \" + JSON.stringify(userId));\r\n    console.log(\"date: \" + date);\r\n    console.log(\"recordType: \" + recordType);\r\n    console.log(\"baseAmount: \" + baseAmount);\r\n    console.log(\"adjustAmount: \" + adjustAmount);\r\n    console.log(\"categoryId: \" + categoryId);\r\n    console.log(\"subcategoryId: \" + subcategoryId);\r\n    console.log(\"remark: \" + remark);\r\n\r\n    if (userId.length === 0) {\r\n      error = true;\r\n      errMsg = \"Empty user\";\r\n    }\r\n\r\n    if (error) {\r\n      this.setState({ failedModalShow: true, modalFailedErrMsg: errMsg });\r\n    } else {\r\n      axios\r\n        .post(process.env.REACT_APP_API_POST_CREATE_RECORD, {\r\n          date: date,\r\n          userId: userId,\r\n          type: recordType,\r\n          baseAmount: baseAmount,\r\n          adjustAmount: adjustAmount,\r\n          categoryId: categoryId,\r\n          subcategoryId: subcategoryId,\r\n          remark: remark,\r\n        })\r\n        .then((response) => {\r\n          if (response.data.message === \"success\") {\r\n            console.log(\"set successModalShow true\");\r\n            this.setState({ successModalShow: true });\r\n          } else {\r\n            console.log(\"set failedModalShow true\");\r\n            this.setState({ failedModalShow: true });\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n          console.log(error.data);\r\n          this.setState({ failedModalShow: true });\r\n        });\r\n    }\r\n  };\r\n  // API function end\r\n\r\n  // Update state value\r\n  btnClear = () => {\r\n    console.log(\"click clear\");\r\n    this.setState({\r\n      inputCategory: \"\",\r\n      inputSubcategory: \"\",\r\n      inputNote: \"\",\r\n    });\r\n  };\r\n\r\n  switchRecordType = (type) => {\r\n    console.log(\"type: \" + type);\r\n    if (this.state.recordType !== type) {\r\n      console.log(\"switch record type\");\r\n      this.setState({ recordType: type });\r\n      this.setCategoryList(type);\r\n    }\r\n  };\r\n\r\n  updateUserListCheckbox = (name, checked) => {\r\n    // Copy state\r\n    let userList = [...this.state.userList];\r\n\r\n    // Find index\r\n    const index = userList.findIndex((value) => value.name === name);\r\n\r\n    // Update value\r\n    // {copy array object, key: new_value}\r\n    userList[index] = { ...userList[index], checked: !checked };\r\n\r\n    // Should use JSON.stringify() to print array object value in console.log\r\n    console.log(\"eventUserName: \" + JSON.stringify(userList));\r\n    console.log(\"eventchecked: \" + checked);\r\n\r\n    this.setState({ userList: userList });\r\n  };\r\n\r\n  setInputDate = (event) => {\r\n    console.log(\"eventDate: \" + event.target.value);\r\n    this.setState({ inputDate: event.target.value });\r\n  };\r\n\r\n  setInputAmount = (event) => {\r\n    console.log(\"eventAmount: \" + event.target.value);\r\n    this.setState({ inputAmount: event.target.value });\r\n  };\r\n\r\n  setInputAdjustAmount = (event) => {\r\n    console.log(\"eventAdjustAmount: \" + event.target.value);\r\n    this.setState({ inputAdjustAmount: event.target.value });\r\n  };\r\n\r\n  setInputSubcategory = (event) => {\r\n    console.log(\"eventSubcategory: \" + event.target.value);\r\n    this.setState({ inputSubcategory: event.target.value });\r\n  };\r\n\r\n  setInputRemark = (event) => {\r\n    console.log(\"eventRemark: \" + event.target.value);\r\n    this.setState({ inputRemark: event.target.value });\r\n  };\r\n\r\n  // setUserShareBillList = (event) => {\r\n  //   console.log(\"setUserShareBillList: \" + event.target.value);\r\n\r\n  //   let num = event.target.value;\r\n  //   let array = [];\r\n\r\n  //   let object = {\r\n  //     name: \"\",\r\n  //     shareBill: 0,\r\n  //     selfBill: 0,\r\n  //     total: 0,\r\n  //   };\r\n\r\n  //   for (var i = 0; i < parseInt(num); i++) {\r\n  //     console.log(\"while: \" + i);\r\n  //     array.push(object);\r\n  //   }\r\n\r\n  //   console.log(JSON.stringify(array));\r\n\r\n  //   this.setState({ userShareBillList: array });\r\n  // };\r\n\r\n  calculateShareBill = (event, type) => {\r\n    let value = event.target.value;\r\n    let shareBill = type === \"shareBill\" ? value : this.state.inputShareBill;\r\n    let personNum = type === \"personNum\" ? value : this.state.inputPersonNum;\r\n\r\n    let userShareBillList = [...this.state.userShareBillList];\r\n    let shareBillArray = shareBill.trim().split(\" \");\r\n    let billPerPerson = 0;\r\n    let totalShareBill = 0;\r\n    let totalSummary = 0;\r\n\r\n    console.log(\"calculateGrandTotal: \" + shareBillArray);\r\n\r\n    for (let value of shareBillArray) {\r\n      totalShareBill = parseFloat(totalShareBill) + parseFloat(value);\r\n    }\r\n\r\n    billPerPerson = parseFloat(totalShareBill) / parseInt(personNum);\r\n    billPerPerson = Global.amountToFixed2(billPerPerson);\r\n\r\n    console.log(\"billPerPerson: \" + billPerPerson);\r\n\r\n    // Redo the userShareBillList\r\n    if (userShareBillList.length !== personNum) {\r\n      let object = {\r\n        id: 0,\r\n        name: \"\",\r\n        shareBill: 0,\r\n        amount: 0,\r\n        adjust: 0,\r\n        total: 0,\r\n      };\r\n\r\n      while (userShareBillList.length > personNum) {\r\n        // remove userShareBillList object\r\n        userShareBillList.splice(-1, 1);\r\n      }\r\n\r\n      while (userShareBillList.length < personNum) {\r\n        // add userShareBillList object\r\n        userShareBillList.push(object);\r\n      }\r\n    }\r\n\r\n    for (var i = 0; i < parseInt(personNum); i++) {\r\n      console.log(\"while: \" + i);\r\n    }\r\n\r\n    // Replace shareBill to new billPerPerson\r\n    for (let i = 0; i < userShareBillList.length; i++) {\r\n      let amount = userShareBillList[i].amount;\r\n      let adjust = userShareBillList[i].adjust;\r\n\r\n      userShareBillList[i] = {\r\n        ...userShareBillList[i],\r\n        id: i,\r\n        shareBill: billPerPerson,\r\n        total: Global.amountToFixed2(billPerPerson + amount + adjust),\r\n      };\r\n\r\n      totalSummary += parseFloat(userShareBillList[i].total);\r\n    }\r\n\r\n    console.log(JSON.stringify(userShareBillList));\r\n\r\n    this.setState({\r\n      billPerPerson: billPerPerson,\r\n      inputShareBill: shareBill,\r\n      inputPersonNum: personNum,\r\n      totalShareBill: totalShareBill,\r\n      userShareBillList: userShareBillList,\r\n      totalSummary: totalSummary,\r\n    });\r\n    console.log(\"totalShareBill: \" + totalShareBill);\r\n  };\r\n\r\n  updateUserShareBillList = (event, index, type) => {\r\n    let value = event.target.value;\r\n\r\n    let userShareBillList = [...this.state.userShareBillList];\r\n    let totalSummary = 0;\r\n\r\n    switch (type) {\r\n      case \"name\":\r\n        userShareBillList[index] = { ...userShareBillList[index], name: value };\r\n        break;\r\n\r\n      case \"amount\":\r\n        let amountArray = value.trim().split(\" \");\r\n        let amount = 0;\r\n\r\n        for (let value of amountArray) {\r\n          amount += parseFloat(value);\r\n        }\r\n\r\n        userShareBillList[index] = {\r\n          ...userShareBillList[index],\r\n          amount: amount,\r\n        };\r\n        break;\r\n\r\n      case \"adjust\":\r\n        let adjustArray = value.trim().split(\" \");\r\n        let adjust = 0;\r\n\r\n        for (let value of adjustArray) {\r\n          adjust += parseFloat(value);\r\n        }\r\n\r\n        userShareBillList[index] = {\r\n          ...userShareBillList[index],\r\n          adjust: adjust,\r\n        };\r\n        break;\r\n      default:\r\n    }\r\n\r\n    if (type === \"amount\" || type === \"adjust\") {\r\n      let shareBill = userShareBillList[index].shareBill;\r\n      let amount = userShareBillList[index].amount;\r\n      let adjust = userShareBillList[index].adjust;\r\n\r\n      userShareBillList[index] = {\r\n        ...userShareBillList[index],\r\n        total: Global.amountToFixed2(\r\n          parseFloat(shareBill) + parseFloat(amount) + parseFloat(adjust)\r\n        ),\r\n      };\r\n\r\n      userShareBillList.forEach((value, index) => {\r\n        console.log(\"totalSummary: \" + value.total);\r\n        totalSummary += parseFloat(value.total);\r\n      });\r\n    } else {\r\n      totalSummary = this.state.totalSummary;\r\n    }\r\n\r\n    // console.log(\"aaa: \" + \"event\");\r\n    // console.log(\"type: \" + type);\r\n    this.setState({\r\n      userShareBillList: userShareBillList,\r\n      totalSummary: totalSummary,\r\n    });\r\n\r\n    console.log(JSON.stringify(userShareBillList));\r\n  };\r\n  // Update state value end\r\n}\r\n\r\nexport default RecordAdd;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n// import { useAsync } from \"react-async\";\r\nimport Constant from \"../../global/Constant.json\";\r\n\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\n// font-awesome\r\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n// import { faClone } from \"@fortawesome/free-regular-svg-icons\";\r\n\r\nimport * as Global from \"../../global/GlobalUtil\";\r\n\r\nimport {\r\n  apiGetUserList,\r\n  apiGetCategoryList,\r\n  apiGetSubcategoryList,\r\n  apiGetRecordTypeList,\r\n  apiGetRemarkList,\r\n} from \"../../global/GlobalAPI\";\r\n\r\nimport {\r\n  SuccessModal,\r\n  FailedModal,\r\n  ConfirmModal,\r\n} from \"../../layouts/modal/Modal\";\r\n\r\nclass RecordAdd extends Component {\r\n  state = {\r\n    categoryList: [],\r\n    subcategoryList: [],\r\n    userList: [],\r\n    recordTypeList: [],\r\n    remarkList: [],\r\n\r\n    // default value\r\n    mainInsertForm: {\r\n      date: Global.getTodayDate(),\r\n      recordType: \"\",\r\n      category: \"\",\r\n      subcategory: \"\",\r\n      remark: \"\",\r\n    },\r\n\r\n    recordDataList: [\r\n      {\r\n        date: Global.getTodayDate(),\r\n        name: \"\",\r\n        amount: 0,\r\n        adjust: 0,\r\n        recordType: \"\",\r\n        category: \"\",\r\n        subcategory: \"\",\r\n        remark: \"\",\r\n      },\r\n    ],\r\n\r\n    datalistFilterForm: {\r\n      recordType: \"\",\r\n      category: \"\",\r\n      subcategory: \"\",\r\n    },\r\n\r\n    inputDate: \"\",\r\n\r\n    successModalShow: false,\r\n    failedModalShow: false,\r\n    confirmModalShow: false,\r\n\r\n    type: \"expenses\",\r\n    grandTotal: 0,\r\n\r\n    amountTotalShare: 0,\r\n    amountPerPerson: 0,\r\n    totalSummary: 0,\r\n  };\r\n\r\n  css = {\r\n    containerStyle1: \"border-2-gray rounded p-3\",\r\n    divStyle1: \"py-2 px-3\",\r\n    inputStyle1: \"width-100p\",\r\n    btnSubmit: \"width-100p rounded-pill btn-green border-none py-1\",\r\n    btnReset: \"width-100p rounded-pill btn-blue py-1\",\r\n    btnClear: \"width-100p rounded-pill btn-yellow border-none py-1\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.apiGetUserList();\r\n    this.apiGetRecordTypeList();\r\n    this.apiGetCategoryList();\r\n    this.apiGetSubcategoryList();\r\n    this.apiGetRemarkList();\r\n  }\r\n\r\n  render() {\r\n    if (this.state.inputDate === \"\") {\r\n      var date = new Date();\r\n      var month =\r\n        (date.getMonth() + 1).toString().length === 1\r\n          ? \"0\" + (date.getMonth() + 1)\r\n          : date.getMonth() + 1;\r\n      var day =\r\n        date.getDate().toString().length === 1\r\n          ? \"0\" + date.getDate()\r\n          : date.getDate();\r\n\r\n      var todayDate = date.getFullYear() + \"-\" + month + \"-\" + day;\r\n      console.log(\"todayDate:\" + todayDate);\r\n      this.setState({ inputDate: todayDate });\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <br />\r\n        <SuccessModal\r\n          show={this.state.successModalShow}\r\n          onHide={() => this.setState({ successModalShow: false })}\r\n        />\r\n\r\n        <FailedModal\r\n          show={this.state.failedModalShow}\r\n          errMsg={this.state.modalFailedErrMsg}\r\n          onHide={() => this.setState({ failedModalShow: false })}\r\n        />\r\n\r\n        <br />\r\n\r\n        <Container fluid>\r\n          <Row>\r\n            <Col lg={1}></Col>\r\n            <Col sm=\"2\" className=\"pr-1\">\r\n              <Form.Group controlId=\"\">\r\n                <Form.Control\r\n                  size=\"sm\"\r\n                  type=\"date\"\r\n                  defaultValue={this.state.mainInsertForm.date}\r\n                  onChange={(event) =>\r\n                    this.setMainInsertForm(Constant.date, event.target.value)\r\n                  }\r\n                />\r\n              </Form.Group>\r\n            </Col>\r\n            <Col sm=\"2\" className=\"px-1\">\r\n              <Form.Group controlId=\"\">\r\n                <Form.Control\r\n                  size=\"sm\"\r\n                  type=\"text\"\r\n                  list=\"type\"\r\n                  placeholder=\"Type\"\r\n                  onChange={(event) =>\r\n                    this.setMainInsertForm(\r\n                      Constant.recordType,\r\n                      event.target.value\r\n                    )\r\n                  }\r\n                ></Form.Control>\r\n              </Form.Group>\r\n            </Col>\r\n            <Col sm=\"2\" className=\"px-1\">\r\n              <Form.Group controlId=\"\">\r\n                <Form.Control\r\n                  size=\"sm\"\r\n                  type=\"text\"\r\n                  list=\"datalistFilterFormCategory\"\r\n                  placeholder=\"Category\"\r\n                  onChange={(event) =>\r\n                    this.setMainInsertForm(\r\n                      Constant.category,\r\n                      event.target.value\r\n                    )\r\n                  }\r\n                ></Form.Control>\r\n              </Form.Group>\r\n            </Col>\r\n            <Col sm=\"2\" className=\"px-1\">\r\n              <Form.Group controlId=\"\">\r\n                <Form.Control\r\n                  size=\"sm\"\r\n                  type=\"text\"\r\n                  list=\"datalistFilterFormSubcategory\"\r\n                  placeholder=\"Subcategory\"\r\n                  onChange={(event) =>\r\n                    this.setMainInsertForm(\r\n                      Constant.subcategory,\r\n                      event.target.value\r\n                    )\r\n                  }\r\n                ></Form.Control>\r\n              </Form.Group>\r\n            </Col>\r\n            <Col sm=\"2\" className=\"px-1\">\r\n              <Form.Group controlId=\"\">\r\n                <Form.Control\r\n                  size=\"sm\"\r\n                  type=\"text\"\r\n                  list=\"remark\"\r\n                  placeholder=\"Remark\"\r\n                  onChange={(event) =>\r\n                    this.setMainInsertForm(Constant.remark, event.target.value)\r\n                  }\r\n                ></Form.Control>\r\n              </Form.Group>\r\n            </Col>\r\n            <Col lg={1}></Col>\r\n          </Row>\r\n          <Row>\r\n            <Col lg={1}></Col>\r\n            <Col sm=\"2\" className=\"pr-1\">\r\n              <Button\r\n                variant=\"success\"\r\n                size=\"sm\"\r\n                onClick={() => this.addRecordDataListObject()}\r\n              >\r\n                Add New\r\n              </Button>\r\n            </Col>\r\n            <Col sm=\"2\" className=\"px-1\">\r\n              <Button\r\n                variant=\"primary\"\r\n                size=\"sm\"\r\n                onClick={() => this.apiPostBatchAddRecord()}\r\n              >\r\n                Submit\r\n              </Button>\r\n            </Col>\r\n            <Col lg={1}></Col>\r\n          </Row>\r\n        </Container>\r\n        <br />\r\n\r\n        {this.userBillListLayout()}\r\n\r\n        <Container fluid>\r\n          <Row>\r\n            <Col lg={1}></Col>\r\n            <Col>\r\n              <p>Total: {this.getTotalAmountByRecordDataList()}</p>\r\n            </Col>\r\n            <Col lg={1}></Col>\r\n          </Row>\r\n        </Container>\r\n\r\n        <datalist id=\"category\">\r\n          {Global.getLayoutDatalist(this.state.categoryList)}\r\n        </datalist>\r\n\r\n        <datalist id=\"subcategory\">\r\n          {Global.getLayoutDatalist(this.state.subcategoryList)}\r\n        </datalist>\r\n\r\n        <datalist id=\"user\">\r\n          {Global.getLayoutDatalist(this.state.userList)}\r\n        </datalist>\r\n\r\n        <datalist id=\"type\">\r\n          {Global.getLayoutDatalist(this.state.recordTypeList)}\r\n        </datalist>\r\n\r\n        <datalist id=\"remark\">\r\n          {Global.getLayoutDatalist(this.state.remarkList)}\r\n        </datalist>\r\n\r\n        {/* datalistFilterForm */}\r\n        <datalist id=\"datalistFilterFormCategory\">\r\n          {Global.getLayoutDatalist(\r\n            this.getCategoryListByRecordType(\r\n              this.state.datalistFilterForm.recordType\r\n            )\r\n          )}\r\n        </datalist>\r\n\r\n        <datalist id=\"datalistFilterFormSubcategory\">\r\n          {Global.getLayoutDatalist(\r\n            this.getSubcategoryListByRecordType(\r\n              this.state.datalistFilterForm.recordType,\r\n              this.state.datalistFilterForm.category\r\n            )\r\n          )}\r\n        </datalist>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Layout function\r\n  userBillListLayout = () => {\r\n    return this.state.recordDataList.map((value, index) => (\r\n      <Container fluid>\r\n        <Row>\r\n          <Col lg={1}></Col>\r\n          <Col sm=\"2\" className=\"pr-1\">\r\n            <Form.Group controlId=\"\">\r\n              <Form.Control\r\n                size=\"sm\"\r\n                type=\"date\"\r\n                value={value.date}\r\n                onChange={(event) =>\r\n                  this.setRecordDataListForm(\r\n                    Constant.date,\r\n                    event.target.value,\r\n                    index\r\n                  )\r\n                }\r\n              />\r\n            </Form.Group>\r\n          </Col>\r\n          <Col sm=\"2\" className=\"px-1\">\r\n            <Form.Group controlId=\"\">\r\n              <Form.Control\r\n                size=\"sm\"\r\n                type=\"text\"\r\n                list=\"user\"\r\n                placeholder=\"Name\"\r\n                isInvalid={this.validateUserName(value.name)}\r\n                value={value.name}\r\n                onChange={(event) =>\r\n                  this.setRecordDataListForm(\r\n                    Constant.name,\r\n                    event.target.value,\r\n                    index\r\n                  )\r\n                }\r\n              ></Form.Control>\r\n            </Form.Group>\r\n          </Col>\r\n          <Col sm=\"1\" className=\"px-1\">\r\n            <Form.Group controlId=\"\">\r\n              <Form.Control\r\n                size=\"sm\"\r\n                type=\"number\"\r\n                placeholder=\"Amount\"\r\n                value={value.amount}\r\n                onChange={(event) =>\r\n                  this.setRecordDataListForm(\r\n                    Constant.amount,\r\n                    event.target.value,\r\n                    index\r\n                  )\r\n                }\r\n              ></Form.Control>\r\n            </Form.Group>\r\n          </Col>\r\n          <Col sm=\"1\" className=\"px-1\">\r\n            <Form.Group controlId=\"\">\r\n              <Form.Control\r\n                size=\"sm\"\r\n                type=\"number\"\r\n                placeholder=\"Adjust\"\r\n                value={value.adjust}\r\n                onChange={(event) =>\r\n                  this.setRecordDataListForm(\r\n                    Constant.adjust,\r\n                    event.target.value,\r\n                    index\r\n                  )\r\n                }\r\n              ></Form.Control>\r\n            </Form.Group>\r\n          </Col>\r\n          <Col sm=\"2\" className=\"px-1\">\r\n            <Form.Group controlId=\"\">\r\n              <Form.Control\r\n                size=\"sm\"\r\n                type=\"text\"\r\n                list=\"type\"\r\n                placeholder=\"Type\"\r\n                value={value.recordType}\r\n                onChange={(event) =>\r\n                  this.setRecordDataListForm(\r\n                    Constant.recordType,\r\n                    event.target.value,\r\n                    index\r\n                  )\r\n                }\r\n              ></Form.Control>\r\n            </Form.Group>\r\n          </Col>\r\n          <Col sm=\"1\" className=\"px-1\">\r\n            <Button\r\n              variant=\"danger\"\r\n              size=\"sm\"\r\n              onClick={() => this.removeRecordDataListObject(index)}\r\n            >\r\n              Remove\r\n            </Button>\r\n          </Col>\r\n\r\n          <Col lg={1}></Col>\r\n        </Row>\r\n        <Row className=\"pb-2\">\r\n          <Col lg={1}></Col>\r\n          <Col sm=\"2\" className=\"pr-1\">\r\n            <Form.Group controlId=\"\">\r\n              <Form.Control\r\n                size=\"sm\"\r\n                type=\"text\"\r\n                list=\"datalistFilterFormCategory\"\r\n                placeholder=\"Category\"\r\n                isInvalid={this.validateCategory(\r\n                  value.recordType,\r\n                  value.category\r\n                )}\r\n                value={value.category}\r\n                onChange={(event) =>\r\n                  this.setRecordDataListForm(\r\n                    Constant.category,\r\n                    event.target.value,\r\n                    index\r\n                  )\r\n                }\r\n              ></Form.Control>\r\n            </Form.Group>\r\n          </Col>\r\n          <Col sm=\"2\" className=\"px-1\">\r\n            <Form.Group controlId=\"\">\r\n              <Form.Control\r\n                size=\"sm\"\r\n                type=\"text\"\r\n                list=\"datalistFilterFormSubcategory\"\r\n                placeholder=\"Subcategory\"\r\n                isInvalid={this.validateSubcategory(\r\n                  value.recordType,\r\n                  value.category,\r\n                  value.subcategory\r\n                )}\r\n                value={value.subcategory}\r\n                onChange={(event) =>\r\n                  this.setRecordDataListForm(\r\n                    Constant.subcategory,\r\n                    event.target.value,\r\n                    index\r\n                  )\r\n                }\r\n              ></Form.Control>\r\n            </Form.Group>\r\n          </Col>\r\n          <Col sm=\"4\" className=\"px-1\">\r\n            <Form.Group controlId=\"\">\r\n              <Form.Control\r\n                size=\"sm\"\r\n                type=\"text\"\r\n                list=\"remark\"\r\n                placeholder=\"Remark\"\r\n                value={value.remark}\r\n                onChange={(event) =>\r\n                  this.setRecordDataListForm(\r\n                    Constant.remark,\r\n                    event.target.value,\r\n                    index\r\n                  )\r\n                }\r\n              ></Form.Control>\r\n            </Form.Group>\r\n          </Col>\r\n          <Col sm=\"1\" className=\"px-1\">\r\n            <Button\r\n              variant=\"primary\"\r\n              size=\"sm\"\r\n              onClick={() => {\r\n                this.apiPostAddRecord(index);\r\n              }}\r\n            >\r\n              Submit\r\n            </Button>\r\n          </Col>\r\n          <Col lg={1}></Col>\r\n        </Row>\r\n      </Container>\r\n    ));\r\n  };\r\n\r\n  // Layout function end\r\n\r\n  // API function\r\n  apiGetUserList = async () => {\r\n    // console.log(\"type: \" + type);\r\n    await apiGetUserList().then((response) => {\r\n      if (response.message === \"success\") {\r\n        this.setState({ userList: response.data });\r\n      }\r\n    });\r\n  };\r\n\r\n  apiGetRecordTypeList = async () => {\r\n    // GET record type list\r\n    await apiGetRecordTypeList().then((response) => {\r\n      if (response.message === \"success\") {\r\n        console.log(\"recordTypeList: \" + JSON.stringify(response.data));\r\n        this.setState({ recordTypeList: response.data });\r\n      }\r\n    });\r\n  };\r\n\r\n  apiGetCategoryList = async () => {\r\n    // console.log(\"type: \" + type);\r\n    await apiGetCategoryList().then((response) => {\r\n      if (response.message === \"success\") {\r\n        this.setState({ categoryList: response.data });\r\n      }\r\n    });\r\n  };\r\n\r\n  apiGetSubcategoryList = async () => {\r\n    // Used for \"searchForm\"\r\n    // \"modalInsertForm\" didn't using it\r\n    // let recordType = this.state.searchForm.recordType;\r\n    // let category = this.state.searchForm.category;\r\n    let type = \"\";\r\n    let category = \"\";\r\n\r\n    await apiGetSubcategoryList(type, category).then((response) => {\r\n      if (response.message === \"success\") {\r\n        this.setState({ subcategoryList: response.data });\r\n      }\r\n    });\r\n  };\r\n\r\n  apiGetRemarkList = async () => {\r\n    // GET record type list\r\n    await apiGetRemarkList().then((response) => {\r\n      if (response.message === \"success\") {\r\n        console.log(\"remarkList: \" + JSON.stringify(response.data));\r\n        this.setState({ remarkList: response.data });\r\n      }\r\n    });\r\n  };\r\n\r\n  apiPostAddRecord = (index) => {\r\n    // POST expenses add new record\r\n    let error = false;\r\n    let errMsg = \"\";\r\n\r\n    let recordDataList = [...this.state.recordDataList];\r\n    let recordData = [recordDataList[index]];\r\n\r\n    console.log(\"apiPostAddRecord recordData: \" + JSON.stringify(recordData));\r\n\r\n    if (Global.isEmpty(recordData[0].name)) {\r\n      error = true;\r\n      errMsg = \"Empty Name\";\r\n    }\r\n\r\n    if (error) {\r\n      this.setState({ failedModalShow: true, modalFailedErrMsg: errMsg });\r\n    } else {\r\n      axios\r\n        .post(process.env.REACT_APP_API_POST_CREATE_BATCH_RECORD, {\r\n          recordData: recordData,\r\n        })\r\n        .then((response) => {\r\n          console.log(\"response: \" + JSON.stringify(response));\r\n          if (response.data.message === \"success\") {\r\n            console.log(\"set successModalShow true\");\r\n            this.setState({ successModalShow: true });\r\n          } else {\r\n            console.log(\"set failedModalShow true\");\r\n            this.setState({\r\n              failedModalShow: true,\r\n              modalFailedErrMsg: response.data.message,\r\n            });\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n          console.log(error.data);\r\n          this.setState({ failedModalShow: true });\r\n        });\r\n    }\r\n  };\r\n\r\n  apiPostBatchAddRecord = () => {\r\n    // POST expenses add new record\r\n    let error = false;\r\n    let errMsg = \"\";\r\n\r\n    let recordDataList = [...this.state.recordDataList];\r\n\r\n    if (error) {\r\n      this.setState({ failedModalShow: true, modalFailedErrMsg: errMsg });\r\n    } else {\r\n      axios\r\n        .post(process.env.REACT_APP_API_POST_CREATE_BATCH_RECORD, {\r\n          recordData: recordDataList,\r\n        })\r\n        .then((response) => {\r\n          if (response.data.message === \"success\") {\r\n            console.log(\"set successModalShow true\");\r\n            this.setState({ successModalShow: true });\r\n          } else {\r\n            console.log(\"set failedModalShow true\");\r\n            this.setState({ failedModalShow: true });\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n          console.log(error.data);\r\n          this.setState({ failedModalShow: true });\r\n        });\r\n    }\r\n  };\r\n  // API function end\r\n\r\n  // Function\r\n  getCategoryListByRecordType = (recordType) => {\r\n    let categoryList = [];\r\n\r\n    console.log(\"getCategoryListByRecordType\");\r\n    console.log(\"recordType: \" + recordType);\r\n    // console.log(\"categoryList: \" + JSON.stringify(categoryList));\r\n    if (!Global.isEmpty(recordType)) {\r\n      categoryList = this.state.categoryList;\r\n      let newCategoryList = [];\r\n\r\n      categoryList.forEach((value, index) => {\r\n        if (value.record_type === recordType) {\r\n          newCategoryList.push(categoryList[index]);\r\n        }\r\n      });\r\n\r\n      return newCategoryList;\r\n    } else {\r\n      return categoryList;\r\n    }\r\n  };\r\n\r\n  getSubcategoryListByRecordType = (recordType, category) => {\r\n    let subcategoryList = [];\r\n\r\n    console.log(\"getSubcategoryListByRecordType\");\r\n    console.log(\"recordType: \" + recordType);\r\n    console.log(\"category: \" + category);\r\n    console.log(\"subcategoryList: \" + JSON.stringify(subcategoryList));\r\n    if (!Global.isEmpty(recordType)) {\r\n      subcategoryList = this.state.subcategoryList;\r\n      let newSubcategoryList = [];\r\n\r\n      subcategoryList.forEach((value, index) => {\r\n        if (value.record_type === recordType && value.category === category) {\r\n          newSubcategoryList.push(subcategoryList[index]);\r\n        }\r\n      });\r\n\r\n      return newSubcategoryList;\r\n    } else {\r\n      return subcategoryList;\r\n    }\r\n  };\r\n\r\n  validateUserName = (name) => {\r\n    // to validate userName with DB userName value\r\n    let invalid = true;\r\n    if (JSON.stringify(this.state.userList).indexOf(name) > 0) {\r\n      invalid = false;\r\n    } else {\r\n      invalid = true;\r\n    }\r\n\r\n    return invalid;\r\n  };\r\n\r\n  validateCategory = (recordType, category) => {\r\n    // to validate category with DB category value\r\n    let categoryList = this.getCategoryListByRecordType(recordType);\r\n    let invalid = true;\r\n    if (JSON.stringify(categoryList).indexOf(category) > 0) {\r\n      invalid = false;\r\n    } else {\r\n      invalid = true;\r\n    }\r\n\r\n    return invalid;\r\n  };\r\n\r\n  validateSubcategory = (recordType, category, subcategory) => {\r\n    // to validate userName with DB userName value\r\n    let subcategoryList = this.getSubcategoryListByRecordType(\r\n      recordType,\r\n      category\r\n    );\r\n    let invalid = true;\r\n\r\n    for (let value of subcategoryList) {\r\n      // console.log(\"category: \" + value.category);\r\n      // console.log(\"subcategory: \" + value.name);\r\n      if (value.category === category && value.name === subcategory) {\r\n        invalid = false;\r\n        break;\r\n      }\r\n    }\r\n\r\n    return invalid;\r\n  };\r\n\r\n  getTotalAmountByRecordDataList = () => {\r\n    console.log(\"getTotalAmountByRecordDataList\");\r\n    let recordDataList = this.state.recordDataList;\r\n    let totalAmount = 0;\r\n\r\n    recordDataList.forEach((value, index) => {\r\n      totalAmount += parseFloat(value.amount) + parseFloat(value.adjust);\r\n    });\r\n\r\n    return totalAmount;\r\n  };\r\n  // Function end\r\n\r\n  // Update state value\r\n  setMainInsertForm = (type, value) => {\r\n    this.setState(\r\n      {\r\n        mainInsertForm: {\r\n          ...this.state.mainInsertForm,\r\n          [type]: value,\r\n        },\r\n      },\r\n\r\n      () => {\r\n        this.updateRecordDataListForm();\r\n        this.setDatalistFilterForm(type, value); // update datalistFilterForm at the same time\r\n\r\n        console.log(\r\n          \"mainInsertForm: \" + JSON.stringify(this.state.mainInsertForm)\r\n        );\r\n      }\r\n    );\r\n  };\r\n\r\n  addRecordDataListObject = () => {\r\n    let date = this.state.mainInsertForm.date;\r\n    let recordType = this.state.mainInsertForm.recordType;\r\n    let category = this.state.mainInsertForm.category;\r\n    let subcategory = this.state.mainInsertForm.subcategory;\r\n    let remark = this.state.mainInsertForm.remark;\r\n\r\n    let recordDataList = this.state.recordDataList;\r\n\r\n    let object = {\r\n      date: date,\r\n      name: \"\",\r\n      amount: 0,\r\n      adjust: 0,\r\n      recordType: recordType,\r\n      category: category,\r\n      subcategory: subcategory,\r\n      remark: remark,\r\n    };\r\n\r\n    recordDataList = recordDataList.concat(object);\r\n\r\n    this.setState(\r\n      {\r\n        recordDataList: recordDataList,\r\n      },\r\n      () => {\r\n        console.log(\r\n          \"recordDataList: \" + JSON.stringify(this.state.recordDataList)\r\n        );\r\n      }\r\n    );\r\n  };\r\n\r\n  removeRecordDataListObject = (index) => {\r\n    console.log(\"removeRecordDataListObject\");\r\n    console.log(\"index: \" + index);\r\n\r\n    let recordDataList = [...this.state.recordDataList];\r\n\r\n    recordDataList.splice(index, 1);\r\n    this.setState({ recordDataList: recordDataList }, () =>\r\n      console.log(\r\n        \"removeRecordDataListObject: \" + JSON.stringify(recordDataList)\r\n      )\r\n    );\r\n  };\r\n\r\n  updateRecordDataListForm = () => {\r\n    let date = this.state.mainInsertForm.date;\r\n    let recordType = this.state.mainInsertForm.recordType;\r\n    let category = this.state.mainInsertForm.category;\r\n    let subcategory = this.state.mainInsertForm.subcategory;\r\n    let remark = this.state.mainInsertForm.remark;\r\n\r\n    let recordDataList = this.state.recordDataList;\r\n\r\n    recordDataList.forEach((value, index) => {\r\n      value.date = date;\r\n      value.recordType = recordType;\r\n      value.category = category;\r\n      value.subcategory = subcategory;\r\n      value.remark = remark;\r\n    });\r\n\r\n    this.setState(\r\n      { recordDataList: recordDataList },\r\n\r\n      () =>\r\n        console.log(\"updateRecordDataList: \" + JSON.stringify(recordDataList))\r\n    );\r\n  };\r\n\r\n  setRecordDataListForm = (type, value, index) => {\r\n    console.log(\"setRecordDataListForm\");\r\n    console.log(\"index: \" + index);\r\n    console.log(\"type: \" + type);\r\n\r\n    let recordDataList = [...this.state.recordDataList];\r\n    recordDataList[index] = { ...recordDataList[index], [type]: value };\r\n\r\n    this.setState(\r\n      {\r\n        recordDataList: recordDataList,\r\n      },\r\n      () => {\r\n        this.setDatalistFilterForm(type, value); // update datalistFilterForm at the same time\r\n        console.log(\r\n          \"recordDataList: \" + JSON.stringify(this.state.recordDataList)\r\n        );\r\n      }\r\n    );\r\n  };\r\n\r\n  setDatalistFilterForm = (type, value) => {\r\n    // set datalistFilterForm for filter out relative datalist during changing\r\n    // recordType / category / subcategory\r\n    console.log(\"setdatalistFilterForm\");\r\n    console.log(\"type: \" + type);\r\n    console.log(\"value: \" + value);\r\n\r\n    this.setState(\r\n      {\r\n        datalistFilterForm: {\r\n          ...this.state.datalistFilterForm,\r\n          [type]: value,\r\n        },\r\n      },\r\n\r\n      console.log(\r\n        \"datalistFilterForm: \" + JSON.stringify(this.state.datalistFilterForm)\r\n      )\r\n    );\r\n  };\r\n  // Update state value end\r\n}\r\n\r\nexport default RecordAdd;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n// import { useAsync } from \"react-async\";\r\nimport constant from \"../../global/Constant.json\";\r\n\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\n// font-awesome\r\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n// import { faClone } from \"@fortawesome/free-regular-svg-icons\";\r\n\r\nimport * as Global from \"../../global/GlobalUtil\";\r\n\r\nimport {\r\n  apiGetUserList,\r\n  apiGetRecordTypeList,\r\n  apiGetCategoryList,\r\n  apiGetSubcategoryList,\r\n} from \"../../global/GlobalAPI\";\r\n\r\nimport {\r\n  SuccessModal,\r\n  FailedModal,\r\n  ConfirmModal,\r\n} from \"../../layouts/modal/Modal\";\r\n\r\n// import { SwitchRecType } from \"../../layouts/switch/Switch\";\r\n\r\nclass RecordBatchAdd extends Component {\r\n  state = {\r\n    userList: [],\r\n    recordTypeList: [],\r\n    categoryList: [],\r\n    categoryExpenseList: [],\r\n    categoryRevenueList: [],\r\n    subcategoryExpenseList: [],\r\n    subcategoryRevenueList: [],\r\n\r\n    inputData: \"\",\r\n    inputAmount: \"\",\r\n    inputAdjustAmount: \"\",\r\n    inputCategory: \"\",\r\n    inputSubcategory: \"\",\r\n\r\n    successModalShow: false,\r\n    failedModalShow: false,\r\n\r\n    recordType: constant.expense,\r\n    recordDataList: [],\r\n  };\r\n\r\n  css = {\r\n    containerStyle1: \"border-2-gray rounded p-3\",\r\n    divStyle1: \"py-2 px-3\",\r\n    inputStyle1: \"width-100p\",\r\n    btnSubmit: \"width-100p rounded-pill btn-green border-none py-1\",\r\n    btnReset: \"width-100p rounded-pill btn-blue py-1\",\r\n    btnClear: \"width-100p rounded-pill btn-yellow border-none py-1\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setUserList();\r\n    this.apiGetRecordTypeList();\r\n    this.apiGetCategoryList();\r\n    this.setSubcategoryList(constant.expense);\r\n    this.setSubcategoryList(constant.revenue);\r\n  }\r\n\r\n  render() {\r\n    // if (this.state.inputData === \"\") {\r\n    //   var date = new Date();\r\n    //   var month =\r\n    //     (date.getMonth() + 1).toString().length === 1\r\n    //       ? \"0\" + (date.getMonth() + 1)\r\n    //       : date.getMonth() + 1;\r\n    //   var day =\r\n    //     date.getDate().toString().length === 1\r\n    //       ? \"0\" + date.getDate()\r\n    //       : date.getDate();\r\n\r\n    //   var todayDate = date.getFullYear() + \"-\" + month + \"-\" + day;\r\n    //   console.log(\"todayDate:\" + todayDate);\r\n    //   this.setState({ inputDate: todayDate });\r\n    // }\r\n\r\n    // console.log(constant.color);\r\n\r\n    return (\r\n      <div>\r\n        <br />\r\n        <SuccessModal\r\n          show={this.state.successModalShow}\r\n          onHide={() => this.setState({ successModalShow: false })}\r\n        />\r\n\r\n        <FailedModal\r\n          show={this.state.failedModalShow}\r\n          errMsg={this.state.modalFailedErrMsg}\r\n          onHide={() => this.setState({ failedModalShow: false })}\r\n        />\r\n\r\n        {/* <SwitchRecType\r\n          type={this.state.recordType}\r\n          switchRecType={this.switchRecordType}\r\n        /> */}\r\n\r\n        <br />\r\n\r\n        <Container className={this.css.containerStyle1}>\r\n          <Row>\r\n            <Col className=\"\">\r\n              <h4>Record Batch Add Text</h4>\r\n            </Col>\r\n          </Row>\r\n          <Form>\r\n            <Form.Row>\r\n              <Form.Group as={Col} controlId=\"\">\r\n                <Form.Label>\r\n                  Format: date, name, amount, adjust, type, category,\r\n                  subcategory, remark\r\n                  <br />\r\n                  Sample: 2021-05-25, Chong Zheng Rong, 8.9, 0, Expense, Food,\r\n                  Dinner, AFC\r\n                </Form.Label>\r\n                <Form.Control\r\n                  size=\"sm\"\r\n                  as=\"textarea\"\r\n                  rows={10}\r\n                  value={this.state.inputData}\r\n                  onChange={this.setInputData}\r\n                />\r\n              </Form.Group>\r\n              {/* <Form.Group as={Col} controlId=\"\">\r\n                <Form.Control as=\"textarea\" rows={10} />\r\n              </Form.Group> */}\r\n            </Form.Row>\r\n            <Form.Row>\r\n              <Col>\r\n                <Button size=\"md\" block onClick={this.btnClear}>\r\n                  Clear\r\n                </Button>\r\n              </Col>\r\n              <Col>\r\n                <Button size=\"md\" block onClick={this.btnProcess}>\r\n                  Process\r\n                </Button>\r\n              </Col>\r\n            </Form.Row>\r\n          </Form>\r\n        </Container>\r\n\r\n        {/* <p>Data: {this.layoutRecordDataList2()}</p> */}\r\n\r\n        <br />\r\n        <Container\r\n          className={\r\n            this.css.containerStyle1 + \" d-flex flex-column scroll height-70vh\"\r\n          }\r\n        >\r\n          <Row className={\"\"}>\r\n            <Col md={4} lg={2}>\r\n              <span>Date</span>\r\n            </Col>\r\n            <Col md={2} lg={2}>\r\n              <span>Amount</span>\r\n            </Col>\r\n            <Col md={2} lg={2}>\r\n              <span>Adjust</span>\r\n            </Col>\r\n\r\n            <Col md={2} lg={2}>\r\n              <span>Type</span>\r\n            </Col>\r\n\r\n            <Col md={2} lg={2}>\r\n              <span>Action</span>\r\n            </Col>\r\n          </Row>\r\n          <Row className={\"\"}>\r\n            <Col md={4} lg={2}>\r\n              <span>Name</span>\r\n            </Col>\r\n            <Col md={4} lg={4}>\r\n              <span>Category</span>\r\n            </Col>\r\n            <Col md={4} lg={4}>\r\n              <span>Subcategory</span>\r\n            </Col>\r\n          </Row>\r\n          <Row className={\"\"}>\r\n            <Col>\r\n              <span>Remark</span>\r\n            </Col>\r\n          </Row>\r\n          <br />\r\n          {this.layoutRecordDataList()}\r\n        </Container>\r\n\r\n        <br />\r\n        <Container>\r\n          <Row>\r\n            <Button size=\"md\" block onClick={this.apiPostAddRecord}>\r\n              Submit\r\n            </Button>\r\n          </Row>\r\n        </Container>\r\n\r\n        <br />\r\n\r\n        <datalist id=\"recordType\">\r\n          {Global.getLayoutDatalist(this.state.recordTypeList)}\r\n        </datalist>\r\n\r\n        <datalist id=\"categoryExpense\">\r\n          {this.layoutCategoryDataList(constant.expense)}\r\n        </datalist>\r\n\r\n        <datalist id=\"categoryRevenue\">\r\n          {this.layoutCategoryDataList(constant.revenue)}\r\n        </datalist>\r\n\r\n        <datalist id=\"subcategoryExpense\">\r\n          {this.layoutSubcategoryDatalist(constant.expense)}\r\n        </datalist>\r\n\r\n        <datalist id=\"subcategoryRevenue\">\r\n          {this.layoutSubcategoryDatalist(constant.revenue)}\r\n        </datalist>\r\n\r\n        {/* <datalist id=\"subcategory\">{this.layoutSubcategoryDatalist()}</datalist> */}\r\n\r\n        <datalist id=\"user\">\r\n          {Global.getLayoutDatalist(this.state.userList)}\r\n        </datalist>\r\n\r\n        <datalist id=\"type\">\r\n          <option key=\"1\" value={constant.expense}></option>\r\n          <option key=\"2\" value={constant.revenue}></option>\r\n        </datalist>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Layout function\r\n  layoutCategoryDataList = (recordType) => {\r\n    switch (recordType) {\r\n      case constant.expense:\r\n        return this.state.categoryExpenseList.map((value, index) => (\r\n          <option key={index} value={value.name}></option>\r\n        ));\r\n      case constant.revenue:\r\n        return this.state.categoryRevenueList.map((value, index) => (\r\n          <option key={index} value={value.name}></option>\r\n        ));\r\n    }\r\n  };\r\n\r\n  layoutRecordDataList2 = () => {\r\n    return <span>{JSON.stringify(this.state.recordDataList)}</span>;\r\n  };\r\n\r\n  layoutSubcategoryDatalist = (recordType) => {\r\n    let subcategoryList = [];\r\n    let category = this.state.inputCategory;\r\n\r\n    switch (recordType) {\r\n      case constant.expense:\r\n        this.state.subcategoryExpenseList.forEach((value, index) => {\r\n          console.log(\"value.category: \" + value.category);\r\n          console.log(\"category: \" + category);\r\n          if (value.category === category) {\r\n            subcategoryList.push({ name: value.name });\r\n          }\r\n        });\r\n        break;\r\n      case constant.revenue:\r\n        this.state.subcategoryRevenueList.forEach((value, index) => {\r\n          if (value.category === category) {\r\n            subcategoryList.push({ name: value.name });\r\n          }\r\n        });\r\n        break;\r\n    }\r\n\r\n    subcategoryList.forEach((value, index) => {\r\n      console.log(\"value.name: \" + value.name);\r\n    });\r\n\r\n    return subcategoryList.map((value, index) => (\r\n      <option key={index} value={value.name}></option>\r\n    ));\r\n  };\r\n\r\n  layoutRecordDataList = () => {\r\n    return this.state.recordDataList.map((value, index) => (\r\n      <Form>\r\n        <Row className=\"text-center py-1\">\r\n          <Col md={4} lg={4}>\r\n            <Form.Control\r\n              id={index + \"date\"}\r\n              type=\"date\"\r\n              value={value.date}\r\n              placeholder=\"Date\"\r\n            ></Form.Control>\r\n          </Col>\r\n          <Col md={2} lg={2}>\r\n            <Form.Control\r\n              id={index + \"amount\"}\r\n              type=\"text\"\r\n              value={value.amount}\r\n              placeholder=\"Amount\"\r\n            ></Form.Control>\r\n          </Col>\r\n          <Col md={2} lg={2}>\r\n            <Form.Control\r\n              id={index + \"adjust\"}\r\n              type=\"text\"\r\n              value={value.adjust}\r\n              placeholder=\"Adjust\"\r\n            ></Form.Control>\r\n          </Col>\r\n          <Col md={2} lg={2}>\r\n            <Form.Control\r\n              id={index + \"recordType\"}\r\n              list=\"type\"\r\n              value={value.recordType}\r\n              placeholder=\"Type\"\r\n              isInvalid={this.validateType(value.recordType)}\r\n              onChange={(event) =>\r\n                this.updateRecordDataList(\r\n                  index,\r\n                  constant.recordType,\r\n                  event.target.value\r\n                )\r\n              }\r\n            />\r\n          </Col>\r\n          <Col md={2} lg={2}></Col>\r\n        </Row>\r\n        <Row className=\"text-center py-1\">\r\n          <Col md={4} lg={4}>\r\n            <Form.Control\r\n              id={index + \"name\"}\r\n              type=\"text\"\r\n              list=\"user\"\r\n              value={value.name}\r\n              placeholder=\"Name\"\r\n              isInvalid={this.validateUserName(value.name)}\r\n              onChange={(event) =>\r\n                this.updateRecordDataList(\r\n                  index,\r\n                  constant.name,\r\n                  event.target.value\r\n                )\r\n              }\r\n            ></Form.Control>\r\n          </Col>\r\n\r\n          <Col md={4} lg={4}>\r\n            <Form.Control\r\n              id={index + \"category\"}\r\n              type=\"text\"\r\n              list={\r\n                value.recordType === constant.expense\r\n                  ? \"categoryExpense\"\r\n                  : \"categoryRevenue\"\r\n              }\r\n              value={value.category}\r\n              placeholder=\"Category\"\r\n              isInvalid={this.validateCategory(\r\n                value.recordType,\r\n                value.category\r\n              )}\r\n              onChange={(event) =>\r\n                this.updateRecordDataList(\r\n                  index,\r\n                  constant.category,\r\n                  event.target.value\r\n                )\r\n              }\r\n            />\r\n          </Col>\r\n          <Col md={4} lg={4}>\r\n            <Form.Control\r\n              id={index + \"subcategory\"}\r\n              type=\"text\"\r\n              list={\r\n                value.type === constant.expense\r\n                  ? \"subcategoryExpense\"\r\n                  : \"subcategoryRevenue\"\r\n              }\r\n              value={value.subcategory}\r\n              placeholder=\"Subcategory\"\r\n              isInvalid={this.validateSubcategory(\r\n                value.recordType,\r\n                value.category,\r\n                value.subcategory\r\n              )}\r\n              onClick={() => this.setInputCategory(value.category)}\r\n              onChange={(event) =>\r\n                this.updateRecordDataList(\r\n                  index,\r\n                  constant.subcategory,\r\n                  event.target.value\r\n                )\r\n              }\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row className=\"text-center py-1\">\r\n          <Col>\r\n            <Form.Control\r\n              id={index + \"remark\"}\r\n              value={value.remark}\r\n              placeholder=\"Remark\"\r\n              onChange={(event) =>\r\n                this.updateRecordDataList(\r\n                  index,\r\n                  constant.remark,\r\n                  event.target.value\r\n                )\r\n              }\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <hr />\r\n      </Form>\r\n    ));\r\n  };\r\n  // Layout function end\r\n\r\n  // API function\r\n  setUserList = async () => {\r\n    // GET user list\r\n    await apiGetUserList().then((response) => {\r\n      if (response.message == \"success\") {\r\n        let userObject = {};\r\n        response.data.forEach((value, index) => {\r\n          userObject = {\r\n            userId: value.user_id,\r\n            name: value.name,\r\n          };\r\n          console.log(JSON.stringify(userObject));\r\n\r\n          this.setState({ userList: this.state.userList.concat(userObject) });\r\n        });\r\n\r\n        console.log(\"userList: \" + this.state.userList);\r\n      }\r\n    });\r\n  };\r\n\r\n  apiGetRecordTypeList = async () => {\r\n    // GET user list\r\n    await apiGetRecordTypeList().then((response) => {\r\n      if (response.message === \"success\") {\r\n        console.log(\"recordTypeList: \" + JSON.stringify(response.data));\r\n        this.setState({ recordTypeList: response.data });\r\n      }\r\n    });\r\n  };\r\n\r\n  apiGetCategoryList = async () => {\r\n    await apiGetCategoryList().then((response) => {\r\n      if (response.message === \"success\") {\r\n        this.setState({ categoryList: response.data }, () =>\r\n          console.log(\r\n            \"Category List: \" + JSON.stringify(this.state.categoryList)\r\n          )\r\n        );\r\n      }\r\n    });\r\n  };\r\n\r\n  setSubcategoryList = async () => {\r\n    console.log(\"API apiGetSubcategoryList start\");\r\n    await apiGetSubcategoryList().then((response) => {\r\n      if (response.message === \"success\") {\r\n        this.setState({ subcategoryList: response.data }, () =>\r\n          console.log(\r\n            \"Subcategory List: \" + JSON.stringify(this.state.subcategoryList)\r\n          )\r\n        );\r\n      }\r\n    });\r\n  };\r\n\r\n  apiPostAddRecord = () => {\r\n    // POST expenses add new record\r\n    let error = false;\r\n    let errMsg = \"\";\r\n\r\n    let recordDataList = this.state.recordDataList;\r\n\r\n    if (error) {\r\n      this.setState({ failedModalShow: true, modalFailedErrMsg: errMsg });\r\n    } else {\r\n      axios\r\n        .post(process.env.REACT_APP_API_POST_CREATE_BATCH_RECORD, {\r\n          recordData: recordDataList,\r\n        })\r\n        .then((response) => {\r\n          if (response.data.message === \"success\") {\r\n            console.log(\"set successModalShow true\");\r\n            this.setState({ successModalShow: true });\r\n          } else {\r\n            console.log(\"set failedModalShow true\");\r\n            this.setState({ failedModalShow: true });\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n          console.log(error.data);\r\n          this.setState({ failedModalShow: true });\r\n        });\r\n    }\r\n  };\r\n  // API function end\r\n\r\n  // Update state value\r\n  btnClear = () => {\r\n    console.log(\"click clear\");\r\n    this.setState({\r\n      inputData: \"\",\r\n    });\r\n  };\r\n\r\n  btnProcess = () => {\r\n    var data = this.state.inputData.split(\"\\n\");\r\n    var dataArray;\r\n    var recordObject = {};\r\n    var newRecordObject = [];\r\n\r\n    console.log(\"length: \" + data.length);\r\n    for (var i = 0; i < data.length; i++) {\r\n      dataArray = data[i].split(\",\");\r\n\r\n      if (dataArray.length > 2) {\r\n        recordObject = {\r\n          date: dataArray[0].trim(),\r\n          name: dataArray[1].trim(),\r\n          amount: dataArray[2].trim(),\r\n          adjust: dataArray[3].trim(),\r\n          recordType: dataArray[4].trim(),\r\n          category: dataArray[5].trim(),\r\n          subcategory: dataArray[6].trim(),\r\n          remark: dataArray[7].trim(),\r\n        };\r\n\r\n        newRecordObject.push(recordObject);\r\n      }\r\n    }\r\n\r\n    this.setState({ recordDataList: newRecordObject });\r\n  };\r\n\r\n  validateUserName = (name) => {\r\n    // to validate userName with DB userName value\r\n    let invalid = true;\r\n    if (JSON.stringify(this.state.userList).indexOf(name) > 0) {\r\n      invalid = false;\r\n    } else {\r\n      invalid = true;\r\n    }\r\n\r\n    return invalid;\r\n  };\r\n\r\n  validateType = (recordType) => {\r\n    // to validate input value vs with DB value\r\n    let recordTypeList = this.state.recordTypeList;\r\n    let invalid = true;\r\n\r\n    for (let i = 0; i < recordTypeList.length; i++) {\r\n      if (recordType === recordTypeList[i].name) {\r\n        invalid = false;\r\n        break;\r\n      }\r\n    }\r\n\r\n    return invalid;\r\n  };\r\n\r\n  validateCategory = (recordType, category) => {\r\n    // to validate input value vs with DB value\r\n    let categoryList = this.state.categoryList;\r\n    let invalid = true;\r\n\r\n    for (let i = 0; i < categoryList.length; i++) {\r\n      if (\r\n        recordType === categoryList[i].record_type &&\r\n        category === categoryList[i].name\r\n      ) {\r\n        invalid = false;\r\n        break;\r\n      }\r\n    }\r\n\r\n    return invalid;\r\n  };\r\n\r\n  validateSubcategory = (recordType, category, subcategory) => {\r\n    // to validate input value vs with DB value\r\n    let subcategoryList = this.state.subcategoryList;\r\n    let invalid = true;\r\n\r\n    for (let i = 0; i < subcategoryList.length; i++) {\r\n      if (\r\n        recordType === subcategoryList[i].record_type &&\r\n        category === subcategoryList[i].category &&\r\n        subcategory === subcategoryList[i].name\r\n      ) {\r\n        invalid = false;\r\n        break;\r\n      }\r\n    }\r\n\r\n    return invalid;\r\n  };\r\n\r\n  updateRecordDataList = (index, type, value) => {\r\n    console.log(\"click click\");\r\n    console.log(\"index: \" + index);\r\n    console.log(\"type: \" + type);\r\n    console.log(\"value: \" + value);\r\n\r\n    if (value !== null) {\r\n      let recordDataList = [...this.state.recordDataList];\r\n      switch (type) {\r\n        case constant.name:\r\n          console.log(\"updating name\");\r\n          recordDataList[index] = {\r\n            ...recordDataList[index],\r\n            name: value,\r\n          };\r\n          break;\r\n        case constant.category:\r\n          console.log(\"updating category\");\r\n          recordDataList[index] = {\r\n            ...recordDataList[index],\r\n            category: value,\r\n          };\r\n          break;\r\n        case constant.subcategory:\r\n          console.log(\"updating subcategory\");\r\n          recordDataList[index] = {\r\n            ...recordDataList[index],\r\n            subcategory: value,\r\n          };\r\n          break;\r\n        case constant.recordType:\r\n          console.log(\"updating recordType\");\r\n          recordDataList[index] = {\r\n            ...recordDataList[index],\r\n            recordType: value,\r\n          };\r\n          break;\r\n        case constant.remark:\r\n          console.log(\"updating remark\");\r\n          recordDataList[index] = {\r\n            ...recordDataList[index],\r\n            remark: value,\r\n          };\r\n          break;\r\n      }\r\n\r\n      this.setState({ recordDataList: recordDataList });\r\n    } else {\r\n      console.log(\"value null\");\r\n    }\r\n  };\r\n\r\n  setInputData = (event) => {\r\n    console.log(\"setInputData: \" + event.target.value);\r\n    this.setState({ inputData: event.target.value });\r\n  };\r\n\r\n  setInputCategory = (category) => {\r\n    console.log(\"setInputCategory: \" + category);\r\n    this.setState({ inputCategory: category });\r\n  };\r\n}\r\n\r\nexport default RecordBatchAdd;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Accordion from \"react-bootstrap/Accordion\";\r\nimport Card from \"react-bootstrap/Card\";\r\n// import Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\n// font-awesome\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPen } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faTrashAlt } from \"@fortawesome/free-regular-svg-icons\";\r\n\r\n// import { SwitchRecType } from \"../../layouts/switch/Switch\";\r\n\r\nimport * as Global from \"../../global/GlobalUtil\";\r\n\r\nimport {\r\n  apiGetUserList,\r\n  apiGetCategoryList,\r\n  apiGetSubcategoryList,\r\n} from \"../../global/GlobalAPI\";\r\n\r\nimport {\r\n  EditRecordModal,\r\n  DeleteRecordModal,\r\n  // FailedModal,\r\n  // SuccessModal,\r\n} from \"../../layouts/modal/Modal\";\r\n\r\nclass RecordView extends Component {\r\n  state = {\r\n    // input\r\n    inputUserName: \"\",\r\n    inputDate: \"\",\r\n    inputCategory: \"\",\r\n    inputSubcategory: \"\",\r\n\r\n    userList: [],\r\n    recordList: [],\r\n    categoryList: [],\r\n    subcategoryList: [],\r\n\r\n    recordType: \"All\",\r\n    recordData: {},\r\n    totalExpenses: 0,\r\n    totalRevenue: 0,\r\n    grandTotal: 0,\r\n    editRecordModal: false,\r\n    deleteRecordModal: false,\r\n  };\r\n\r\n  css = {\r\n    containerStyle1: \"border-2-gray rounded p-3\",\r\n    divStyle1: \"py-2 px-3\",\r\n    inputStyle1: \"width-100p\",\r\n    switchCatTypeActive: \"text-center btn-blue py-1 border-2-blue rounded-pill\",\r\n    switchCatTypeNonactive:\r\n      \"text-center btn-white py-1 border-2-gray rounded-pill\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.apiGetUserList();\r\n    this.apiGetRecordList();\r\n    this.setCategoryList(this.state.recordType);\r\n  }\r\n\r\n  render() {\r\n    // let date = this.state.inputDate;\r\n    // console.log(\"current Date: \" + getCurrentYear + \"-\" + getCurrentMonth());\r\n    return (\r\n      <div>\r\n        <br />\r\n        <EditRecordModal\r\n          show={this.state.editRecordModal}\r\n          value={this.state.recordData}\r\n          category={this.state.categoryList}\r\n          onHide={() => this.setState({ editRecordModal: false })}\r\n        />\r\n\r\n        <DeleteRecordModal\r\n          show={this.state.deleteRecordModal}\r\n          onHide={() => this.setState({ deleteRecordModal: false })}\r\n        />\r\n\r\n        <Container className={this.css.containerStyle1}>\r\n          <Row>\r\n            <Col>\r\n              {/* <h5>Search</h5>\r\n              <hr /> */}\r\n            </Col>\r\n          </Row>\r\n          {/*<div className=\"d-flex flex-row height-20vh\">\r\n             <div className=\"d-flex flex-column width-25p scroll\"></div>\r\n\r\n            <div className=\"d-flex flex-column width-75p pl-3 \"> */}\r\n          <Form>\r\n            <Form.Row>\r\n              <Form.Group as={Col} controlId=\"formGridCity\">\r\n                <Form.Label>User</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  list=\"user\"\r\n                  placeholder=\"Name\"\r\n                  onChange={this.switchUser}\r\n                >\r\n                  {/* {this.layoutUserList()} */}\r\n                </Form.Control>\r\n              </Form.Group>\r\n\r\n              <Form.Group as={Col} controlId=\"formGridCity\">\r\n                <Form.Label>Date</Form.Label>\r\n                <Form.Control\r\n                  type=\"month\"\r\n                  defaultValue={this.state.inputDate}\r\n                  onBlur={this.setInputDate}\r\n                />\r\n              </Form.Group>\r\n            </Form.Row>\r\n            <Form.Row>\r\n              <Form.Group as={Col} controlId=\"formGridCity\">\r\n                <Form.Label>Type</Form.Label>\r\n                <Form.Control\r\n                  as=\"select\"\r\n                  defaultValue=\"All\"\r\n                  onChange={this.switchRecordType}\r\n                >\r\n                  <option>All</option>\r\n                  <option>Expense</option>\r\n                  <option>Revenue</option>\r\n                </Form.Control>\r\n              </Form.Group>\r\n              <Form.Group as={Col} controlId=\"formGridCity\">\r\n                <Form.Label>Category</Form.Label>\r\n                <Form.Control\r\n                  // type=\"text\"\r\n                  list=\"category\"\r\n                  placeholder=\"Category\"\r\n                  onChange={this.switchCategory}\r\n                >\r\n                  {/* {this.layoutUserList()} */}\r\n                </Form.Control>\r\n              </Form.Group>\r\n              <Form.Group as={Col} controlId=\"formGridCity\">\r\n                <Form.Label>Subcategory</Form.Label>\r\n                <Form.Control\r\n                  list=\"subcategory\"\r\n                  placeholder=\"Subcategory\"\r\n                  onChange={this.switchSubcategory}\r\n                  // onBlur={this.setInputDate}\r\n                />\r\n              </Form.Group>\r\n            </Form.Row>\r\n            <input\r\n              variant=\"primary\"\r\n              type=\"button\"\r\n              value=\"Search\"\r\n              className=\"rounded-pill bg-primary text-white border-none py-1 width-20p\"\r\n              onClick={this.apiGetRecordList}\r\n            />\r\n          </Form>\r\n          {/* </div> \r\n          </div>*/}\r\n        </Container>\r\n        <br />\r\n        <Container>\r\n          <Row>\r\n            <Col className={this.css.containerStyle1 + \" mr-2\"}>\r\n              <h5>Revenue</h5>\r\n              <span>\r\n                {Global.amountDisplayConverter(this.state.totalRevenue)}\r\n              </span>\r\n            </Col>\r\n\r\n            <Col className={this.css.containerStyle1 + \" mx-1\"}>\r\n              <h5>Expense</h5>\r\n              <span>\r\n                {Global.amountDisplayConverter(this.state.totalExpenses)}\r\n              </span>\r\n            </Col>\r\n\r\n            <Col className={this.css.containerStyle1 + \" ml-2\"}>\r\n              <h5>Total</h5>\r\n              <span>\r\n                {Global.amountDisplayConverter(this.state.grandTotal)}\r\n              </span>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n        <br />\r\n\r\n        <Container className={this.css.containerStyle1}>\r\n          <Row>\r\n            <Col>\r\n              <h5>Records</h5>\r\n              <hr />\r\n            </Col>\r\n          </Row>\r\n          <div className=\"d-flex flex-column scroll height-70vh\">\r\n            {this.layoutRecordList()}\r\n          </div>\r\n        </Container>\r\n\r\n        <datalist id=\"category\">{this.layoutCategoryDataList()}</datalist>\r\n\r\n        <datalist id=\"subcategory\">{this.layoutSubcategoryDatalist()}</datalist>\r\n\r\n        <datalist id=\"user\">\r\n          {Global.getLayoutDatalist(this.state.userList)}\r\n        </datalist>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Layout function\r\n  layoutUserList = () => {\r\n    return this.state.userList.map((value, index) => (\r\n      // <div>\r\n      //   <input\r\n      //     type=\"radio\"\r\n      //     name=\"user\"\r\n      //     value={value.name}\r\n      //     //checked={value.checked}\r\n      //     onClick={() => this.switchUser(value.name)}\r\n      //   />\r\n      //   <label key={index}>{value.name}</label>\r\n      //   <br />\r\n      //   <hr />\r\n      // </div>\r\n      <option>{value.name}</option>\r\n    ));\r\n  };\r\n\r\n  // layoutDatalist = (list) => {\r\n  //   return list.map((value, index) => (\r\n  //     <option key={index} value={value.name}></option>\r\n  //   ));\r\n  // };\r\n\r\n  layoutUserDatalist = () => {\r\n    return this.state.userList.map((value, index) => (\r\n      <option key={index} value={value.name}></option>\r\n    ));\r\n  };\r\n\r\n  layoutCategoryDataList = () => {\r\n    return this.state.categoryList.map((value, index) => (\r\n      <option key={index} value={value.name}></option>\r\n    ));\r\n  };\r\n\r\n  layoutSubcategoryDatalist = () => {\r\n    return this.state.subcategoryList.map((value, index) => (\r\n      <option key={index} value={value.name}></option>\r\n    ));\r\n  };\r\n\r\n  layoutRecordList = () => {\r\n    let date = \"\";\r\n    let displayDate = false;\r\n    return this.state.recordList.map((value, index) => (\r\n      <div className=\"py-1\">\r\n        {date !== value.date ? (date = value.date) : (displayDate = false)}\r\n        {displayDate ? <span>{value.date}</span> : <span></span>}\r\n        <Accordion>\r\n          {console.log(value.date.substring(5, 7))}\r\n          <Card\r\n            className={\r\n              parseInt(value.date.substring(5, 7)) % 2 === 0\r\n                ? \"bg-light\"\r\n                : \"bg-white\"\r\n            }\r\n          >\r\n            <Accordion.Toggle as={Card.Header} variant=\"link\" eventKey=\"0\">\r\n              <Row>\r\n                <Col md={3} lg={2} className=\"py-1\">\r\n                  <span>{value.date}</span>\r\n                  <br />\r\n                  <span>{Global.getDayOfWeek(value.date)}</span>\r\n                </Col>\r\n                <Col md={6} className=\"py-1\">\r\n                  <span>\r\n                    {value.category} - {value.subcategory}\r\n                  </span>\r\n                  <br />\r\n                  <span>{value.remark}</span>\r\n                </Col>\r\n                <Col className=\"text-center font-weight-bold py-3\">\r\n                  <span\r\n                    className={\r\n                      value.type === \"Revenue\" ? \"text-green\" : \"text-red\"\r\n                    }\r\n                  >\r\n                    {value.type === \"Revenue\"\r\n                      ? Global.amountDisplayConverter(value.amount)\r\n                      : Global.amountDisplayConverter(value.amount)}\r\n                  </span>\r\n                </Col>\r\n              </Row>\r\n            </Accordion.Toggle>\r\n            <Accordion.Collapse eventKey=\"0\">\r\n              <Card.Body>\r\n                <Card>\r\n                  <Accordion>\r\n                    <Accordion.Toggle\r\n                      as={Card.Header}\r\n                      variant=\"link\"\r\n                      eventKey=\"1\"\r\n                    >\r\n                      <span>Test Test</span>\r\n                    </Accordion.Toggle>\r\n                    <Accordion.Collapse eventKey=\"1\">\r\n                      <span>Test Test Body</span>\r\n                    </Accordion.Collapse>\r\n                  </Accordion>\r\n                </Card>\r\n\r\n                <Row>\r\n                  <Col md={3} lg={2} className=\"py-2\">\r\n                    <span>Record ID: {value.record_id}</span>\r\n                    {/* <br />\r\n                    <span>Settled: {value.settle}</span> */}\r\n                  </Col>\r\n                  <Col md={6}>\r\n                    <span>\r\n                      {/* Due: {amountDisplayConverter(value.unsettled_amount)} */}\r\n                    </span>\r\n                    {/* <br /> */}\r\n                    {/* <span>Settle by: {value.settle_by}</span> */}\r\n                  </Col>\r\n                  <Col className=\"cursor-pointer text-center py-2\">\r\n                    <FontAwesomeIcon\r\n                      icon={faPen}\r\n                      size=\"1x\"\r\n                      className=\"mx-2\"\r\n                      onClick={() => this.editRecord(value)}\r\n                    />\r\n                    <FontAwesomeIcon\r\n                      icon={faTrashAlt}\r\n                      size=\"1x\"\r\n                      className=\"mx-2\"\r\n                      onClick={() => this.deleteRecord(value)}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n\r\n                <Row>\r\n                  <Col></Col>\r\n                </Row>\r\n              </Card.Body>\r\n            </Accordion.Collapse>\r\n          </Card>\r\n        </Accordion>\r\n      </div>\r\n    ));\r\n  };\r\n  // Layout function end\r\n\r\n  // API function\r\n  setCategoryList = async (type) => {\r\n    console.log(\"type: \" + type);\r\n    await apiGetCategoryList(type).then((response) => {\r\n      if (response.message === \"success\") {\r\n        console.log(\"aaa: \" + JSON.stringify(response.data));\r\n        this.setState({ categoryList: response.data });\r\n      }\r\n    });\r\n  };\r\n\r\n  setSubcategoryList = async (category) => {\r\n    console.log(\"API apiGetSubcategoryList start\");\r\n    console.log(\"category: \" + category);\r\n    let type = this.state.recordType;\r\n\r\n    if (category !== \"\" && this.state.inputCategory !== category) {\r\n      // this.setState({\r\n      //   inputCategory: category,\r\n      //   expSubcat: \"\",\r\n      //   subcategoryList: [],\r\n      // });\r\n\r\n      await apiGetSubcategoryList(type, category).then((response) => {\r\n        if (response.message === \"success\") {\r\n          console.log(\"aaa: \" + JSON.stringify(response.data));\r\n          this.setState({ subcategoryList: response.data });\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  apiGetUserList = async () => {\r\n    // console.log(\"type: \" + type);\r\n    await apiGetUserList().then((response) => {\r\n      if (response.message === \"success\") {\r\n        this.setState({ userList: response.data });\r\n      }\r\n    });\r\n  };\r\n\r\n  // apiGetUserList = () => {\r\n  //   // GET user list\r\n  //   axios\r\n  //     .get(process.env.REACT_APP_BASE_URL + process.env.REACT_APP_USER_GET_LIST)\r\n  //     .then((response) => {\r\n  //       if (response.data.message === \"success\") {\r\n\r\n  //         this.setState({\r\n  //           userList: response.data.data,\r\n  //           //inputUserName: userName,\r\n  //         });\r\n  //       }\r\n  //       console.log(\"userList: \" + JSON.stringify(this.state.userList));\r\n  //     });\r\n  // };\r\n\r\n  apiGetRecordList = () => {\r\n    let userId;\r\n    let userName = this.state.inputUserName;\r\n    let recordType = this.state.recordType;\r\n    let date = this.state.inputDate;\r\n    let category = this.state.inputCategory;\r\n    let subcategory = this.state.inputSubcategory;\r\n\r\n    console.log(\"apiGetRecordList userName: \" + userName);\r\n\r\n    if (date === \"\") {\r\n      date = Global.getCurrentYear() + \"-\" + Global.getCurrentMonth();\r\n    }\r\n\r\n    for (let value of this.state.userList) {\r\n      if (value.name === userName) {\r\n        userId = value.user_id;\r\n        break;\r\n      }\r\n    }\r\n\r\n    let url =\r\n      process.env.REACT_APP_API_GET_RECORD_LIST +\r\n      \"?userId=\" +\r\n      userId +\r\n      \"&type=\" +\r\n      recordType +\r\n      \"&date=\" +\r\n      date +\r\n      \"&category=\" +\r\n      category +\r\n      \"&subcategory=\" +\r\n      subcategory;\r\n    console.log(\"URL: \" + url);\r\n\r\n    axios.get(url).then((response) => {\r\n      if (response.data.message === \"success\") {\r\n        let totalExpenses = 0;\r\n        let totalRevenue = 0;\r\n        let grandTotal = 0;\r\n\r\n        for (let value of response.data.data) {\r\n          if (value.type === \"Expense\") {\r\n            totalExpenses += value.amount;\r\n          } else if (value.type === \"Revenue\") {\r\n            totalRevenue += value.amount;\r\n          }\r\n        }\r\n\r\n        grandTotal = totalRevenue + totalExpenses;\r\n        console.log(\"totalExpenses: \" + totalExpenses);\r\n        console.log(\"totalRevenue: \" + totalRevenue);\r\n\r\n        this.setState({\r\n          recordList: response.data.data,\r\n          totalExpenses: totalExpenses,\r\n          totalRevenue: totalRevenue,\r\n          grandTotal: grandTotal,\r\n          inputDate: date,\r\n        });\r\n      }\r\n      console.log(\"recordList: \" + this.state.recordList);\r\n    });\r\n  };\r\n  // API function end\r\n\r\n  editRecord = (value) => {\r\n    this.setState({ editRecordModal: true, recordData: value });\r\n  };\r\n\r\n  deleteRecord = (value) => {\r\n    this.setState({ deleteRecordModal: true, recordData: value });\r\n  };\r\n\r\n  setInputDate = (event) => {\r\n    console.log(\"eventDate: \" + event.target.value);\r\n    this.setState({ inputDate: event.target.value });\r\n  };\r\n\r\n  switchRecordType = (event) => {\r\n    let type = event.target.value;\r\n    console.log(\"type: \" + type);\r\n    if (this.state.recordType !== type) {\r\n      console.log(\"switch record type\");\r\n      this.setState({ recordType: type });\r\n      this.setCategoryList(type);\r\n    }\r\n  };\r\n\r\n  switchUser = (event) => {\r\n    let userName = event.target.value;\r\n    console.log(\"userName: \" + userName);\r\n    if (this.state.inputUserName !== userName) {\r\n      console.log(\"switch user\");\r\n      this.setState({ inputUserName: userName });\r\n    }\r\n  };\r\n\r\n  switchCategory = (event) => {\r\n    let category = event.target.value;\r\n    console.log(\"catogory: \" + category);\r\n    if (this.state.inputCategory !== category) {\r\n      console.log(\"switch catogory\");\r\n      this.setState({ inputCategory: category });\r\n      this.setSubcategoryList(category);\r\n    }\r\n  };\r\n\r\n  switchSubcategory = (event) => {\r\n    let subcategory = event.target.value;\r\n    console.log(\"subcategory: \" + subcategory);\r\n    if (this.state.inputSubcategory !== subcategory) {\r\n      console.log(\"switch subcategory\");\r\n      this.setState({ inputSubcategory: subcategory });\r\n    }\r\n  };\r\n}\r\n\r\nexport default RecordView;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport Constant from \"../../global/Constant.json\";\r\n\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Accordion from \"react-bootstrap/Accordion\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport Pagination from \"react-bootstrap/Pagination\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\n\r\n// font-awesome\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPen } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faTrashAlt } from \"@fortawesome/free-regular-svg-icons\";\r\n\r\n// import { SwitchRecType } from \"../../layouts/switch/Switch\";\r\n\r\nimport * as Global from \"../../global/GlobalUtil\";\r\n\r\nimport {\r\n  apiGetUserList,\r\n  apiGetCategoryList,\r\n  apiGetSubcategoryList,\r\n  apiGetRecordTypeList,\r\n} from \"../../global/GlobalAPI\";\r\n\r\nimport {\r\n  EditRecordModal,\r\n  DeleteRecordModal,\r\n  // SuccessModal,\r\n} from \"../../layouts/modal/Modal\";\r\n\r\nclass RecordView extends Component {\r\n  state = {\r\n    userList: [],\r\n    recordList: [],\r\n    recordListByPage: [],\r\n    recordTypeList: [],\r\n    categoryList: [],\r\n    subcategoryList: [],\r\n\r\n    filterForm: {\r\n      modalShow: false,\r\n      date: \"\",\r\n      month: Global.getCurrentYear() + \"-\" + Global.getCurrentMonth(),\r\n      user: \"\",\r\n      recordType: \"\",\r\n      category: \"\",\r\n      subcategory: \"\",\r\n    },\r\n\r\n    recordData: {},\r\n    totalExpenses: 0,\r\n    totalRevenue: 0,\r\n    grandTotal: 0,\r\n\r\n    editRecordModal: false,\r\n    deleteRecordModal: false,\r\n    modalEditRecordShow: false,\r\n\r\n    paginationForm: {\r\n      pageTotalItem: 12,\r\n      currentPage: 1,\r\n      totalPage: 1,\r\n    },\r\n  };\r\n\r\n  css = {\r\n    containerStyle1: \"border-2-gray rounded p-3\",\r\n    divStyle1: \"py-2 px-3\",\r\n    inputStyle1: \"width-100p\",\r\n    switchCatTypeActive: \"text-center btn-blue py-1 border-2-blue rounded-pill\",\r\n    switchCatTypeNonactive:\r\n      \"text-center btn-white py-1 border-2-gray rounded-pill\",\r\n    td_style: \"p-1\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.apiGetUserList();\r\n    this.apiGetRecordList();\r\n    this.apiGetRecordTypeList();\r\n    this.apiGetCategoryList();\r\n    this.apiGetSubcategoryList();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <br />\r\n        <EditRecordModal\r\n          show={this.state.editRecordModal}\r\n          value={this.state.recordData}\r\n          category={this.state.categoryList}\r\n          onHide={() => this.setState({ editRecordModal: false })}\r\n        />\r\n\r\n        <DeleteRecordModal\r\n          show={this.state.deleteRecordModal}\r\n          onHide={() => this.setState({ deleteRecordModal: false })}\r\n        />\r\n\r\n        {this.layoutModalFilterRecord()}\r\n\r\n        <br />\r\n        <Container fluid>\r\n          <Row>\r\n            <Col lg={1}></Col>\r\n            <Col className={this.css.containerStyle1 + \" mr-2\"}>\r\n              <h5>Revenue</h5>\r\n              <span>\r\n                {Global.amountDisplayConverter(this.state.totalRevenue)}\r\n              </span>\r\n            </Col>\r\n\r\n            <Col className={this.css.containerStyle1 + \" mx-1\"}>\r\n              <h5>Expense</h5>\r\n              <span>\r\n                {Global.amountDisplayConverter(this.state.totalExpenses)}\r\n              </span>\r\n            </Col>\r\n\r\n            <Col className={this.css.containerStyle1 + \" ml-2\"}>\r\n              <h5>Total</h5>\r\n              <span>\r\n                {Global.amountDisplayConverter(this.state.grandTotal)}\r\n              </span>\r\n            </Col>\r\n            <Col lg={1}></Col>\r\n          </Row>\r\n        </Container>\r\n        <br />\r\n\r\n        <Container fluid>\r\n          <Row>\r\n            <Col lg={1}></Col>\r\n\r\n            <Col sm=\"auto\" className=\"pr-1\">\r\n              <Form.Group controlId=\"\">\r\n                <Form.Control\r\n                  size=\"sm\"\r\n                  type=\"month\"\r\n                  defaultValue={this.state.filterForm.month}\r\n                  onBlur={(event) =>\r\n                    this.setFilterForm(Constant.month, event.target.value)\r\n                  }\r\n                />\r\n              </Form.Group>\r\n            </Col>\r\n            <Col sm=\"auto\" className=\"px-1\">\r\n              <Form.Group controlId=\"\">\r\n                <Form.Control\r\n                  size=\"sm\"\r\n                  type=\"text\"\r\n                  list=\"user\"\r\n                  placeholder=\"Name\"\r\n                  value={this.state.filterForm.name}\r\n                  onChange={(event) =>\r\n                    this.setFilterForm(Constant.name, event.target.value)\r\n                  }\r\n                ></Form.Control>\r\n              </Form.Group>\r\n            </Col>\r\n\r\n            <Col sm=\"auto\" className=\"px-1\">\r\n              <Button\r\n                variant=\"primary\"\r\n                size=\"sm\"\r\n                onClick={this.apiGetRecordList}\r\n              >\r\n                Search\r\n              </Button>\r\n            </Col>\r\n            <Col sm=\"auto\" className=\"px-1\">\r\n              <Form.Label\r\n                column=\"sm\"\r\n                className=\"px-1\"\r\n                onClick={() =>\r\n                  this.setState({\r\n                    filterForm: {\r\n                      ...this.state.filterForm,\r\n                      modalShow: true,\r\n                    },\r\n                  })\r\n                }\r\n              >\r\n                <span>\r\n                  <u>Filter</u>\r\n                </span>\r\n              </Form.Label>\r\n            </Col>\r\n            <Col lg={1}></Col>\r\n          </Row>\r\n        </Container>\r\n\r\n        <Container fluid>\r\n          <Row>\r\n            <Col lg={1}></Col>\r\n            <Col style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n              {this.layoutPagination()}\r\n            </Col>\r\n            <Col lg={1}></Col>\r\n          </Row>\r\n        </Container>\r\n\r\n        <Container fluid>\r\n          <Row>\r\n            <Col lg={1}></Col>\r\n            <Col>\r\n              <Table>\r\n                {this.layoutRecordTableViewHead()}\r\n                {this.layoutRecordTableViewRow()}\r\n              </Table>\r\n            </Col>\r\n            <Col lg={1}></Col>\r\n          </Row>\r\n        </Container>\r\n\r\n        {/* <Container className={this.css.containerStyle1}>\r\n          <Row>\r\n            <Col>\r\n              <h5>Records</h5>\r\n              <hr />\r\n            </Col>\r\n          </Row>\r\n          <div className=\"d-flex flex-column scroll height-70vh\">\r\n            {this.layoutRecordList()}\r\n          </div>\r\n        </Container> */}\r\n\r\n        <datalist id=\"recordType\">\r\n          {Global.getLayoutDatalist(this.state.recordTypeList)}\r\n        </datalist>\r\n\r\n        <datalist id=\"category\">\r\n          {Global.getLayoutDatalist(this.state.categoryList)}\r\n        </datalist>\r\n\r\n        <datalist id=\"subcategory\">\r\n          {Global.getLayoutDatalist(this.state.subcategoryList)}\r\n        </datalist>\r\n\r\n        <datalist id=\"user\">\r\n          {Global.getLayoutDatalist(this.state.userList)}\r\n        </datalist>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Layout function\r\n\r\n  layoutRecordList = () => {\r\n    let date = \"\";\r\n    let displayDate = false;\r\n    return this.state.recordList.map((value, index) => (\r\n      <div className=\"py-1\">\r\n        {date !== value.date ? (date = value.date) : (displayDate = false)}\r\n        {displayDate ? <span>{value.date}</span> : <span></span>}\r\n        <Accordion>\r\n          {console.log(value.date.substring(5, 7))}\r\n          <Card\r\n            className={\r\n              parseInt(value.date.substring(5, 7)) % 2 === 0\r\n                ? \"bg-light\"\r\n                : \"bg-white\"\r\n            }\r\n          >\r\n            <Accordion.Toggle as={Card.Header} variant=\"link\" eventKey=\"0\">\r\n              <Row>\r\n                <Col md={3} lg={2} className=\"py-1\">\r\n                  <span>{value.date}</span>\r\n                  <br />\r\n                  <span>{Global.getDayOfWeek(value.date)}</span>\r\n                </Col>\r\n                <Col md={6} className=\"py-1\">\r\n                  <span>\r\n                    {value.category} - {value.subcategory}\r\n                  </span>\r\n                  <br />\r\n                  <span>{value.remark}</span>\r\n                </Col>\r\n                <Col className=\"text-center font-weight-bold py-3\">\r\n                  <span\r\n                    className={\r\n                      value.type === \"Revenue\" ? \"text-green\" : \"text-red\"\r\n                    }\r\n                  >\r\n                    {value.type === \"Revenue\"\r\n                      ? Global.amountDisplayConverter(value.amount)\r\n                      : Global.amountDisplayConverter(value.amount)}\r\n                  </span>\r\n                </Col>\r\n              </Row>\r\n            </Accordion.Toggle>\r\n            <Accordion.Collapse eventKey=\"0\">\r\n              <Card.Body>\r\n                <Card>\r\n                  <Accordion>\r\n                    <Accordion.Toggle\r\n                      as={Card.Header}\r\n                      variant=\"link\"\r\n                      eventKey=\"1\"\r\n                    >\r\n                      <span>Test Test</span>\r\n                    </Accordion.Toggle>\r\n                    <Accordion.Collapse eventKey=\"1\">\r\n                      <span>Test Test Body</span>\r\n                    </Accordion.Collapse>\r\n                  </Accordion>\r\n                </Card>\r\n\r\n                <Row>\r\n                  <Col md={3} lg={2} className=\"py-2\">\r\n                    <span>Record ID: {value.record_id}</span>\r\n                    {/* <br />\r\n                    <span>Settled: {value.settle}</span> */}\r\n                  </Col>\r\n                  <Col md={6}>\r\n                    <span>\r\n                      {/* Due: {amountDisplayConverter(value.unsettled_amount)} */}\r\n                    </span>\r\n                    {/* <br /> */}\r\n                    {/* <span>Settle by: {value.settle_by}</span> */}\r\n                  </Col>\r\n                  <Col className=\"cursor-pointer text-center py-2\">\r\n                    <FontAwesomeIcon\r\n                      icon={faPen}\r\n                      size=\"1x\"\r\n                      className=\"mx-2\"\r\n                      onClick={() => this.editRecord(value)}\r\n                    />\r\n                    <FontAwesomeIcon\r\n                      icon={faTrashAlt}\r\n                      size=\"1x\"\r\n                      className=\"mx-2\"\r\n                      onClick={() => this.deleteRecord(value)}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n\r\n                <Row>\r\n                  <Col></Col>\r\n                </Row>\r\n              </Card.Body>\r\n            </Accordion.Collapse>\r\n          </Card>\r\n        </Accordion>\r\n      </div>\r\n    ));\r\n  };\r\n\r\n  layoutRecordTableViewHead = () => {\r\n    return (\r\n      <thead>\r\n        <tr>\r\n          <th className={this.css.td_style + \" width-10p\"}>Date</th>\r\n          <th className={this.css.td_style}>Name</th>\r\n          <th className={this.css.td_style}>Type</th>\r\n          <th className={this.css.td_style}>Category</th>\r\n          <th className={this.css.td_style}>Subcategory</th>\r\n          <th className={this.css.td_style + \" width-10p\"}>Remark</th>\r\n          <th className={this.css.td_style}>Amount</th>\r\n          <th className={this.css.td_style}>Actions</th>\r\n        </tr>\r\n      </thead>\r\n    );\r\n  };\r\n\r\n  layoutRecordTableViewRow = () => {\r\n    return (\r\n      <tbody>\r\n        {this.state.recordListByPage.map((value, index) => (\r\n          <tr>\r\n            <td className={this.css.td_style}>{value.date}</td>\r\n            <td className={this.css.td_style}>{value.user_name}</td>\r\n\r\n            <td className={this.css.td_style}>{value.type}</td>\r\n            <td className={this.css.td_style}>{value.category}</td>\r\n            <td className={this.css.td_style}>{value.subcategory}</td>\r\n            <td className={this.css.td_style + \" width-20p\"}>{value.remark}</td>\r\n            <td className={this.css.td_style}>\r\n              {Global.amountDisplayConverter(value.amount)}\r\n            </td>\r\n            <td className={this.css.td_style}>\r\n              <FontAwesomeIcon\r\n                icon={faPen}\r\n                size=\"1x\"\r\n                className=\"mx-1\"\r\n                onClick={() =>\r\n                  this.setState({\r\n                    modalEditRecordShow: true,\r\n                    modalEditForm: {\r\n                      ...this.state.modalEditForm,\r\n                      editType: Constant.recordType,\r\n                      id: value.record_type_id,\r\n                      name: value.name,\r\n                    },\r\n                  })\r\n                }\r\n              />\r\n              <FontAwesomeIcon\r\n                icon={faTrashAlt}\r\n                size=\"1x\"\r\n                className=\"mx-1\"\r\n                onClick={() => this.deleteRecord(value)}\r\n              />\r\n            </td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    );\r\n  };\r\n\r\n  // Modal filter record\r\n  layoutModalFilterRecord = (value) => {\r\n    console.log(\"layoutModalFilterRecord\");\r\n    console.log(\"filterForm: \" + JSON.stringify(this.state.filterForm));\r\n\r\n    return (\r\n      <Modal\r\n        size=\"lg\"\r\n        backdrop=\"true\"\r\n        animation=\"true\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n        show={this.state.filterForm.modalShow}\r\n      >\r\n        <Modal.Header>\r\n          <Modal.Title className=\"text-center\">Filter</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body className=\"show-grid\">\r\n          <Form className=\"\">\r\n            <Row>\r\n              <Col>\r\n                <Form.Label>Date</Form.Label>\r\n                <Form.Control\r\n                  type=\"date\"\r\n                  placeholder=\"Date\"\r\n                  value={this.state.filterForm.date}\r\n                  onChange={(event) =>\r\n                    this.setFilterForm(Constant.date, event.target.value)\r\n                  }\r\n                ></Form.Control>\r\n              </Col>\r\n            </Row>\r\n            <Form.Row>\r\n              <Form.Group as={Col} controlId=\"\">\r\n                <Form.Label>Type</Form.Label>\r\n                <Form.Control\r\n                  list=\"recordType\"\r\n                  placeholder=\"Type\"\r\n                  value={this.state.filterForm.recordType}\r\n                  onChange={(event) =>\r\n                    this.setFilterForm(Constant.recordType, event.target.value)\r\n                  }\r\n                ></Form.Control>\r\n              </Form.Group>\r\n              <Form.Group as={Col} controlId=\"\">\r\n                <Form.Label>Category</Form.Label>\r\n                <Form.Control\r\n                  // type=\"text\"\r\n                  list=\"category\"\r\n                  placeholder=\"Category\"\r\n                  value={this.state.filterForm.category}\r\n                  onChange={(event) =>\r\n                    this.setFilterForm(Constant.category, event.target.value)\r\n                  }\r\n                ></Form.Control>\r\n              </Form.Group>\r\n              <Form.Group as={Col} controlId=\"\">\r\n                <Form.Label>Subcategory</Form.Label>\r\n                <Form.Control\r\n                  list=\"subcategory\"\r\n                  placeholder=\"Subcategory\"\r\n                  value={this.state.filterForm.subcategory}\r\n                  onChange={(event) =>\r\n                    this.setFilterForm(Constant.subcategory, event.target.value)\r\n                  }\r\n                />\r\n              </Form.Group>\r\n            </Form.Row>\r\n          </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            variant=\"primary\"\r\n            onClick={() =>\r\n              this.setState({\r\n                filterForm: {\r\n                  ...this.state.filterForm,\r\n                  [Constant.date]: \"\",\r\n                  [Constant.recordType]: \"\",\r\n                  [Constant.category]: \"\",\r\n                  [Constant.subcategory]: \"\",\r\n                },\r\n              })\r\n            }\r\n          >\r\n            Clear\r\n          </Button>\r\n          <Button\r\n            variant=\"secondary\"\r\n            onClick={() =>\r\n              this.setState({\r\n                filterForm: {\r\n                  ...this.state.filterForm,\r\n                  modalShow: false,\r\n                },\r\n              })\r\n            }\r\n          >\r\n            Close\r\n          </Button>\r\n\r\n          {/* {this.layoutModalEditRecordFooter()} */}\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n  };\r\n\r\n  layoutPagination = () => {\r\n    let currentPage = parseInt(this.state.paginationForm.currentPage);\r\n    let totalPage = parseInt(this.state.paginationForm.totalPage);\r\n\r\n    if (totalPage <= 7) {\r\n      // totalPage less than 7\r\n      let pageObject = [];\r\n\r\n      for (var i = 1; i <= totalPage; i++) {\r\n        pageObject.push(i);\r\n      }\r\n\r\n      return (\r\n        <Pagination>\r\n          <Pagination.Prev\r\n            disabled={currentPage == 1 ? \"true\" : \"\"}\r\n            onClick={() =>\r\n              this.setPaginationForm(\"currentPage\", currentPage - 1)\r\n            }\r\n          />\r\n\r\n          {pageObject.map((value, i) => (\r\n            <Pagination.Item\r\n              value={value}\r\n              active={currentPage == value ? \"true\" : \"\"}\r\n              onClick={() => this.setPaginationForm(\"currentPage\", value)}\r\n            >\r\n              {value}\r\n            </Pagination.Item>\r\n          ))}\r\n\r\n          <Pagination.Next\r\n            disabled={currentPage == totalPage ? \"true\" : \"\"}\r\n            onClick={() =>\r\n              this.setPaginationForm(\"currentPage\", currentPage + 1)\r\n            }\r\n          />\r\n        </Pagination>\r\n      );\r\n    }\r\n\r\n    if (totalPage > 7) {\r\n      // totalPage more than 7\r\n      if (currentPage < 5) {\r\n        // currentPage within 1 - 4\r\n        let pageObject;\r\n        if (currentPage == 4) {\r\n          pageObject = [1, 2, 3, 4, 5, 6];\r\n        } else {\r\n          pageObject = [1, 2, 3, 4, 5];\r\n        }\r\n\r\n        return (\r\n          <Pagination>\r\n            <Pagination.Prev\r\n              disabled={currentPage <= 1 ? \"true\" : \"\"}\r\n              onClick={() =>\r\n                this.setPaginationForm(\"currentPage\", currentPage - 1)\r\n              }\r\n            />\r\n\r\n            {pageObject.map((value, i) => (\r\n              <Pagination.Item\r\n                value={value}\r\n                active={currentPage == value ? \"true\" : \"\"}\r\n                onClick={() => this.setPaginationForm(\"currentPage\", value)}\r\n              >\r\n                {value}\r\n              </Pagination.Item>\r\n            ))}\r\n\r\n            <Pagination.Ellipsis />\r\n\r\n            <Pagination.Item\r\n              onClick={() => this.setPaginationForm(\"currentPage\", totalPage)}\r\n            >\r\n              {totalPage}\r\n            </Pagination.Item>\r\n\r\n            <Pagination.Next\r\n              disabled={currentPage == totalPage ? \"true\" : \"\"}\r\n              onClick={() =>\r\n                this.setPaginationForm(\"currentPage\", currentPage + 1)\r\n              }\r\n            />\r\n          </Pagination>\r\n        );\r\n      } else if (currentPage >= totalPage - 3) {\r\n        // totalPage at last 3 page\r\n        let pageObject = [];\r\n        var i;\r\n\r\n        if (currentPage == totalPage - 3) {\r\n          i = 6;\r\n        } else {\r\n          i = 5;\r\n        }\r\n\r\n        while (i > 0) {\r\n          --i;\r\n          pageObject.push(totalPage - i);\r\n        }\r\n\r\n        return (\r\n          <Pagination>\r\n            <Pagination.Prev\r\n              onClick={() =>\r\n                this.setPaginationForm(\"currentPage\", currentPage - 1)\r\n              }\r\n            />\r\n\r\n            <Pagination.Item\r\n              onClick={() => this.setPaginationForm(\"currentPage\", 1)}\r\n            >\r\n              {1}\r\n            </Pagination.Item>\r\n\r\n            <Pagination.Ellipsis />\r\n\r\n            {pageObject.map((value, i) => (\r\n              <Pagination.Item\r\n                value={value}\r\n                active={currentPage == value ? \"true\" : \"\"}\r\n                onClick={() => this.setPaginationForm(\"currentPage\", value)}\r\n              >\r\n                {value}\r\n              </Pagination.Item>\r\n            ))}\r\n\r\n            <Pagination.Next\r\n              disabled={currentPage == totalPage ? \"true\" : \"\"}\r\n              onClick={() =>\r\n                this.setPaginationForm(\"currentPage\", currentPage + 1)\r\n              }\r\n            />\r\n          </Pagination>\r\n        );\r\n      } else {\r\n        return (\r\n          <Pagination>\r\n            <Pagination.Prev\r\n              // disabled={currentPage <= 1 ? \"true\" : \"\"}\r\n              onClick={() =>\r\n                this.setPaginationForm(\"currentPage\", currentPage - 1)\r\n              }\r\n            />\r\n\r\n            <Pagination.Item>{1}</Pagination.Item>\r\n            <Pagination.Ellipsis />\r\n\r\n            <Pagination.Item\r\n              onClick={() =>\r\n                this.setPaginationForm(\"currentPage\", currentPage - 2)\r\n              }\r\n            >\r\n              {currentPage - 2}\r\n            </Pagination.Item>\r\n            <Pagination.Item\r\n              onClick={() =>\r\n                this.setPaginationForm(\"currentPage\", currentPage - 1)\r\n              }\r\n            >\r\n              {currentPage - 1}\r\n            </Pagination.Item>\r\n            <Pagination.Item\r\n              active\r\n              disable\r\n              onClick={() => this.setPaginationForm(\"currentPage\", currentPage)}\r\n            >\r\n              {currentPage}\r\n            </Pagination.Item>\r\n            <Pagination.Item\r\n              onClick={() =>\r\n                this.setPaginationForm(\"currentPage\", currentPage + 1)\r\n              }\r\n            >\r\n              {currentPage + 1}\r\n            </Pagination.Item>\r\n            <Pagination.Item\r\n              onClick={() =>\r\n                this.setPaginationForm(\"currentPage\", currentPage + 2)\r\n              }\r\n            >\r\n              {currentPage + 2}\r\n            </Pagination.Item>\r\n\r\n            <Pagination.Ellipsis />\r\n\r\n            <Pagination.Item\r\n              onClick={() => this.setPaginationForm(\"currentPage\", totalPage)}\r\n            >\r\n              {totalPage}\r\n            </Pagination.Item>\r\n\r\n            <Pagination.Next\r\n              // disabled={currentPage == totalPage ? \"true\" : \"\"}\r\n              onClick={() =>\r\n                this.setPaginationForm(\"currentPage\", currentPage + 1)\r\n              }\r\n            />\r\n          </Pagination>\r\n        );\r\n      }\r\n    }\r\n  };\r\n  // Layout function end\r\n\r\n  // API function\r\n  apiGetRecordTypeList = async () => {\r\n    // GET record type list\r\n    await apiGetRecordTypeList().then((response) => {\r\n      if (response.message === \"success\") {\r\n        console.log(\"recordTypeList: \" + JSON.stringify(response.data));\r\n        this.setState({ recordTypeList: response.data });\r\n      }\r\n    });\r\n  };\r\n\r\n  apiGetCategoryList = async () => {\r\n    // console.log(\"type: \" + type);\r\n    await apiGetCategoryList().then((response) => {\r\n      if (response.message === \"success\") {\r\n        this.setState({ categoryList: response.data });\r\n      }\r\n    });\r\n  };\r\n\r\n  apiGetSubcategoryList = async () => {\r\n    let type = \"\";\r\n    let category = \"\";\r\n\r\n    await apiGetSubcategoryList(type, category).then((response) => {\r\n      if (response.message === \"success\") {\r\n        this.setState({ subcategoryList: response.data });\r\n      }\r\n    });\r\n  };\r\n\r\n  apiGetUserList = async () => {\r\n    // console.log(\"type: \" + type);\r\n    await apiGetUserList().then((response) => {\r\n      if (response.message === \"success\") {\r\n        this.setState({ userList: response.data });\r\n      }\r\n    });\r\n  };\r\n\r\n  apiGetRecordList = () => {\r\n    let userId;\r\n    let userName = this.state.filterForm.name;\r\n    let recordType = this.state.filterForm.recordType;\r\n    let date = this.state.filterForm.date;\r\n    let month = this.state.filterForm.month;\r\n    let category = this.state.filterForm.category;\r\n    let subcategory = encodeURI(this.state.filterForm.subcategory);\r\n\r\n    console.log(\"apiGetRecordList userName: \" + userName);\r\n\r\n    if (month === \"\") {\r\n      month = Global.getCurrentYear() + \"-\" + Global.getCurrentMonth();\r\n    }\r\n\r\n    userId = Global.getIndexByName(this.state.userList, userName);\r\n\r\n    //Global.generateUrlParamsByJson(this.state.filterForm);\r\n\r\n    let url =\r\n      process.env.REACT_APP_API_GET_RECORD_LIST +\r\n      \"?userId=\" +\r\n      userId +\r\n      \"&type=\" +\r\n      recordType +\r\n      \"&date=\" +\r\n      date +\r\n      \"&month=\" +\r\n      month +\r\n      \"&category=\" +\r\n      category +\r\n      \"&subcategory=\" +\r\n      subcategory;\r\n    console.log(\"URL: \" + url);\r\n\r\n    axios.get(url).then((response) => {\r\n      if (response.data.message === \"success\") {\r\n        let totalExpenses = 0;\r\n        let totalRevenue = 0;\r\n        let grandTotal = 0;\r\n\r\n        for (let value of response.data.data) {\r\n          if (value.type === \"Expense\") {\r\n            totalExpenses += value.amount;\r\n          } else if (value.type === \"Revenue\") {\r\n            totalRevenue += value.amount;\r\n          }\r\n        }\r\n\r\n        grandTotal = totalRevenue + totalExpenses;\r\n        console.log(\"totalExpenses: \" + totalExpenses);\r\n        console.log(\"totalRevenue: \" + totalRevenue);\r\n\r\n        this.setState(\r\n          {\r\n            recordList: response.data.data,\r\n            totalExpenses: totalExpenses,\r\n            totalRevenue: totalRevenue,\r\n            grandTotal: grandTotal,\r\n          },\r\n\r\n          () => this.initPaginationForm()\r\n        );\r\n      }\r\n      console.log(\"recordList: \" + this.state.recordList);\r\n    });\r\n  };\r\n  // API function end\r\n\r\n  editRecord = (value) => {\r\n    this.setState({ editRecordModal: true, recordData: value });\r\n  };\r\n\r\n  deleteRecord = (value) => {\r\n    this.setState({ deleteRecordModal: true, recordData: value });\r\n  };\r\n\r\n  initPaginationForm = (type, value) => {\r\n    let pageTotalItem = this.state.paginationForm.pageTotalItem;\r\n    let totalPage = Math.ceil(this.state.recordList.length / pageTotalItem);\r\n    let currentPage = totalPage == 0 ? 0 : 1;\r\n    console.log(\"totalRecord: \" + this.state.recordList.length);\r\n    console.log(\"totalPage: \" + totalPage);\r\n    console.log(\"totalPage int: \" + Math.ceil(totalPage));\r\n\r\n    //this.setPaginationForm(\"lastPage\", lastPage);\r\n\r\n    console.log(\"initPaginationForm\");\r\n    console.log(\"type: \" + type);\r\n    console.log(\"value: \" + value);\r\n\r\n    this.setState(\r\n      {\r\n        paginationForm: {\r\n          ...this.state.paginationForm,\r\n          currentPage: currentPage,\r\n          totalPage: totalPage,\r\n        },\r\n      },\r\n      () => this.setRecordListView(),\r\n      console.log(\r\n        \"paginationForm: \" + JSON.stringify(this.state.paginationForm)\r\n      )\r\n    );\r\n  };\r\n\r\n  setRecordListView = () => {\r\n    let currentPage = this.state.paginationForm.currentPage;\r\n    let pageTotalItem = this.state.paginationForm.pageTotalItem;\r\n\r\n    let startIndex = (currentPage - 1) * pageTotalItem;\r\n    let endIndex = currentPage * pageTotalItem;\r\n    let recordList = this.state.recordList;\r\n    let recordListByPage;\r\n\r\n    recordListByPage = recordList.slice(startIndex, endIndex);\r\n\r\n    this.setState(\r\n      {\r\n        recordListByPage: recordListByPage,\r\n      },\r\n      () =>\r\n        console.log(\r\n          \"recordListByPage: \" + JSON.stringify(this.state.recordListByPage)\r\n        )\r\n    );\r\n  };\r\n\r\n  setPaginationForm = (type, value) => {\r\n    this.setState(\r\n      {\r\n        paginationForm: {\r\n          ...this.state.paginationForm,\r\n          [type]: value,\r\n        },\r\n      },\r\n      () => this.setRecordListView(),\r\n      console.log(\r\n        \"paginationForm: \" + JSON.stringify(this.state.paginationForm)\r\n      )\r\n    );\r\n  };\r\n\r\n  setFilterForm = (type, value) => {\r\n    console.log(\"setFilterForm\");\r\n    console.log(\"type: \" + type);\r\n    console.log(\"value: \" + value);\r\n\r\n    this.setState(\r\n      {\r\n        filterForm: {\r\n          ...this.state.filterForm,\r\n          [type]: value,\r\n        },\r\n      },\r\n      () => {\r\n        console.log(\"filterForm: \" + JSON.stringify(this.state.filterForm));\r\n      }\r\n    );\r\n  };\r\n}\r\n\r\nexport default RecordView;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport Constant from \"../../global/Constant.json\";\r\n\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Accordion from \"react-bootstrap/Accordion\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\n// font-awesome\r\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n// import { faPen } from \"@fortawesome/free-solid-svg-icons\";\r\n// import { faTrashAlt } from \"@fortawesome/free-regular-svg-icons\";\r\n\r\n// import { SwitchRecType } from \"../../layouts/switch/Switch\";\r\n\r\nimport * as Global from \"../../global/GlobalUtil\";\r\n\r\nimport {\r\n  apiGetUserList,\r\n  apiGetCategoryList,\r\n  apiGetSubcategoryList,\r\n  apiGetRecordTypeList,\r\n} from \"../../global/GlobalAPI\";\r\n\r\nimport {\r\n  EditRecordModal,\r\n  DeleteRecordModal,\r\n  // FailedModal,\r\n  // SuccessModal,\r\n} from \"../../layouts/modal/Modal\";\r\n\r\nclass RecordView extends Component {\r\n  state = {\r\n    // modal controller\r\n    editRecordModal: false,\r\n    deleteRecordModal: false,\r\n\r\n    userList: [],\r\n    recordList: [],\r\n    categoryList: [],\r\n\r\n    recordData: {},\r\n\r\n    // variable\r\n    summaryResponse: {\r\n      isOpenBalanceAvailable: false,\r\n      openBalance: 0,\r\n      totalRevenue: 0,\r\n      totalExpense: 0,\r\n      total: 0,\r\n      summary: [],\r\n    },\r\n\r\n    total: 0,\r\n    totalRevenue: 0,\r\n    totalExpense: 0,\r\n    openBalance: 0,\r\n    summary: [],\r\n\r\n    filterForm: {\r\n      fromYear: Global.getCurrentYear(),\r\n      toYear: Global.getCurrentYear(),\r\n      name: \"\",\r\n    },\r\n  };\r\n\r\n  css = {\r\n    containerStyle1: \"border-2-gray rounded p-3\",\r\n    divStyle1: \"py-2 px-3\",\r\n    inputStyle1: \"width-100p\",\r\n    switchCatTypeActive: \"text-center btn-blue py-1 border-2-blue rounded-pill\",\r\n    switchCatTypeNonactive:\r\n      \"text-center btn-white py-1 border-2-gray rounded-pill\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.apiGetUserList();\r\n    // this.apiGetRecordSummary();\r\n  }\r\n\r\n  render() {\r\n    // let date = this.state.inputYear;\r\n    console.log(\"current month: \" + Global.getCurrentMonth());\r\n    return (\r\n      <div>\r\n        <br />\r\n        <EditRecordModal\r\n          show={this.state.editRecordModal}\r\n          value={this.state.recordData}\r\n          category={this.state.categoryList}\r\n          onHide={() => this.setState({ editRecordModal: false })}\r\n        />\r\n\r\n        <DeleteRecordModal\r\n          show={this.state.deleteRecordModal}\r\n          onHide={() => this.setState({ deleteRecordModal: false })}\r\n        />\r\n\r\n        {/* <Container className={this.css.containerStyle1}> */}\r\n        <Row>\r\n          <Col>\r\n            {/* <h5>Search</h5>\r\n              <hr /> */}\r\n          </Col>\r\n        </Row>\r\n        {/*<div className=\"d-flex flex-row height-20vh\">\r\n             <div className=\"d-flex flex-column width-25p scroll\"></div>\r\n\r\n            <div className=\"d-flex flex-column width-75p pl-3 \"> */}\r\n        {/* <Form>\r\n            <Form.Row>\r\n              <Form.Group as={Col} controlId=\"formGridCity\">\r\n                <Form.Label>User</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  list=\"user\"\r\n                  defaultValue={this.state.inputUserName}\r\n                  onChange={this.switchUser}\r\n                ></Form.Control>\r\n              </Form.Group>\r\n              <Form.Group as={Col} controlId=\"formGridCity\">\r\n                <Form.Label>From Year</Form.Label>\r\n                <Form.Control\r\n                  as=\"select\"\r\n                  defaultValue={Global.getCurrentYear()}\r\n                  onChange={this.setInputFromYear}\r\n                >\r\n                  <option>2021</option>\r\n                  <option>2020</option>\r\n                </Form.Control>\r\n              </Form.Group>\r\n              <Form.Group as={Col} controlId=\"formGridCity\">\r\n                <Form.Label>To Year</Form.Label>\r\n                <Form.Control\r\n                  as=\"select\"\r\n                  defaultValue={Global.getCurrentYear()}\r\n                  onChange={this.setInputToYear}\r\n                >\r\n                  <option>2021</option>\r\n                  <option>2020</option>\r\n                </Form.Control>\r\n              </Form.Group>\r\n            </Form.Row>\r\n            <Form.Row>\r\n              <Form.Group as={Col} controlId=\"formBasicCheckbox\">\r\n                <Form.Check type=\"checkbox\" label=\"Exclude 'Open Balance'\" />\r\n              </Form.Group>\r\n            </Form.Row>\r\n            <input\r\n              variant=\"primary\"\r\n              type=\"button\"\r\n              value=\"Search\"\r\n              className=\"rounded-pill bg-primary text-white border-none py-1 width-20p\"\r\n              onClick={this.apiGetRecordSummary}\r\n            />\r\n          </Form> */}\r\n        {/* </Container> */}\r\n        <br />\r\n\r\n        <Container fluid>\r\n          <Row>\r\n            <Col lg={1}></Col>\r\n            <Col className={this.css.containerStyle1 + \" mr-2\"}>\r\n              <h5>Open Balance</h5>\r\n              <span\r\n                className={\r\n                  this.state.summaryResponse.isOpenBalanceAvailable\r\n                    ? \"\"\r\n                    : \"text-red\"\r\n                }\r\n              >\r\n                {Global.amountDisplayConverter(this.state.openBalance)}\r\n              </span>\r\n            </Col>\r\n\r\n            <Col className={this.css.containerStyle1 + \" mx-1\"}>\r\n              <h5>Revenue</h5>\r\n              <span>\r\n                {Global.amountDisplayConverter(this.state.totalRevenue)}\r\n              </span>\r\n            </Col>\r\n\r\n            <Col className={this.css.containerStyle1 + \" mx-1\"}>\r\n              <h5>Expenses</h5>\r\n              <span>\r\n                {Global.amountDisplayConverter(this.state.totalExpense)}\r\n              </span>\r\n            </Col>\r\n\r\n            <Col className={this.css.containerStyle1 + \" ml-2\"}>\r\n              <h5>Total</h5>\r\n              <span>{Global.amountDisplayConverter(this.state.total)}</span>\r\n            </Col>\r\n            <Col lg={1}></Col>\r\n          </Row>\r\n        </Container>\r\n\r\n        <br />\r\n        <Container fluid>\r\n          <Row>\r\n            <Col lg={1}></Col>\r\n\r\n            <Col sm=\"1\" className=\"px-1\">\r\n              <Form.Control\r\n                size=\"sm\"\r\n                // type=\"text\"\r\n                // list=\"year\"\r\n                as=\"select\"\r\n                value={this.state.filterForm.fromYear}\r\n                onChange={(event) =>\r\n                  this.setFilterForm(Constant.fromYear, event.target.value)\r\n                }\r\n              >\r\n                {Global.getYearList().map((value, index) => (\r\n                  <option>{value.name}</option>\r\n                ))}\r\n              </Form.Control>\r\n            </Col>\r\n            <Col sm=\"1\" className=\"px-1\">\r\n              <Form.Control\r\n                size=\"sm\"\r\n                // type=\"text\"\r\n                // list=\"year\"\r\n                as=\"select\"\r\n                value={this.state.filterForm.toYear}\r\n                onChange={(event) =>\r\n                  this.setFilterForm(Constant.toYear, event.target.value)\r\n                }\r\n              >\r\n                {Global.getYearList().map((value, index) => (\r\n                  <option>{value.name}</option>\r\n                ))}\r\n              </Form.Control>\r\n            </Col>\r\n            <Col sm=\"auto\" className=\"px-1\">\r\n              <Form.Group controlId=\"\">\r\n                <Form.Control\r\n                  size=\"sm\"\r\n                  type=\"text\"\r\n                  list=\"user\"\r\n                  placeholder=\"Name\"\r\n                  value={this.state.filterForm.name}\r\n                  onChange={(event) =>\r\n                    this.setFilterForm(Constant.name, event.target.value)\r\n                  }\r\n                ></Form.Control>\r\n              </Form.Group>\r\n            </Col>\r\n\r\n            <Col sm=\"auto\" className=\"px-1\">\r\n              <Button\r\n                variant=\"primary\"\r\n                size=\"sm\"\r\n                onClick={this.apiGetRecordSummary}\r\n              >\r\n                Search\r\n              </Button>\r\n            </Col>\r\n            <Col sm=\"auto\" className=\"px-1\">\r\n              <Form.Label\r\n                column=\"sm\"\r\n                className=\"px-1\"\r\n                onClick={() => this.setState({ modalEditRecordShow: true })}\r\n              >\r\n                <span>\r\n                  <u>Filter</u>\r\n                </span>\r\n              </Form.Label>\r\n            </Col>\r\n            <Col lg={1}></Col>\r\n          </Row>\r\n        </Container>\r\n\r\n        {/* <Container className={this.css.containerStyle1}> */}\r\n        <Container fluid>\r\n          <Row>\r\n            <Col lg={1}></Col>\r\n            <Col>\r\n              <div className=\"d-flex flex-column scroll height-70vh\">\r\n                {this.layoutRecordList()}\r\n              </div>\r\n            </Col>\r\n            <Col lg={1}></Col>\r\n          </Row>\r\n        </Container>\r\n\r\n        <datalist id=\"user\">\r\n          {Global.getLayoutDatalist(this.state.userList)}\r\n        </datalist>\r\n\r\n        <datalist id=\"year\">\r\n          {Global.getLayoutDatalist(Global.getYearList())}\r\n        </datalist>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Layout function\r\n  layoutRecordList = () => {\r\n    return this.state.summary.map((value, index) => (\r\n      <div className=\"py-1 \">\r\n        {/* {date !== value.date ? (date = value.date) : (displayDate = false)}\r\n      {displayDate ? <span>{value.date}</span> : <span></span>} */}\r\n        <span></span>\r\n\r\n        <Accordion>\r\n          {/* {console.log(value.date.substring(5, 7))} */}\r\n          <Card\r\n            className={\r\n              \"bg-white\"\r\n              // parseInt(value.date.substring(5, 7)) % 2 == 0\r\n              //   ? \"bg-light\"\r\n              //   : \"bg-white\"\r\n            }\r\n          >\r\n            <Accordion.Toggle as={Card.Header} variant=\"link\" eventKey=\"0\">\r\n              <Row>\r\n                <Col md={2} className=\"font-weight-bold py-1\">\r\n                  <span>Year</span>\r\n                  <br />\r\n                  <span>{value.year}</span>\r\n                </Col>\r\n\r\n                <Col className=\"text-center font-weight-bold py-1 \">\r\n                  <span>Revenue</span>\r\n                  <br />\r\n                  <span>\r\n                    {Global.amountDisplayConverter(value.totalRevenue)}\r\n                  </span>\r\n                </Col>\r\n                <Col className=\"text-center font-weight-bold py-1\">\r\n                  <span>Expense</span>\r\n                  <br />\r\n                  <span>\r\n                    {Global.amountDisplayConverter(value.totalExpense)}\r\n                  </span>\r\n                </Col>\r\n                <Col className=\"text-center font-weight-bold py-1\">\r\n                  <span>Total</span>\r\n                  <br />\r\n                  <span>{Global.amountDisplayConverter(value.total)}</span>\r\n                </Col>\r\n              </Row>\r\n            </Accordion.Toggle>\r\n            <Accordion.Collapse eventKey=\"0\">\r\n              <Card.Body>\r\n                {/* {this.state.recordList.map((value, index) => (\r\n\r\n              )} */}\r\n                {value.monthlySummary.map((value, index) => (\r\n                  <Row>\r\n                    <Col>\r\n                      <p>{value.month}</p>\r\n                    </Col>\r\n                    <Col>\r\n                      <p>{Global.amountDisplayConverter(value.totalRevenue)}</p>\r\n                    </Col>\r\n                    <Col>\r\n                      <p>{Global.amountDisplayConverter(value.totalExpense)}</p>\r\n                    </Col>\r\n                    <Col>\r\n                      <p>{Global.amountDisplayConverter(value.total)}</p>\r\n                    </Col>\r\n                  </Row>\r\n                ))}\r\n              </Card.Body>\r\n            </Accordion.Collapse>\r\n          </Card>\r\n        </Accordion>\r\n      </div>\r\n    ));\r\n  };\r\n  // Layout function end\r\n\r\n  // API function\r\n  apiGetCategoryList = async () => {\r\n    // console.log(\"type: \" + type);\r\n    await apiGetCategoryList().then((response) => {\r\n      if (response.message === \"success\") {\r\n        this.setState({ categoryList: response.data });\r\n      }\r\n    });\r\n  };\r\n\r\n  apiGetUserList = async () => {\r\n    // GET user list\r\n\r\n    await apiGetUserList().then((response) => {\r\n      if (response.message === \"success\") {\r\n        this.setState({ userList: response.data });\r\n      }\r\n    });\r\n  };\r\n\r\n  apiGetRecordSummary = () => {\r\n    let userId;\r\n    let name = this.state.filterForm.name;\r\n    let fromYear = this.state.filterForm.fromYear;\r\n    let toYear = this.state.filterForm.toYear;\r\n\r\n    console.log(\r\n      \"apiGetRecordSummary filterForm: \" + JSON.stringify(this.state.filterForm)\r\n    );\r\n\r\n    if (fromYear === \"\") {\r\n      fromYear = Global.getCurrentYear();\r\n    }\r\n\r\n    if (toYear === \"\") {\r\n      toYear = Global.getCurrentYear();\r\n    }\r\n\r\n    userId = Global.getIndexByName(this.state.userList, name);\r\n\r\n    let url =\r\n      process.env.REACT_APP_API_GET_RECORD_SUMMARY +\r\n      \"?userId=\" +\r\n      userId +\r\n      \"&fromYear=\" +\r\n      fromYear +\r\n      \"&toYear=\" +\r\n      toYear;\r\n    console.log(\"URL: \" + url);\r\n\r\n    axios.get(url).then((response) => {\r\n      if (response.data.message === \"success\") {\r\n        let totalExpense = 0;\r\n        let totalRevenue = 0;\r\n        let total = 0;\r\n        let openBalance = 0;\r\n        let summary;\r\n        let isOpenBalanceAvailable;\r\n\r\n        console.log(\"result: \" + JSON.stringify(response.data));\r\n\r\n        isOpenBalanceAvailable = response.data.data[0].isOpenBalanceAvailable;\r\n        openBalance = response.data.data[0].openBalance;\r\n        totalRevenue = response.data.data[0].totalRevenue;\r\n        totalExpense = response.data.data[0].totalExpense;\r\n        total = response.data.data[0].total;\r\n        summary = response.data.data[0].summary;\r\n\r\n        console.log(\"totalExpense: \" + totalExpense);\r\n        console.log(\"totalRevenue: \" + totalRevenue);\r\n        console.log(\"summary: \" + JSON.stringify(summary));\r\n\r\n        this.setSummaryResponse(\r\n          Constant.isOpenBalanceAvailable,\r\n          isOpenBalanceAvailable\r\n        );\r\n        this.setSummaryResponse(Constant.openBalance, openBalance);\r\n\r\n        this.setState({\r\n          // recordList: response.data.data,\r\n          openBalance: openBalance,\r\n          totalRevenue: totalRevenue,\r\n          totalExpense: totalExpense,\r\n          total: total,\r\n          summary: summary,\r\n        });\r\n      }\r\n      console.log(\"recordList: \" + this.state.recordList);\r\n    });\r\n  };\r\n  // API function end\r\n\r\n  // editRecord = (value) => {\r\n  //   this.setState({ editRecordModal: true, recordData: value });\r\n  // };\r\n\r\n  // deleteRecord = (value) => {\r\n  //   this.setState({ deleteRecordModal: true, recordData: value });\r\n  // };\r\n\r\n  // switchRecordType = (event) => {\r\n  //   let type = event.target.value;\r\n  //   console.log(\"type: \" + type);\r\n  //   if (this.state.recordType !== type) {\r\n  //     console.log(\"switch record type\");\r\n  //     this.setState({ recordType: type });\r\n  //     //this.apiGetCategoryList(type);\r\n  //   }\r\n  // };\r\n\r\n  setFilterForm = (type, value) => {\r\n    console.log(\"setFilterForm\");\r\n    console.log(\"type: \" + type);\r\n    console.log(\"value: \" + value);\r\n\r\n    this.setState(\r\n      {\r\n        filterForm: {\r\n          ...this.state.filterForm,\r\n          [type]: value,\r\n        },\r\n      },\r\n      () => {\r\n        console.log(\"filterForm: \" + JSON.stringify(this.state.filterForm));\r\n      }\r\n    );\r\n  };\r\n\r\n  setSummaryResponse = (type, value) => {\r\n    console.log(\"setSummaryResponse\");\r\n    console.log(\"type: \" + type);\r\n    console.log(\"value: \" + value);\r\n\r\n    this.setState(\r\n      {\r\n        summaryResponse: {\r\n          ...this.state.summaryResponse,\r\n          [type]: value,\r\n        },\r\n      },\r\n      () => {\r\n        console.log(\r\n          \"summaryResponse: \" + JSON.stringify(this.state.summaryResponse)\r\n        );\r\n      }\r\n    );\r\n  };\r\n}\r\n\r\nexport default RecordView;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n// import { useAsync } from \"react-async\";\r\nimport Constant from \"../../global/Constant.json\";\r\n\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport FormControl from \"react-bootstrap/FormControl\";\r\n\r\n// font-awesome\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPen } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faTrashAlt } from \"@fortawesome/free-regular-svg-icons\";\r\n\r\nimport * as Global from \"../../global/GlobalUtil\";\r\n\r\nimport {\r\n  apiGetRecordTypeList,\r\n  apiGetCategoryList,\r\n  apiGetSubcategoryList,\r\n  apiGetUserList,\r\n  apiGetSettlementList,\r\n} from \"../../global/GlobalAPI\";\r\n\r\nimport {\r\n  SuccessModal,\r\n  FailedModal,\r\n  ConfirmModal,\r\n} from \"../../layouts/modal/Modal\";\r\n\r\nclass Settlement extends Component {\r\n  state = {\r\n    recordTypeList: [],\r\n    categoryList: [],\r\n    subcategoryList: [],\r\n    userList: [],\r\n    settlementList: [],\r\n\r\n    // default value\r\n    searchForm: {\r\n      user: \"\",\r\n      startDate: \"\",\r\n      endDate: \"\",\r\n    },\r\n\r\n    modalInsertForm: {\r\n      insertType: \"\",\r\n      recordType: \"\",\r\n      category: \"\",\r\n      subcategory: \"\",\r\n    },\r\n\r\n    modalEditForm: {\r\n      editType: \"\",\r\n      id: \"\",\r\n      name: \"\",\r\n    },\r\n\r\n    modalSettlementForm: {\r\n      modalShow: false,\r\n      user: \"\",\r\n      year: \"\",\r\n      isOpenBalanceAvailable: \"\",\r\n      openBalance: 0,\r\n      amountIn: 0,\r\n      amountOut: 0,\r\n      balance: 0,\r\n    },\r\n\r\n    successModalShow: false,\r\n    failedModalShow: false,\r\n    confirmModalShow: false,\r\n    modalAddRecordShow: false,\r\n    modalEditRecordShow: false,\r\n  };\r\n\r\n  css = {\r\n    containerStyle1: \"border-2-gray rounded p-3\",\r\n    divStyle1: \"py-2 px-3\",\r\n    inputStyle1: \"width-100p\",\r\n    btnSubmit: \"width-100p rounded-pill btn-green border-none py-1\",\r\n    btnReset: \"width-100p rounded-pill btn-blue py-1\",\r\n    btnClear: \"width-100p rounded-pill btn-yellow border-none py-1\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.apiGetUserList();\r\n  }\r\n\r\n  render() {\r\n    if (this.state.inputDate === \"\") {\r\n      var date = new Date();\r\n      var month =\r\n        (date.getMonth() + 1).toString().length === 1\r\n          ? \"0\" + (date.getMonth() + 1)\r\n          : date.getMonth() + 1;\r\n      var day =\r\n        date.getDate().toString().length === 1\r\n          ? \"0\" + date.getDate()\r\n          : date.getDate();\r\n\r\n      var todayDate = date.getFullYear() + \"-\" + month + \"-\" + day;\r\n      console.log(\"todayDate:\" + todayDate);\r\n      this.setState({ inputDate: todayDate });\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <br />\r\n        {/* Modal */}\r\n        <SuccessModal\r\n          show={this.state.successModalShow}\r\n          onHide={() => this.setState({ successModalShow: false })}\r\n        />\r\n        <FailedModal\r\n          show={this.state.failedModalShow}\r\n          errMsg={this.state.modalFailedErrMsg}\r\n          onHide={() => this.setState({ failedModalShow: false })}\r\n        />\r\n\r\n        {this.layoutModalSettlement()}\r\n\r\n        <Container fluid className=\"\">\r\n          <Row>\r\n            <Col lg={1}></Col>\r\n\r\n            <Col sm=\"1\" className=\"px-1\">\r\n              <Form.Control\r\n                size=\"sm\"\r\n                // type=\"text\"\r\n                // list=\"year\"\r\n                as=\"select\"\r\n                value={this.state.searchForm.fromYear}\r\n                onChange={(event) =>\r\n                  this.setSearchForm(Constant.fromYear, event.target.value)\r\n                }\r\n              >\r\n                {Global.getYearList().map((value, index) => (\r\n                  <option>{value.name}</option>\r\n                ))}\r\n              </Form.Control>\r\n            </Col>\r\n            <Col sm=\"1\" className=\"px-1\">\r\n              <Form.Control\r\n                size=\"sm\"\r\n                // type=\"text\"\r\n                // list=\"year\"\r\n                as=\"select\"\r\n                value={this.state.searchForm.toYear}\r\n                onChange={(event) =>\r\n                  this.setSearchForm(Constant.toYear, event.target.value)\r\n                }\r\n              >\r\n                {Global.getYearList().map((value, index) => (\r\n                  <option>{value.name}</option>\r\n                ))}\r\n              </Form.Control>\r\n            </Col>\r\n            <Col sm=\"2\" className=\"px-1\">\r\n              <Form.Group controlId=\"\">\r\n                <Form.Control\r\n                  size=\"sm\"\r\n                  type=\"text\"\r\n                  list=\"user\"\r\n                  placeholder=\"Name\"\r\n                  value={this.state.searchForm.name}\r\n                  onChange={(event) =>\r\n                    this.setSearchForm(Constant.user, event.target.value)\r\n                  }\r\n                ></Form.Control>\r\n              </Form.Group>\r\n            </Col>\r\n\r\n            <Col sm={2}>\r\n              <Row>\r\n                <Col sm=\"auto\" className=\"px-1\">\r\n                  <Button\r\n                    variant=\"primary\"\r\n                    size=\"sm\"\r\n                    onClick={() => this.apiGetSettlementList()}\r\n                  >\r\n                    Search\r\n                  </Button>\r\n                </Col>\r\n                <Col sm=\"auto\" className=\"px-1\">\r\n                  <Form.Label\r\n                    column=\"sm\"\r\n                    className=\"px-1\"\r\n                    onClick={() => this.setState({ modalEditRecordShow: true })}\r\n                  >\r\n                    <span>\r\n                      <u>Filter</u>\r\n                    </span>\r\n                  </Form.Label>\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n\r\n            <Col sm={2}></Col>\r\n            <Col sm={2} className=\"px-1\">\r\n              <Button\r\n                className=\"float-right\"\r\n                variant=\"primary\"\r\n                size=\"sm\"\r\n                onClick={() =>\r\n                  this.setState({\r\n                    modalSettlementForm: {\r\n                      ...this.state.modalSettlementForm,\r\n                      modalShow: true,\r\n                    },\r\n                  })\r\n                }\r\n              >\r\n                Settlement\r\n              </Button>\r\n            </Col>\r\n            <Col lg={1}></Col>\r\n          </Row>\r\n        </Container>\r\n\r\n        <Container fluid>\r\n          <Row>\r\n            <Col lg={1}></Col>\r\n            <Col className=\"px-1\">\r\n              <Table>\r\n                {this.layoutSearchFormTableViewHead()}\r\n                {this.layoutSearchFormTableViewRow()}\r\n              </Table>\r\n            </Col>\r\n            <Col lg={1}></Col>\r\n          </Row>\r\n        </Container>\r\n\r\n        <datalist id=\"user\">\r\n          {Global.getLayoutDatalist(this.state.userList)}\r\n        </datalist>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Layout function\r\n  layoutSearchFormTableViewHead = () => {\r\n    return (\r\n      <thead>\r\n        <tr>\r\n          <th className={this.css.td_style}>Date</th>\r\n          <th className={this.css.td_style}>Name</th>\r\n          <th className={this.css.td_style}>Open Balance</th>\r\n          <th className={this.css.td_style}>Amount In</th>\r\n          <th className={this.css.td_style}>Amount Out</th>\r\n          <th className={this.css.td_style}>Balance</th>\r\n          <th className={this.css.td_style}>Actions</th>\r\n        </tr>\r\n      </thead>\r\n    );\r\n  };\r\n\r\n  layoutSearchFormTableViewRow = () => {\r\n    return (\r\n      <tbody>\r\n        {this.state.settlementList.map((value, index) => (\r\n          <tr>\r\n            <td className={this.css.td_style}>{value.date}</td>\r\n            <td className={this.css.td_style}>{value.user}</td>\r\n            <td className={this.css.td_style}>\r\n              {Global.amountDisplayConverter(value.open_balance)}\r\n            </td>\r\n            <td className={this.css.td_style}>\r\n              {Global.amountDisplayConverter(value.amount_in)}\r\n            </td>\r\n            <td className={this.css.td_style}>\r\n              {Global.amountDisplayConverter(value.amount_out)}\r\n            </td>\r\n            <td className={this.css.td_style}>\r\n              {Global.amountDisplayConverter(value.balance)}\r\n            </td>\r\n            <td className={this.css.td_style}>\r\n              <FontAwesomeIcon\r\n                icon={faPen}\r\n                size=\"1x\"\r\n                className=\"mx-1\"\r\n                onClick={() =>\r\n                  this.setState({\r\n                    modalEditRecordShow: true,\r\n                    modalEditForm: {\r\n                      ...this.state.modalEditForm,\r\n                      editType: Constant.recordType,\r\n                      id: value.record_type_id,\r\n                      name: value.name,\r\n                    },\r\n                  })\r\n                }\r\n              />\r\n              <FontAwesomeIcon\r\n                icon={faTrashAlt}\r\n                size=\"1x\"\r\n                className=\"mx-1\"\r\n                onClick={() => this.deleteRecord(value)}\r\n              />\r\n            </td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    );\r\n  };\r\n\r\n  layoutModalSettlement = () => {\r\n    return (\r\n      <Modal\r\n        size=\"lg\"\r\n        backdrop=\"true\"\r\n        animation=\"true\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n        show={this.state.modalSettlementForm.modalShow}\r\n      >\r\n        <Modal.Header>\r\n          <Modal.Title className=\"text-center\">Settlement</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body className=\"show-grid\">\r\n          <Form className=\"\">\r\n            <Row className=\"mb-3\">\r\n              <Col>\r\n                <Form.Label>User</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  list=\"user\"\r\n                  onChange={(event) =>\r\n                    this.setModalSettlementForm(\r\n                      Constant.user,\r\n                      event.target.value\r\n                    )\r\n                  }\r\n                  // readOnly\r\n                  // value={props.value.record_id}\r\n                />\r\n              </Col>\r\n              <Col>\r\n                <Form.Label>Year</Form.Label>\r\n                <Form.Control\r\n                  // type=\"text\"\r\n                  // list=\"year\"\r\n                  as=\"select\"\r\n                  value={this.state.modalSettlementForm.year}\r\n                  onChange={(event) =>\r\n                    this.setModalSettlementForm(\r\n                      Constant.year,\r\n                      event.target.value\r\n                    )\r\n                  }\r\n                >\r\n                  {Global.getYearList().map((value, index) => (\r\n                    <option>{value.name}</option>\r\n                  ))}\r\n                </Form.Control>\r\n                {/* <Form.Control\r\n                  type=\"month\"\r\n                  defaultValue={this.state.modalEditForm.name}\r\n                  onChange={(event) =>\r\n                    this.setModalSettlementForm(\r\n                      Constant.date,\r\n                      event.target.value\r\n                    )\r\n                  }\r\n                  // readOnly\r\n                  // value={props.value.record_id}\r\n                /> */}\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <Button\r\n                  variant=\"primary\"\r\n                  onClick={() => this.apiGetSettlementCheck()}\r\n                >\r\n                  Check\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n          <hr />\r\n\r\n          <Row></Row>\r\n          <Form>\r\n            <InputGroup className=\"mb-3\">\r\n              <InputGroup.Text id=\"basic-addon1\" className=\"width-25p\">\r\n                Open Balance\r\n              </InputGroup.Text>\r\n              <FormControl\r\n                placeholder=\"Username\"\r\n                aria-label=\"Username\"\r\n                aria-describedby=\"basic-addon1\"\r\n                isInvalid={\r\n                  !this.state.modalSettlementForm.isOpenBalanceAvailable\r\n                }\r\n                value={Global.amountDisplayConverter(\r\n                  this.state.modalSettlementForm.openBalance\r\n                )}\r\n              />\r\n            </InputGroup>\r\n            <InputGroup className=\"mb-3\">\r\n              <InputGroup.Text id=\"basic-addon1\" className=\"width-25p\">\r\n                Amount In\r\n              </InputGroup.Text>\r\n              <FormControl\r\n                placeholder=\"Username\"\r\n                aria-label=\"Username\"\r\n                aria-describedby=\"basic-addon1\"\r\n                value={Global.amountDisplayConverter(\r\n                  this.state.modalSettlementForm.amountIn\r\n                )}\r\n              />\r\n            </InputGroup>\r\n            <InputGroup className=\"mb-3\">\r\n              <InputGroup.Text id=\"basic-addon1\" className=\"center width-25p\">\r\n                Amount Out\r\n              </InputGroup.Text>\r\n              <FormControl\r\n                placeholder=\"Username\"\r\n                aria-label=\"Username\"\r\n                aria-describedby=\"basic-addon1\"\r\n                value={Global.amountDisplayConverter(\r\n                  this.state.modalSettlementForm.amountOut\r\n                )}\r\n              />\r\n            </InputGroup>\r\n            <InputGroup className=\"mb-3\">\r\n              <InputGroup.Text id=\"basic-addon1\" className=\"center width-25p\">\r\n                Balance\r\n              </InputGroup.Text>\r\n              <FormControl\r\n                placeholder=\"Username\"\r\n                aria-label=\"Username\"\r\n                aria-describedby=\"basic-addon1\"\r\n                value={Global.amountDisplayConverter(\r\n                  this.state.modalSettlementForm.balance\r\n                )}\r\n              />\r\n            </InputGroup>\r\n          </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            variant=\"secondary\"\r\n            onClick={() =>\r\n              this.setState({\r\n                modalSettlementForm: {\r\n                  ...this.state.modalSettlementForm,\r\n                  modalShow: false,\r\n                },\r\n              })\r\n            }\r\n          >\r\n            Close\r\n          </Button>\r\n\r\n          <Button\r\n            variant=\"primary\"\r\n            onClick={() => this.apiPostSettlementCreate()}\r\n          >\r\n            Save Changes\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n  };\r\n\r\n  // Layout function end\r\n\r\n  // API function\r\n  apiGetUserList = async () => {\r\n    await apiGetUserList().then((response) => {\r\n      if (response.message === \"success\") {\r\n        this.setState({ userList: response.data });\r\n      }\r\n    });\r\n  };\r\n\r\n  apiGetRecordTypeList = async () => {\r\n    // GET user list\r\n    await apiGetRecordTypeList().then((response) => {\r\n      if (response.message === \"success\") {\r\n        console.log(\"recordTypeList: \" + JSON.stringify(response.data));\r\n        this.setState({ recordTypeList: response.data });\r\n      }\r\n    });\r\n  };\r\n\r\n  apiGetCategoryList = async () => {\r\n    // console.log(\"type: \" + type);\r\n    await apiGetCategoryList().then((response) => {\r\n      if (response.message === \"success\") {\r\n        this.setState({ categoryList: response.data });\r\n      }\r\n    });\r\n  };\r\n\r\n  apiGetSettlementList = async () => {\r\n    // Used for \"searchForm\"\r\n    // \"modalInsertForm\" didn't using it\r\n    let searchForm = this.state.searchForm;\r\n    let userId = Global.getIndexByName(this.state.userList, searchForm.user);\r\n\r\n    searchForm = { ...this.state.searchForm, userId: userId };\r\n\r\n    await apiGetSettlementList(searchForm).then((response) => {\r\n      if (response.message === \"success\") {\r\n        this.setState({ settlementList: response.data });\r\n      }\r\n    });\r\n  };\r\n\r\n  apiGetSettlementCheck = () => {\r\n    let userId;\r\n    let name = this.state.modalSettlementForm.user;\r\n    let fromYear = this.state.modalSettlementForm.year;\r\n    let toYear = this.state.modalSettlementForm.year;\r\n\r\n    console.log(\r\n      \"apiGetSettlementCheck modalSettlementForm: \" +\r\n        JSON.stringify(this.state.modalSettlementForm)\r\n    );\r\n\r\n    if (fromYear === \"\") {\r\n      fromYear = Global.getCurrentYear();\r\n    }\r\n\r\n    if (toYear === \"\") {\r\n      toYear = Global.getCurrentYear();\r\n    }\r\n\r\n    userId = Global.getIndexByName(this.state.userList, name);\r\n\r\n    let url =\r\n      process.env.REACT_APP_API_GET_RECORD_SUMMARY +\r\n      \"?userId=\" +\r\n      userId +\r\n      \"&fromYear=\" +\r\n      fromYear +\r\n      \"&toYear=\" +\r\n      toYear;\r\n    console.log(\"URL: \" + url);\r\n\r\n    axios.get(url).then((response) => {\r\n      if (response.data.message === \"success\") {\r\n        let totalExpense = 0;\r\n        let totalRevenue = 0;\r\n        let balance = 0;\r\n        let total = 0;\r\n        let openBalance = 0;\r\n        let summary;\r\n        let isOpenBalanceAvailable = \"\";\r\n\r\n        console.log(\"result: \" + JSON.stringify(response.data));\r\n\r\n        isOpenBalanceAvailable = response.data.data[0].isOpenBalanceAvailable;\r\n        openBalance = response.data.data[0].openBalance;\r\n        totalRevenue = response.data.data[0].totalRevenue;\r\n        totalExpense = response.data.data[0].totalExpense;\r\n        total = response.data.data[0].total;\r\n        summary = response.data.data[0].summary;\r\n\r\n        balance = openBalance + totalRevenue + totalExpense;\r\n\r\n        this.setModalSettlementForm(\r\n          Constant.isOpenBalanceAvailable,\r\n          isOpenBalanceAvailable\r\n        );\r\n        this.setModalSettlementForm(Constant.openBalance, openBalance);\r\n        this.setModalSettlementForm(Constant.amountIn, totalRevenue);\r\n        this.setModalSettlementForm(Constant.amountOut, totalExpense);\r\n        this.setModalSettlementForm(Constant.balance, balance);\r\n\r\n        console.log(\"totalExpense: \" + totalExpense);\r\n        console.log(\"totalRevenue: \" + totalRevenue);\r\n        console.log(\"summary: \" + JSON.stringify(summary));\r\n      }\r\n    });\r\n  };\r\n\r\n  apiPostSettlementCreate = () => {\r\n    // POST\r\n    let url =\r\n      process.env.REACT_APP_BASE_URL +\r\n      process.env.REACT_APP_SETTLEMENT_POST_CREATE;\r\n    let error = false;\r\n    let errMsg = \"\";\r\n\r\n    let settlementForm = this.state.modalSettlementForm;\r\n\r\n    let userId = Global.getIndexByName(\r\n      this.state.userList,\r\n      settlementForm.user\r\n    );\r\n\r\n    settlementForm = { ...this.state.modalSettlementForm, userId: userId };\r\n\r\n    console.log(\"URL: \" + url);\r\n    console.log(\r\n      \"apiPostSettlementCreate settlementForm: \" +\r\n        JSON.stringify(settlementForm)\r\n    );\r\n\r\n    if (Global.isEmpty(settlementForm.user)) {\r\n      error = true;\r\n      errMsg = \"Empty Name\";\r\n    }\r\n\r\n    if (error) {\r\n      this.setState({ failedModalShow: true, modalFailedErrMsg: errMsg });\r\n    } else {\r\n      axios\r\n        .post(url, settlementForm)\r\n        .then((response) => {\r\n          console.log(\"response: \" + JSON.stringify(response));\r\n          if (response.data.message === \"success\") {\r\n            console.log(\"set successModalShow true\");\r\n            this.setState({ successModalShow: true });\r\n          } else {\r\n            console.log(\"set failedModalShow true\");\r\n            this.setState({\r\n              failedModalShow: true,\r\n              modalFailedErrMsg: response.data.message,\r\n            });\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          //console.log(\"error.response: \" + JSON.stringify(error.response));\r\n\r\n          console.log(\r\n            \"error.response.data: \" + JSON.stringify(error.response.data)\r\n          );\r\n          this.setState({\r\n            failedModalShow: true,\r\n            modalFailedErrMsg: error.response.data.message,\r\n          });\r\n        });\r\n    }\r\n  };\r\n  // API function end\r\n\r\n  // Update state value\r\n  setSearchForm = (type, value) => {\r\n    console.log(\"setSearchForm\");\r\n    console.log(\"type: \" + type);\r\n    console.log(\"value: \" + value);\r\n\r\n    this.setState(\r\n      {\r\n        searchForm: {\r\n          ...this.state.searchForm,\r\n          [type]: value,\r\n        },\r\n      },\r\n      () => console.log(\"searchForm: \" + JSON.stringify(this.state.searchForm))\r\n    );\r\n  };\r\n\r\n  setModalEditForm = (type, value) => {\r\n    console.log(\"setModalEditForm\");\r\n    console.log(\"type: \" + type);\r\n    console.log(\"value: \" + value);\r\n\r\n    this.setState(\r\n      {\r\n        modalEditForm: {\r\n          ...this.state.modalEditForm,\r\n          [type]: value,\r\n        },\r\n      },\r\n      () =>\r\n        console.log(\r\n          \"modalEditForm: \" + JSON.stringify(this.state.modalEditForm)\r\n        )\r\n    );\r\n  };\r\n\r\n  setModalSettlementForm = (type, value) => {\r\n    console.log(\"setModalSettlementForm\");\r\n    console.log(\"type: \" + type);\r\n    console.log(\"value: \" + value);\r\n\r\n    this.setState(\r\n      {\r\n        modalSettlementForm: {\r\n          ...this.state.modalSettlementForm,\r\n          [type]: value,\r\n        },\r\n      },\r\n      () =>\r\n        console.log(\r\n          \"setModalSettlementForm: \" +\r\n            JSON.stringify(this.state.modalSettlementForm)\r\n        )\r\n    );\r\n  };\r\n\r\n  // Update state value end\r\n}\r\n\r\nexport default Settlement;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport Constant from \"../../global/Constant.json\";\r\n\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Accordion from \"react-bootstrap/Accordion\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport Pagination from \"react-bootstrap/Pagination\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\n\r\n// font-awesome\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPen } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faTrashAlt } from \"@fortawesome/free-regular-svg-icons\";\r\n\r\n// import { SwitchRecType } from \"../../layouts/switch/Switch\";\r\n\r\nimport * as Global from \"../../global/GlobalUtil\";\r\n\r\nimport {\r\n  apiGetUserList,\r\n  apiGetCategoryList,\r\n  apiGetSubcategoryList,\r\n  apiGetRecordTypeList,\r\n} from \"../../global/GlobalAPI\";\r\n\r\nimport {\r\n  EditRecordModal,\r\n  DeleteRecordModal,\r\n  // SuccessModal,\r\n} from \"../../layouts/modal/Modal\";\r\n\r\nclass RecordView extends Component {\r\n  state = {\r\n    userList: [],\r\n    recordList: [],\r\n    recordListByPage: [],\r\n    recordTypeList: [],\r\n    categoryList: [],\r\n    subcategoryList: [],\r\n\r\n    filterForm: {\r\n      modalShow: false,\r\n      date: \"\",\r\n      month: Global.getCurrentYear() + \"-\" + Global.getCurrentMonth(),\r\n      user: \"\",\r\n      recordType: \"\",\r\n      category: \"\",\r\n      subcategory: \"\",\r\n    },\r\n\r\n    recordData: {},\r\n    totalExpenses: 0,\r\n    totalRevenue: 0,\r\n    grandTotal: 0,\r\n\r\n    editRecordModal: false,\r\n    deleteRecordModal: false,\r\n    modalEditRecordShow: false,\r\n\r\n    paginationForm: {\r\n      pageTotalItem: 12,\r\n      currentPage: 1,\r\n      totalPage: 1,\r\n    },\r\n  };\r\n\r\n  css = {\r\n    containerStyle1: \"border-2-gray rounded p-3\",\r\n    divStyle1: \"py-2 px-3\",\r\n    inputStyle1: \"width-100p\",\r\n    switchCatTypeActive: \"text-center btn-blue py-1 border-2-blue rounded-pill\",\r\n    switchCatTypeNonactive:\r\n      \"text-center btn-white py-1 border-2-gray rounded-pill\",\r\n    td_style: \"p-1\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.apiGetUserList();\r\n    this.apiGetRecordList();\r\n    this.apiGetRecordTypeList();\r\n    this.apiGetCategoryList();\r\n    this.apiGetSubcategoryList();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <br />\r\n        <EditRecordModal\r\n          show={this.state.editRecordModal}\r\n          value={this.state.recordData}\r\n          category={this.state.categoryList}\r\n          onHide={() => this.setState({ editRecordModal: false })}\r\n        />\r\n\r\n        <DeleteRecordModal\r\n          show={this.state.deleteRecordModal}\r\n          onHide={() => this.setState({ deleteRecordModal: false })}\r\n        />\r\n\r\n        {this.layoutModalFilterRecord()}\r\n\r\n        <Container fluid>\r\n          <Row>\r\n            <Col lg={3}></Col>\r\n            <Col\r\n              className=\"bg-gray rounded py-5\"\r\n              style={{ display: \"flex\", justifyContent: \"center\" }}\r\n            >\r\n              {/* {this.layoutPagination()} */}\r\n\r\n              <Form>\r\n                <h1>Login</h1>\r\n                <br />\r\n                <Form.Group className=\"mb-3\">\r\n                  {/* <Form.Label>Email address</Form.Label> */}\r\n                  <Form.Control type=\"email\" placeholder=\"Enter email\" />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3\">\r\n                  {/* <Form.Label>Password</Form.Label> */}\r\n                  <Form.Control type=\"password\" placeholder=\"Password\" />\r\n                </Form.Group>\r\n                <Form.Group className=\"mb-3\">\r\n                  <Form.Check type=\"checkbox\" label=\"Remember me\" />\r\n                </Form.Group>\r\n                <Button variant=\"primary\" type=\"submit\">\r\n                  Submit\r\n                </Button>\r\n              </Form>\r\n            </Col>\r\n            <Col lg={3}></Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Layout function\r\n\r\n  layoutRecordList = () => {\r\n    let date = \"\";\r\n    let displayDate = false;\r\n    return this.state.recordList.map((value, index) => (\r\n      <div className=\"py-1\">\r\n        {date !== value.date ? (date = value.date) : (displayDate = false)}\r\n        {displayDate ? <span>{value.date}</span> : <span></span>}\r\n        <Accordion>\r\n          {console.log(value.date.substring(5, 7))}\r\n          <Card\r\n            className={\r\n              parseInt(value.date.substring(5, 7)) % 2 === 0\r\n                ? \"bg-light\"\r\n                : \"bg-white\"\r\n            }\r\n          >\r\n            <Accordion.Toggle as={Card.Header} variant=\"link\" eventKey=\"0\">\r\n              <Row>\r\n                <Col md={3} lg={2} className=\"py-1\">\r\n                  <span>{value.date}</span>\r\n                  <br />\r\n                  <span>{Global.getDayOfWeek(value.date)}</span>\r\n                </Col>\r\n                <Col md={6} className=\"py-1\">\r\n                  <span>\r\n                    {value.category} - {value.subcategory}\r\n                  </span>\r\n                  <br />\r\n                  <span>{value.remark}</span>\r\n                </Col>\r\n                <Col className=\"text-center font-weight-bold py-3\">\r\n                  <span\r\n                    className={\r\n                      value.type === \"Revenue\" ? \"text-green\" : \"text-red\"\r\n                    }\r\n                  >\r\n                    {value.type === \"Revenue\"\r\n                      ? Global.amountDisplayConverter(value.amount)\r\n                      : Global.amountDisplayConverter(value.amount)}\r\n                  </span>\r\n                </Col>\r\n              </Row>\r\n            </Accordion.Toggle>\r\n            <Accordion.Collapse eventKey=\"0\">\r\n              <Card.Body>\r\n                <Card>\r\n                  <Accordion>\r\n                    <Accordion.Toggle\r\n                      as={Card.Header}\r\n                      variant=\"link\"\r\n                      eventKey=\"1\"\r\n                    >\r\n                      <span>Test Test</span>\r\n                    </Accordion.Toggle>\r\n                    <Accordion.Collapse eventKey=\"1\">\r\n                      <span>Test Test Body</span>\r\n                    </Accordion.Collapse>\r\n                  </Accordion>\r\n                </Card>\r\n\r\n                <Row>\r\n                  <Col md={3} lg={2} className=\"py-2\">\r\n                    <span>Record ID: {value.record_id}</span>\r\n                    {/* <br />\r\n                    <span>Settled: {value.settle}</span> */}\r\n                  </Col>\r\n                  <Col md={6}>\r\n                    <span>\r\n                      {/* Due: {amountDisplayConverter(value.unsettled_amount)} */}\r\n                    </span>\r\n                    {/* <br /> */}\r\n                    {/* <span>Settle by: {value.settle_by}</span> */}\r\n                  </Col>\r\n                  <Col className=\"cursor-pointer text-center py-2\">\r\n                    <FontAwesomeIcon\r\n                      icon={faPen}\r\n                      size=\"1x\"\r\n                      className=\"mx-2\"\r\n                      onClick={() => this.editRecord(value)}\r\n                    />\r\n                    <FontAwesomeIcon\r\n                      icon={faTrashAlt}\r\n                      size=\"1x\"\r\n                      className=\"mx-2\"\r\n                      onClick={() => this.deleteRecord(value)}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n\r\n                <Row>\r\n                  <Col></Col>\r\n                </Row>\r\n              </Card.Body>\r\n            </Accordion.Collapse>\r\n          </Card>\r\n        </Accordion>\r\n      </div>\r\n    ));\r\n  };\r\n\r\n  layoutRecordTableViewHead = () => {\r\n    return (\r\n      <thead>\r\n        <tr>\r\n          <th className={this.css.td_style + \" width-10p\"}>Date</th>\r\n          <th className={this.css.td_style}>Name</th>\r\n          <th className={this.css.td_style}>Type</th>\r\n          <th className={this.css.td_style}>Category</th>\r\n          <th className={this.css.td_style}>Subcategory</th>\r\n          <th className={this.css.td_style + \" width-10p\"}>Remark</th>\r\n          <th className={this.css.td_style}>Amount</th>\r\n          <th className={this.css.td_style}>Actions</th>\r\n        </tr>\r\n      </thead>\r\n    );\r\n  };\r\n\r\n  layoutRecordTableViewRow = () => {\r\n    return (\r\n      <tbody>\r\n        {this.state.recordListByPage.map((value, index) => (\r\n          <tr>\r\n            <td className={this.css.td_style}>{value.date}</td>\r\n            <td className={this.css.td_style}>{value.user_name}</td>\r\n\r\n            <td className={this.css.td_style}>{value.type}</td>\r\n            <td className={this.css.td_style}>{value.category}</td>\r\n            <td className={this.css.td_style}>{value.subcategory}</td>\r\n            <td className={this.css.td_style + \" width-20p\"}>{value.remark}</td>\r\n            <td className={this.css.td_style}>\r\n              {Global.amountDisplayConverter(value.amount)}\r\n            </td>\r\n            <td className={this.css.td_style}>\r\n              <FontAwesomeIcon\r\n                icon={faPen}\r\n                size=\"1x\"\r\n                className=\"mx-1\"\r\n                onClick={() =>\r\n                  this.setState({\r\n                    modalEditRecordShow: true,\r\n                    modalEditForm: {\r\n                      ...this.state.modalEditForm,\r\n                      editType: Constant.recordType,\r\n                      id: value.record_type_id,\r\n                      name: value.name,\r\n                    },\r\n                  })\r\n                }\r\n              />\r\n              <FontAwesomeIcon\r\n                icon={faTrashAlt}\r\n                size=\"1x\"\r\n                className=\"mx-1\"\r\n                onClick={() => this.deleteRecord(value)}\r\n              />\r\n            </td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    );\r\n  };\r\n\r\n  // Modal filter record\r\n  layoutModalFilterRecord = (value) => {\r\n    console.log(\"layoutModalFilterRecord\");\r\n    console.log(\"filterForm: \" + JSON.stringify(this.state.filterForm));\r\n\r\n    return (\r\n      <Modal\r\n        size=\"lg\"\r\n        backdrop=\"true\"\r\n        animation=\"true\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n        show={this.state.filterForm.modalShow}\r\n      >\r\n        <Modal.Header>\r\n          <Modal.Title className=\"text-center\">Filter</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body className=\"show-grid\">\r\n          <Form className=\"\">\r\n            <Row>\r\n              <Col>\r\n                <Form.Label>Date</Form.Label>\r\n                <Form.Control\r\n                  type=\"date\"\r\n                  placeholder=\"Date\"\r\n                  value={this.state.filterForm.date}\r\n                  onChange={(event) =>\r\n                    this.setFilterForm(Constant.date, event.target.value)\r\n                  }\r\n                ></Form.Control>\r\n              </Col>\r\n            </Row>\r\n            <Form.Row>\r\n              <Form.Group as={Col} controlId=\"\">\r\n                <Form.Label>Type</Form.Label>\r\n                <Form.Control\r\n                  list=\"recordType\"\r\n                  placeholder=\"Type\"\r\n                  value={this.state.filterForm.recordType}\r\n                  onChange={(event) =>\r\n                    this.setFilterForm(Constant.recordType, event.target.value)\r\n                  }\r\n                ></Form.Control>\r\n              </Form.Group>\r\n              <Form.Group as={Col} controlId=\"\">\r\n                <Form.Label>Category</Form.Label>\r\n                <Form.Control\r\n                  // type=\"text\"\r\n                  list=\"category\"\r\n                  placeholder=\"Category\"\r\n                  value={this.state.filterForm.category}\r\n                  onChange={(event) =>\r\n                    this.setFilterForm(Constant.category, event.target.value)\r\n                  }\r\n                ></Form.Control>\r\n              </Form.Group>\r\n              <Form.Group as={Col} controlId=\"\">\r\n                <Form.Label>Subcategory</Form.Label>\r\n                <Form.Control\r\n                  list=\"subcategory\"\r\n                  placeholder=\"Subcategory\"\r\n                  value={this.state.filterForm.subcategory}\r\n                  onChange={(event) =>\r\n                    this.setFilterForm(Constant.subcategory, event.target.value)\r\n                  }\r\n                />\r\n              </Form.Group>\r\n            </Form.Row>\r\n          </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            variant=\"primary\"\r\n            onClick={() =>\r\n              this.setState({\r\n                filterForm: {\r\n                  ...this.state.filterForm,\r\n                  [Constant.date]: \"\",\r\n                  [Constant.recordType]: \"\",\r\n                  [Constant.category]: \"\",\r\n                  [Constant.subcategory]: \"\",\r\n                },\r\n              })\r\n            }\r\n          >\r\n            Clear\r\n          </Button>\r\n          <Button\r\n            variant=\"secondary\"\r\n            onClick={() =>\r\n              this.setState({\r\n                filterForm: {\r\n                  ...this.state.filterForm,\r\n                  modalShow: false,\r\n                },\r\n              })\r\n            }\r\n          >\r\n            Close\r\n          </Button>\r\n\r\n          {/* {this.layoutModalEditRecordFooter()} */}\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n  };\r\n\r\n  layoutPagination = () => {\r\n    let currentPage = parseInt(this.state.paginationForm.currentPage);\r\n    let totalPage = parseInt(this.state.paginationForm.totalPage);\r\n\r\n    if (totalPage <= 7) {\r\n      // totalPage less than 7\r\n      let pageObject = [];\r\n\r\n      for (var i = 1; i <= totalPage; i++) {\r\n        pageObject.push(i);\r\n      }\r\n\r\n      return (\r\n        <Pagination>\r\n          <Pagination.Prev\r\n            disabled={currentPage == 1 ? \"true\" : \"\"}\r\n            onClick={() =>\r\n              this.setPaginationForm(\"currentPage\", currentPage - 1)\r\n            }\r\n          />\r\n\r\n          {pageObject.map((value, i) => (\r\n            <Pagination.Item\r\n              value={value}\r\n              active={currentPage == value ? \"true\" : \"\"}\r\n              onClick={() => this.setPaginationForm(\"currentPage\", value)}\r\n            >\r\n              {value}\r\n            </Pagination.Item>\r\n          ))}\r\n\r\n          <Pagination.Next\r\n            disabled={currentPage == totalPage ? \"true\" : \"\"}\r\n            onClick={() =>\r\n              this.setPaginationForm(\"currentPage\", currentPage + 1)\r\n            }\r\n          />\r\n        </Pagination>\r\n      );\r\n    }\r\n\r\n    if (totalPage > 7) {\r\n      // totalPage more than 7\r\n      if (currentPage < 5) {\r\n        // currentPage within 1 - 4\r\n        let pageObject;\r\n        if (currentPage == 4) {\r\n          pageObject = [1, 2, 3, 4, 5, 6];\r\n        } else {\r\n          pageObject = [1, 2, 3, 4, 5];\r\n        }\r\n\r\n        return (\r\n          <Pagination>\r\n            <Pagination.Prev\r\n              disabled={currentPage <= 1 ? \"true\" : \"\"}\r\n              onClick={() =>\r\n                this.setPaginationForm(\"currentPage\", currentPage - 1)\r\n              }\r\n            />\r\n\r\n            {pageObject.map((value, i) => (\r\n              <Pagination.Item\r\n                value={value}\r\n                active={currentPage == value ? \"true\" : \"\"}\r\n                onClick={() => this.setPaginationForm(\"currentPage\", value)}\r\n              >\r\n                {value}\r\n              </Pagination.Item>\r\n            ))}\r\n\r\n            <Pagination.Ellipsis />\r\n\r\n            <Pagination.Item\r\n              onClick={() => this.setPaginationForm(\"currentPage\", totalPage)}\r\n            >\r\n              {totalPage}\r\n            </Pagination.Item>\r\n\r\n            <Pagination.Next\r\n              disabled={currentPage == totalPage ? \"true\" : \"\"}\r\n              onClick={() =>\r\n                this.setPaginationForm(\"currentPage\", currentPage + 1)\r\n              }\r\n            />\r\n          </Pagination>\r\n        );\r\n      } else if (currentPage >= totalPage - 3) {\r\n        // totalPage at last 3 page\r\n        let pageObject = [];\r\n        var i;\r\n\r\n        if (currentPage == totalPage - 3) {\r\n          i = 6;\r\n        } else {\r\n          i = 5;\r\n        }\r\n\r\n        while (i > 0) {\r\n          --i;\r\n          pageObject.push(totalPage - i);\r\n        }\r\n\r\n        return (\r\n          <Pagination>\r\n            <Pagination.Prev\r\n              onClick={() =>\r\n                this.setPaginationForm(\"currentPage\", currentPage - 1)\r\n              }\r\n            />\r\n\r\n            <Pagination.Item\r\n              onClick={() => this.setPaginationForm(\"currentPage\", 1)}\r\n            >\r\n              {1}\r\n            </Pagination.Item>\r\n\r\n            <Pagination.Ellipsis />\r\n\r\n            {pageObject.map((value, i) => (\r\n              <Pagination.Item\r\n                value={value}\r\n                active={currentPage == value ? \"true\" : \"\"}\r\n                onClick={() => this.setPaginationForm(\"currentPage\", value)}\r\n              >\r\n                {value}\r\n              </Pagination.Item>\r\n            ))}\r\n\r\n            <Pagination.Next\r\n              disabled={currentPage == totalPage ? \"true\" : \"\"}\r\n              onClick={() =>\r\n                this.setPaginationForm(\"currentPage\", currentPage + 1)\r\n              }\r\n            />\r\n          </Pagination>\r\n        );\r\n      } else {\r\n        return (\r\n          <Pagination>\r\n            <Pagination.Prev\r\n              // disabled={currentPage <= 1 ? \"true\" : \"\"}\r\n              onClick={() =>\r\n                this.setPaginationForm(\"currentPage\", currentPage - 1)\r\n              }\r\n            />\r\n\r\n            <Pagination.Item>{1}</Pagination.Item>\r\n            <Pagination.Ellipsis />\r\n\r\n            <Pagination.Item\r\n              onClick={() =>\r\n                this.setPaginationForm(\"currentPage\", currentPage - 2)\r\n              }\r\n            >\r\n              {currentPage - 2}\r\n            </Pagination.Item>\r\n            <Pagination.Item\r\n              onClick={() =>\r\n                this.setPaginationForm(\"currentPage\", currentPage - 1)\r\n              }\r\n            >\r\n              {currentPage - 1}\r\n            </Pagination.Item>\r\n            <Pagination.Item\r\n              active\r\n              disable\r\n              onClick={() => this.setPaginationForm(\"currentPage\", currentPage)}\r\n            >\r\n              {currentPage}\r\n            </Pagination.Item>\r\n            <Pagination.Item\r\n              onClick={() =>\r\n                this.setPaginationForm(\"currentPage\", currentPage + 1)\r\n              }\r\n            >\r\n              {currentPage + 1}\r\n            </Pagination.Item>\r\n            <Pagination.Item\r\n              onClick={() =>\r\n                this.setPaginationForm(\"currentPage\", currentPage + 2)\r\n              }\r\n            >\r\n              {currentPage + 2}\r\n            </Pagination.Item>\r\n\r\n            <Pagination.Ellipsis />\r\n\r\n            <Pagination.Item\r\n              onClick={() => this.setPaginationForm(\"currentPage\", totalPage)}\r\n            >\r\n              {totalPage}\r\n            </Pagination.Item>\r\n\r\n            <Pagination.Next\r\n              // disabled={currentPage == totalPage ? \"true\" : \"\"}\r\n              onClick={() =>\r\n                this.setPaginationForm(\"currentPage\", currentPage + 1)\r\n              }\r\n            />\r\n          </Pagination>\r\n        );\r\n      }\r\n    }\r\n  };\r\n  // Layout function end\r\n\r\n  // API function\r\n  apiGetRecordTypeList = async () => {\r\n    // GET record type list\r\n    await apiGetRecordTypeList().then((response) => {\r\n      if (response.message === \"success\") {\r\n        console.log(\"recordTypeList: \" + JSON.stringify(response.data));\r\n        this.setState({ recordTypeList: response.data });\r\n      }\r\n    });\r\n  };\r\n\r\n  apiGetCategoryList = async () => {\r\n    // console.log(\"type: \" + type);\r\n    await apiGetCategoryList().then((response) => {\r\n      if (response.message === \"success\") {\r\n        this.setState({ categoryList: response.data });\r\n      }\r\n    });\r\n  };\r\n\r\n  apiGetSubcategoryList = async () => {\r\n    let type = \"\";\r\n    let category = \"\";\r\n\r\n    await apiGetSubcategoryList(type, category).then((response) => {\r\n      if (response.message === \"success\") {\r\n        this.setState({ subcategoryList: response.data });\r\n      }\r\n    });\r\n  };\r\n\r\n  apiGetUserList = async () => {\r\n    // console.log(\"type: \" + type);\r\n    await apiGetUserList().then((response) => {\r\n      if (response.message === \"success\") {\r\n        this.setState({ userList: response.data });\r\n      }\r\n    });\r\n  };\r\n\r\n  apiGetRecordList = () => {\r\n    let userId;\r\n    let userName = this.state.filterForm.name;\r\n    let recordType = this.state.filterForm.recordType;\r\n    let date = this.state.filterForm.date;\r\n    let month = this.state.filterForm.month;\r\n    let category = this.state.filterForm.category;\r\n    let subcategory = encodeURI(this.state.filterForm.subcategory);\r\n\r\n    console.log(\"apiGetRecordList userName: \" + userName);\r\n\r\n    if (month === \"\") {\r\n      month = Global.getCurrentYear() + \"-\" + Global.getCurrentMonth();\r\n    }\r\n\r\n    userId = Global.getIndexByName(this.state.userList, userName);\r\n\r\n    //Global.generateUrlParamsByJson(this.state.filterForm);\r\n\r\n    let url =\r\n      process.env.REACT_APP_API_GET_RECORD_LIST +\r\n      \"?userId=\" +\r\n      userId +\r\n      \"&type=\" +\r\n      recordType +\r\n      \"&date=\" +\r\n      date +\r\n      \"&month=\" +\r\n      month +\r\n      \"&category=\" +\r\n      category +\r\n      \"&subcategory=\" +\r\n      subcategory;\r\n    console.log(\"URL: \" + url);\r\n\r\n    axios.get(url).then((response) => {\r\n      if (response.data.message === \"success\") {\r\n        let totalExpenses = 0;\r\n        let totalRevenue = 0;\r\n        let grandTotal = 0;\r\n\r\n        for (let value of response.data.data) {\r\n          if (value.type === \"Expense\") {\r\n            totalExpenses += value.amount;\r\n          } else if (value.type === \"Revenue\") {\r\n            totalRevenue += value.amount;\r\n          }\r\n        }\r\n\r\n        grandTotal = totalRevenue + totalExpenses;\r\n        console.log(\"totalExpenses: \" + totalExpenses);\r\n        console.log(\"totalRevenue: \" + totalRevenue);\r\n\r\n        this.setState(\r\n          {\r\n            recordList: response.data.data,\r\n            totalExpenses: totalExpenses,\r\n            totalRevenue: totalRevenue,\r\n            grandTotal: grandTotal,\r\n          },\r\n\r\n          () => this.initPaginationForm()\r\n        );\r\n      }\r\n      console.log(\"recordList: \" + this.state.recordList);\r\n    });\r\n  };\r\n  // API function end\r\n\r\n  editRecord = (value) => {\r\n    this.setState({ editRecordModal: true, recordData: value });\r\n  };\r\n\r\n  deleteRecord = (value) => {\r\n    this.setState({ deleteRecordModal: true, recordData: value });\r\n  };\r\n\r\n  initPaginationForm = (type, value) => {\r\n    let pageTotalItem = this.state.paginationForm.pageTotalItem;\r\n    let totalPage = Math.ceil(this.state.recordList.length / pageTotalItem);\r\n    let currentPage = totalPage == 0 ? 0 : 1;\r\n    console.log(\"totalRecord: \" + this.state.recordList.length);\r\n    console.log(\"totalPage: \" + totalPage);\r\n    console.log(\"totalPage int: \" + Math.ceil(totalPage));\r\n\r\n    //this.setPaginationForm(\"lastPage\", lastPage);\r\n\r\n    console.log(\"initPaginationForm\");\r\n    console.log(\"type: \" + type);\r\n    console.log(\"value: \" + value);\r\n\r\n    this.setState(\r\n      {\r\n        paginationForm: {\r\n          ...this.state.paginationForm,\r\n          currentPage: currentPage,\r\n          totalPage: totalPage,\r\n        },\r\n      },\r\n      () => this.setRecordListView(),\r\n      console.log(\r\n        \"paginationForm: \" + JSON.stringify(this.state.paginationForm)\r\n      )\r\n    );\r\n  };\r\n\r\n  setRecordListView = () => {\r\n    let currentPage = this.state.paginationForm.currentPage;\r\n    let pageTotalItem = this.state.paginationForm.pageTotalItem;\r\n\r\n    let startIndex = (currentPage - 1) * pageTotalItem;\r\n    let endIndex = currentPage * pageTotalItem;\r\n    let recordList = this.state.recordList;\r\n    let recordListByPage;\r\n\r\n    recordListByPage = recordList.slice(startIndex, endIndex);\r\n\r\n    this.setState(\r\n      {\r\n        recordListByPage: recordListByPage,\r\n      },\r\n      () =>\r\n        console.log(\r\n          \"recordListByPage: \" + JSON.stringify(this.state.recordListByPage)\r\n        )\r\n    );\r\n  };\r\n\r\n  setPaginationForm = (type, value) => {\r\n    this.setState(\r\n      {\r\n        paginationForm: {\r\n          ...this.state.paginationForm,\r\n          [type]: value,\r\n        },\r\n      },\r\n      () => this.setRecordListView(),\r\n      console.log(\r\n        \"paginationForm: \" + JSON.stringify(this.state.paginationForm)\r\n      )\r\n    );\r\n  };\r\n\r\n  setFilterForm = (type, value) => {\r\n    console.log(\"setFilterForm\");\r\n    console.log(\"type: \" + type);\r\n    console.log(\"value: \" + value);\r\n\r\n    this.setState(\r\n      {\r\n        filterForm: {\r\n          ...this.state.filterForm,\r\n          [type]: value,\r\n        },\r\n      },\r\n      () => {\r\n        console.log(\"filterForm: \" + JSON.stringify(this.state.filterForm));\r\n      }\r\n    );\r\n  };\r\n}\r\n\r\nexport default RecordView;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n// import { useAsync } from \"react-async\";\r\nimport Constant from \"../../global/Constant.json\";\r\n\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport FormControl from \"react-bootstrap/FormControl\";\r\nimport Card from \"react-bootstrap/Card\";\r\n\r\n// font-awesome\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPen } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faTrashAlt } from \"@fortawesome/free-regular-svg-icons\";\r\nimport { faCheckCircle } from \"@fortawesome/free-regular-svg-icons\";\r\n\r\nimport * as Global from \"../../global/GlobalUtil\";\r\n\r\nimport {\r\n  apiGetRecordTypeList,\r\n  apiGetCategoryList,\r\n  apiGetSubcategoryList,\r\n  apiGetUserList,\r\n  apiGetSettlementList,\r\n} from \"../../global/GlobalAPI\";\r\n\r\nimport {\r\n  SuccessModal,\r\n  FailedModal,\r\n  ConfirmModal,\r\n} from \"../../layouts/modal/Modal\";\r\n\r\nclass Settlement extends Component {\r\n  state = {\r\n    recordTypeList: [],\r\n    categoryList: [],\r\n    subcategoryList: [],\r\n    userList: [],\r\n    settlementList: [],\r\n\r\n    // default value\r\n    pageController: {\r\n      userInfoPageShow: true,\r\n      surveyInfoPageShow: false,\r\n    },\r\n\r\n    surveyDetail: {\r\n      name: \"\",\r\n    },\r\n\r\n    productList: [\r\n      {\r\n        checked: false,\r\n        name: \"R1-1\",\r\n        img: \"/right3/row-1-column-1.png\",\r\n      },\r\n      {\r\n        checked: false,\r\n        name: \"R1-2\",\r\n        img: \"/right3/row-1-column-2.png\",\r\n      },\r\n      {\r\n        checked: false,\r\n        name: \"R1-3\",\r\n        img: \"/right3/row-1-column-3.png\",\r\n      },\r\n      {\r\n        checked: false,\r\n        name: \"R1-4\",\r\n        img: \"/right3/row-1-column-4.png\",\r\n      },\r\n      {\r\n        checked: false,\r\n        name: \"R1-5\",\r\n        img: \"/right3/row-1-column-5.png\",\r\n      },\r\n      {\r\n        checked: false,\r\n        name: \"R1-6\",\r\n        img: \"/right3/row-1-column-6.png\",\r\n      },\r\n      {\r\n        checked: false,\r\n        name: \"R1-7\",\r\n        img: \"/right3/row-1-column-7.png\",\r\n      },\r\n      {\r\n        checked: false,\r\n        name: \"R1-8\",\r\n        img: \"/right3/row-1-column-8.png\",\r\n      },\r\n      {\r\n        checked: false,\r\n        name: \"R1-9\",\r\n        img: \"/right3/row-1-column-9.png\",\r\n      },\r\n      {\r\n        checked: false,\r\n        name: \"R1-10\",\r\n        img: \"/right3/row-1-column-10.png\",\r\n      },\r\n      {\r\n        checked: false,\r\n        name: \"R1-11\",\r\n        img: \"/right3/row-1-column-11.png\",\r\n      },\r\n      {\r\n        checked: false,\r\n        name: \"R1-12\",\r\n        img: \"/right3/row-1-column-12.png\",\r\n      },\r\n      {\r\n        checked: false,\r\n        name: \"R1-13\",\r\n        img: \"/right3/row-1-column-13.png\",\r\n      },\r\n      {\r\n        checked: false,\r\n        name: \"R1-14\",\r\n        img: \"/right3/row-1-column-14.png\",\r\n      },\r\n    ],\r\n\r\n    searchForm: {\r\n      user: \"\",\r\n      startDate: \"\",\r\n      endDate: \"\",\r\n    },\r\n\r\n    modalInsertForm: {\r\n      insertType: \"\",\r\n      recordType: \"\",\r\n      category: \"\",\r\n      subcategory: \"\",\r\n    },\r\n\r\n    modalEditForm: {\r\n      editType: \"\",\r\n      id: \"\",\r\n      name: \"\",\r\n    },\r\n\r\n    modalSettlementForm: {\r\n      modalShow: false,\r\n      user: \"\",\r\n      year: \"\",\r\n      isOpenBalanceAvailable: \"\",\r\n      openBalance: 0,\r\n      amountIn: 0,\r\n      amountOut: 0,\r\n      balance: 0,\r\n    },\r\n\r\n    successModalShow: false,\r\n    failedModalShow: false,\r\n    confirmModalShow: false,\r\n    modalAddRecordShow: false,\r\n    modalEditRecordShow: false,\r\n\r\n    modalSuccess: {\r\n      show: false,\r\n    },\r\n  };\r\n\r\n  css = {\r\n    containerStyle1: \"border-2-gray rounded p-3\",\r\n    divStyle1: \"py-2 px-3\",\r\n    inputStyle1: \"width-100p\",\r\n    btnSubmit: \"width-100p rounded-pill btn-green border-none py-1\",\r\n    btnReset: \"width-100p rounded-pill btn-blue py-1\",\r\n    btnClear: \"width-100p rounded-pill btn-yellow border-none py-1\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.apiGetUserList();\r\n  }\r\n\r\n  render() {\r\n    let layout;\r\n\r\n    if (this.state.pageController.userInfoPageShow) {\r\n      layout = this.layoutUserInfoPage();\r\n    } else if (this.state.pageController.surveyInfoPageShow) {\r\n      layout = this.layoutSurveyInfoPage();\r\n    } else {\r\n      layout = this.layoutUserInfoPage();\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <br />\r\n        {/* Modal */}\r\n        {/* <SuccessModal\r\n          show={this.state.modalSuccess.show}\r\n          onHide={() =>\r\n            this.setState({\r\n              modalSuccess: {\r\n                ...this.state.modalSuccess,\r\n                show: false,\r\n              },\r\n            })\r\n          }\r\n        />\r\n        <FailedModal\r\n          show={this.state.failedModalShow}\r\n          errMsg={this.state.modalFailedErrMsg}\r\n          onHide={() => this.setState({ failedModalShow: false })}\r\n        /> */}\r\n\r\n        {this.layoutModalSettlement()}\r\n        {this.layoutModalSuccess()}\r\n\r\n        {layout}\r\n\r\n        {/* <Container fluid className=\"\">\r\n          <Row>\r\n            <Col lg={1}></Col>\r\n\r\n            <Col sm=\"1\" className=\"px-1\">\r\n              <Form.Control\r\n                size=\"sm\"\r\n                // type=\"text\"\r\n                // list=\"year\"\r\n                as=\"select\"\r\n                value={this.state.searchForm.fromYear}\r\n                onChange={(event) =>\r\n                  this.setSearchForm(Constant.fromYear, event.target.value)\r\n                }\r\n              >\r\n                {Global.getYearList().map((value, index) => (\r\n                  <option>{value.name}</option>\r\n                ))}\r\n              </Form.Control>\r\n            </Col>\r\n            <Col sm=\"1\" className=\"px-1\">\r\n              <Form.Control\r\n                size=\"sm\"\r\n                // type=\"text\"\r\n                // list=\"year\"\r\n                as=\"select\"\r\n                value={this.state.searchForm.toYear}\r\n                onChange={(event) =>\r\n                  this.setSearchForm(Constant.toYear, event.target.value)\r\n                }\r\n              >\r\n                {Global.getYearList().map((value, index) => (\r\n                  <option>{value.name}</option>\r\n                ))}\r\n              </Form.Control>\r\n            </Col>\r\n            <Col sm=\"2\" className=\"px-1\">\r\n              <Form.Group controlId=\"\">\r\n                <Form.Control\r\n                  size=\"sm\"\r\n                  type=\"text\"\r\n                  list=\"user\"\r\n                  placeholder=\"Name\"\r\n                  value={this.state.searchForm.name}\r\n                  onChange={(event) =>\r\n                    this.setSearchForm(Constant.user, event.target.value)\r\n                  }\r\n                ></Form.Control>\r\n              </Form.Group>\r\n            </Col>\r\n\r\n            <Col sm={2}>\r\n              <Row>\r\n                <Col sm=\"auto\" className=\"px-1\">\r\n                  <Button\r\n                    variant=\"primary\"\r\n                    size=\"sm\"\r\n                    onClick={() => this.apiGetSettlementList()}\r\n                  >\r\n                    Search\r\n                  </Button>\r\n                </Col>\r\n                <Col sm=\"auto\" className=\"px-1\">\r\n                  <Form.Label\r\n                    column=\"sm\"\r\n                    className=\"px-1\"\r\n                    onClick={() => this.setState({ modalEditRecordShow: true })}\r\n                  >\r\n                    <span>\r\n                      <u>Filter</u>\r\n                    </span>\r\n                  </Form.Label>\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n\r\n            <Col sm={2}></Col>\r\n            <Col sm={2} className=\"px-1\">\r\n              <Button\r\n                className=\"float-right\"\r\n                variant=\"primary\"\r\n                size=\"sm\"\r\n                onClick={() =>\r\n                  this.setState({\r\n                    modalSettlementForm: {\r\n                      ...this.state.modalSettlementForm,\r\n                      modalShow: true,\r\n                    },\r\n                  })\r\n                }\r\n              >\r\n                Settlement\r\n              </Button>\r\n            </Col>\r\n            <Col lg={1}></Col>\r\n          </Row>\r\n        </Container> */}\r\n\r\n        {/* <Container fluid>\r\n          <Row>\r\n            <Col lg={1}></Col>\r\n            <Col className=\"px-1\">\r\n              <Table>\r\n                {this.layoutSearchFormTableViewHead()}\r\n                {this.layoutSearchFormTableViewRow()}\r\n              </Table>\r\n            </Col>\r\n            <Col lg={1}></Col>\r\n          </Row>\r\n        </Container> */}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  layoutUserInfoPage = () => {\r\n    return (\r\n      <Container fluid className=\"\">\r\n        <Row>\r\n          <Col lg={4} md={2}></Col>\r\n          {/* <Col style={{ display: \"flex\", justifyContent: \"center\" }}> */}\r\n          <Col>\r\n            <Row className=\"mb-3 px-3\" controlId=\"\">\r\n              {/* <Form.Label>Email address</Form.Label> */}\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Name\"\r\n                className=\"text-center\"\r\n                value={this.state.surveyDetail.name}\r\n                onChange={(event) =>\r\n                  this.setSurveyDetail(Constant.name, event.target.value)\r\n                }\r\n              />\r\n              <Form.Text className=\"text-muted\"></Form.Text>\r\n            </Row>\r\n\r\n            <Row className=\"mb-3 px-3\" controlId=\"\">\r\n              {/* <Form.Label>Password</Form.Label> */}\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Clinic\"\r\n                className=\"text-center\"\r\n              />\r\n            </Row>\r\n            <Row className=\"mb-3 px-3\" controlId=\"\">\r\n              {/* <Form.Label>Password</Form.Label> */}\r\n              <Form.Control\r\n                type=\"email\"\r\n                placeholder=\"Email\"\r\n                className=\"text-center\"\r\n              />\r\n            </Row>\r\n            <Row className=\"mb-3 px-3\" controlId=\"\">\r\n              {/* <Form.Label>Password</Form.Label> */}\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Contact Number\"\r\n                className=\"text-center\"\r\n              />\r\n            </Row>\r\n            <Row className=\"mb-3 px-3\" controlId=\"\">\r\n              {/* <Form.Label>Password</Form.Label> */}\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Address\"\r\n                className=\"text-center\"\r\n              />\r\n            </Row>\r\n            <Row className=\"mb-3 px-1\" controlId=\"\">\r\n              <Col>\r\n                <Form.Control\r\n                  // type=\"password\"\r\n                  type=\"text\"\r\n                  placeholder=\"City\"\r\n                  className=\"text-center\"\r\n                />\r\n              </Col>\r\n              <Col>\r\n                <Form.Control\r\n                  // type=\"password\"\r\n                  type=\"text\"\r\n                  placeholder=\"Postcode\"\r\n                  className=\"text-center\"\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row className=\"mb-3 px-3\" controlId=\"\">\r\n              {/* <Form.Label>Password</Form.Label> */}\r\n              <Form.Control\r\n                // type=\"password\"\r\n                type=\"text\"\r\n                placeholder=\"State\"\r\n                className=\"text-center\"\r\n              />\r\n            </Row>\r\n\r\n            {/* <Form.Group className=\"mb-3\" controlId=\"formBasicCheckbox\">\r\n                  <Form.Check type=\"checkbox\" label=\"Check me out\" />\r\n                </Form.Group> */}\r\n            <Row className=\"mb-3 px-3\" controlId=\"\">\r\n              <Button\r\n                variant=\"primary\"\r\n                type=\"button\"\r\n                className=\"w-100\"\r\n                onClick={() =>\r\n                  this.setState(\r\n                    {\r\n                      pageController: {\r\n                        ...this.state.pageController,\r\n                        userInfoPageShow: false,\r\n                        surveyInfoPageShow: true,\r\n                      },\r\n                    },\r\n                    () =>\r\n                      console.log(\r\n                        \"pageController: \" +\r\n                          JSON.stringify(this.state.pageController)\r\n                      )\r\n                  )\r\n                }\r\n              >\r\n                Start Survey\r\n              </Button>\r\n            </Row>\r\n          </Col>\r\n          <Col lg={4} md={2}></Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  };\r\n\r\n  layoutSurveyInfoPage = () => {\r\n    // let layour = this.state.surveyDetail.map((value, index) => <></>);\r\n    // console.log(\"process.env.PUBLIC_URL: \" + process.env.PUBLIC_URL);\r\n\r\n    return (\r\n      <Container fluid className=\"\">\r\n        <Row xs={4} sm={6} lg={12} className=\"\">\r\n          {this.state.productList.map((value, index) => (\r\n            <Col lg={1} className=\"p-1\">\r\n              <Card\r\n                className={\r\n                  value.checked\r\n                    ? \"border-2-none border-primary bg-lightblue-50\"\r\n                    : \"border-2-none border-secondary\"\r\n                }\r\n                onClick={() =>\r\n                  this.setProductList(index, \"checked\", !value.checked)\r\n                }\r\n              >\r\n                <Card.Img\r\n                  fluid\r\n                  variant=\"top\"\r\n                  src={\r\n                    process.env.PUBLIC_URL +\r\n                    \"/assets/images/product\" +\r\n                    value.img\r\n                  }\r\n                  className=\"p-2 height-35vh\"\r\n                />\r\n                <Card.Body>\r\n                  {/* <Card.Title className=\"text-center\">Row 1 - 14</Card.Title> */}\r\n                  <Card.Text className=\"text-center\">{value.name}</Card.Text>\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n\r\n        <Row>\r\n          <Col lg={4} md={2}></Col>\r\n          <Col>\r\n            <Button\r\n              className=\"width-100p\"\r\n              onClick={() =>\r\n                this.setState({\r\n                  modalSuccess: {\r\n                    ...this.state.modalSuccess,\r\n                    show: true,\r\n                  },\r\n                })\r\n              }\r\n            >\r\n              Submit\r\n            </Button>\r\n          </Col>\r\n          <Col lg={4} md={2}></Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n\r\n    // return (\r\n    //   <Container fluid className=\"py-2\">\r\n    //     <h2 className=\"font-weight-light\">\r\n    //       Bootstrap 4 Horizontal Scrolling Cards with Flexbox\r\n    //     </h2>\r\n    //     <div className=\"d-flex flex-row flex-nowrap py-1\">\r\n    //       {this.state.surveyDetail.map((value, index) => (\r\n    //         <Col lg className=\"py-1\">\r\n    //           <Card>\r\n    //             <Card.Img\r\n    //               fluid\r\n    //               variant=\"top\"\r\n    //               src={process.env.PUBLIC_URL + value.img}\r\n    //               className=\"height-20vh\"\r\n    //             />\r\n    //             <Card.Body>\r\n    //               <Card.Title>Card title</Card.Title>\r\n    //               <Card.Text>This is a longer</Card.Text>\r\n    //             </Card.Body>\r\n    //           </Card>\r\n    //         </Col>\r\n    //       ))}\r\n    //     </div>\r\n    //   </Container>\r\n    // );\r\n  };\r\n\r\n  // Layout function\r\n\r\n  layoutSearchFormTableViewRow = () => {\r\n    return (\r\n      <tbody>\r\n        {this.state.settlementList.map((value, index) => (\r\n          <tr>\r\n            <td className={this.css.td_style}>{value.date}</td>\r\n            <td className={this.css.td_style}>{value.user}</td>\r\n            <td className={this.css.td_style}>\r\n              {Global.amountDisplayConverter(value.open_balance)}\r\n            </td>\r\n            <td className={this.css.td_style}>\r\n              {Global.amountDisplayConverter(value.amount_in)}\r\n            </td>\r\n            <td className={this.css.td_style}>\r\n              {Global.amountDisplayConverter(value.amount_out)}\r\n            </td>\r\n            <td className={this.css.td_style}>\r\n              {Global.amountDisplayConverter(value.balance)}\r\n            </td>\r\n            <td className={this.css.td_style}>\r\n              <FontAwesomeIcon\r\n                icon={faPen}\r\n                size=\"1x\"\r\n                className=\"mx-1\"\r\n                onClick={() =>\r\n                  this.setState({\r\n                    modalEditRecordShow: true,\r\n                    modalEditForm: {\r\n                      ...this.state.modalEditForm,\r\n                      editType: Constant.recordType,\r\n                      id: value.record_type_id,\r\n                      name: value.name,\r\n                    },\r\n                  })\r\n                }\r\n              />\r\n              <FontAwesomeIcon\r\n                icon={faTrashAlt}\r\n                size=\"1x\"\r\n                className=\"mx-1\"\r\n                onClick={() => this.deleteRecord(value)}\r\n              />\r\n            </td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    );\r\n  };\r\n\r\n  layoutModalSuccess = () => {\r\n    // <SuccessModal\r\n    // show={this.state.successModalShow}\r\n    // onHide={() => this.setState({ successModalShow: false })}\r\n    // />\r\n    return (\r\n      <Modal\r\n        size=\"sm\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n        show={this.state.modalSuccess.show}\r\n      >\r\n        {/* <Modal.Header closeButton>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Using Grid in Modal\r\n          </Modal.Title>\r\n        </Modal.Header> */}\r\n        <Modal.Body className=\"show-grid\">\r\n          <Container fluid className=\"text-center m-2\">\r\n            <Row>\r\n              <Col>\r\n                <FontAwesomeIcon\r\n                  icon={faCheckCircle}\r\n                  size=\"3x\"\r\n                  className=\"mb-3 text-success\"\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <h4>Success</h4>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <p>Added Successful</p>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <Button\r\n                  variant=\"success\"\r\n                  className=\"rounded-pill width-100p\"\r\n                  onClick={() =>\r\n                    this.setState({\r\n                      pageController: {\r\n                        ...this.state.pageController,\r\n                        userInfoPageShow: true,\r\n                        surveyInfoPageShow: false,\r\n                      },\r\n                      modalSuccess: {\r\n                        ...this.state.modalSuccess,\r\n                        show: false,\r\n                      },\r\n                    })\r\n                  }\r\n                >\r\n                  Close\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </Modal.Body>\r\n      </Modal>\r\n    );\r\n  };\r\n\r\n  layoutModalSettlement = () => {\r\n    return (\r\n      <Modal\r\n        size=\"lg\"\r\n        backdrop=\"true\"\r\n        animation=\"true\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n        show={this.state.modalSettlementForm.modalShow}\r\n      >\r\n        <Modal.Header>\r\n          <Modal.Title className=\"text-center\">Settlement</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body className=\"show-grid\">\r\n          <Form className=\"\">\r\n            <Row className=\"mb-3\">\r\n              <Col>\r\n                <Form.Label>User</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  list=\"user\"\r\n                  onChange={(event) =>\r\n                    this.setModalSettlementForm(\r\n                      Constant.user,\r\n                      event.target.value\r\n                    )\r\n                  }\r\n                  // readOnly\r\n                  // value={props.value.record_id}\r\n                />\r\n              </Col>\r\n              <Col>\r\n                <Form.Label>Year</Form.Label>\r\n                <Form.Control\r\n                  // type=\"text\"\r\n                  // list=\"year\"\r\n                  as=\"select\"\r\n                  value={this.state.modalSettlementForm.year}\r\n                  onChange={(event) =>\r\n                    this.setModalSettlementForm(\r\n                      Constant.year,\r\n                      event.target.value\r\n                    )\r\n                  }\r\n                >\r\n                  {Global.getYearList().map((value, index) => (\r\n                    <option>{value.name}</option>\r\n                  ))}\r\n                </Form.Control>\r\n                {/* <Form.Control\r\n                  type=\"month\"\r\n                  defaultValue={this.state.modalEditForm.name}\r\n                  onChange={(event) =>\r\n                    this.setModalSettlementForm(\r\n                      Constant.date,\r\n                      event.target.value\r\n                    )\r\n                  }\r\n                  // readOnly\r\n                  // value={props.value.record_id}\r\n                /> */}\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <Button\r\n                  variant=\"primary\"\r\n                  onClick={() => this.apiGetSettlementCheck()}\r\n                >\r\n                  Check\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n          <hr />\r\n\r\n          <Row></Row>\r\n          <Form>\r\n            <InputGroup className=\"mb-3\">\r\n              <InputGroup.Text id=\"basic-addon1\" className=\"width-25p\">\r\n                Open Balance\r\n              </InputGroup.Text>\r\n              <FormControl\r\n                placeholder=\"Username\"\r\n                aria-label=\"Username\"\r\n                aria-describedby=\"basic-addon1\"\r\n                isInvalid={\r\n                  !this.state.modalSettlementForm.isOpenBalanceAvailable\r\n                }\r\n                value={Global.amountDisplayConverter(\r\n                  this.state.modalSettlementForm.openBalance\r\n                )}\r\n              />\r\n            </InputGroup>\r\n            <InputGroup className=\"mb-3\">\r\n              <InputGroup.Text id=\"basic-addon1\" className=\"width-25p\">\r\n                Amount In\r\n              </InputGroup.Text>\r\n              <FormControl\r\n                placeholder=\"Username\"\r\n                aria-label=\"Username\"\r\n                aria-describedby=\"basic-addon1\"\r\n                value={Global.amountDisplayConverter(\r\n                  this.state.modalSettlementForm.amountIn\r\n                )}\r\n              />\r\n            </InputGroup>\r\n            <InputGroup className=\"mb-3\">\r\n              <InputGroup.Text id=\"basic-addon1\" className=\"center width-25p\">\r\n                Amount Out\r\n              </InputGroup.Text>\r\n              <FormControl\r\n                placeholder=\"Username\"\r\n                aria-label=\"Username\"\r\n                aria-describedby=\"basic-addon1\"\r\n                value={Global.amountDisplayConverter(\r\n                  this.state.modalSettlementForm.amountOut\r\n                )}\r\n              />\r\n            </InputGroup>\r\n            <InputGroup className=\"mb-3\">\r\n              <InputGroup.Text id=\"basic-addon1\" className=\"center width-25p\">\r\n                Balance\r\n              </InputGroup.Text>\r\n              <FormControl\r\n                placeholder=\"Username\"\r\n                aria-label=\"Username\"\r\n                aria-describedby=\"basic-addon1\"\r\n                value={Global.amountDisplayConverter(\r\n                  this.state.modalSettlementForm.balance\r\n                )}\r\n              />\r\n            </InputGroup>\r\n          </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            variant=\"secondary\"\r\n            onClick={() =>\r\n              this.setState({\r\n                modalSettlementForm: {\r\n                  ...this.state.modalSettlementForm,\r\n                  modalShow: false,\r\n                },\r\n              })\r\n            }\r\n          >\r\n            Close\r\n          </Button>\r\n\r\n          <Button\r\n            variant=\"primary\"\r\n            onClick={() => this.apiPostSettlementCreate()}\r\n          >\r\n            Save Changes\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n  };\r\n\r\n  // Layout function end\r\n\r\n  // API function\r\n  apiGetUserList = async () => {\r\n    await apiGetUserList().then((response) => {\r\n      if (response.message === \"success\") {\r\n        this.setState({ userList: response.data });\r\n      }\r\n    });\r\n  };\r\n\r\n  apiGetRecordTypeList = async () => {\r\n    // GET user list\r\n    await apiGetRecordTypeList().then((response) => {\r\n      if (response.message === \"success\") {\r\n        console.log(\"recordTypeList: \" + JSON.stringify(response.data));\r\n        this.setState({ recordTypeList: response.data });\r\n      }\r\n    });\r\n  };\r\n\r\n  apiGetCategoryList = async () => {\r\n    // console.log(\"type: \" + type);\r\n    await apiGetCategoryList().then((response) => {\r\n      if (response.message === \"success\") {\r\n        this.setState({ categoryList: response.data });\r\n      }\r\n    });\r\n  };\r\n\r\n  apiGetSettlementList = async () => {\r\n    // Used for \"searchForm\"\r\n    // \"modalInsertForm\" didn't using it\r\n    let searchForm = this.state.searchForm;\r\n    let userId = Global.getIndexByName(this.state.userList, searchForm.user);\r\n\r\n    searchForm = { ...this.state.searchForm, userId: userId };\r\n\r\n    await apiGetSettlementList(searchForm).then((response) => {\r\n      if (response.message === \"success\") {\r\n        this.setState({ settlementList: response.data });\r\n      }\r\n    });\r\n  };\r\n\r\n  apiGetSettlementCheck = () => {\r\n    let userId;\r\n    let name = this.state.modalSettlementForm.user;\r\n    let fromYear = this.state.modalSettlementForm.year;\r\n    let toYear = this.state.modalSettlementForm.year;\r\n\r\n    console.log(\r\n      \"apiGetSettlementCheck modalSettlementForm: \" +\r\n        JSON.stringify(this.state.modalSettlementForm)\r\n    );\r\n\r\n    if (fromYear === \"\") {\r\n      fromYear = Global.getCurrentYear();\r\n    }\r\n\r\n    if (toYear === \"\") {\r\n      toYear = Global.getCurrentYear();\r\n    }\r\n\r\n    userId = Global.getIndexByName(this.state.userList, name);\r\n\r\n    let url =\r\n      process.env.REACT_APP_API_GET_RECORD_SUMMARY +\r\n      \"?userId=\" +\r\n      userId +\r\n      \"&fromYear=\" +\r\n      fromYear +\r\n      \"&toYear=\" +\r\n      toYear;\r\n    console.log(\"URL: \" + url);\r\n\r\n    axios.get(url).then((response) => {\r\n      if (response.data.message === \"success\") {\r\n        let totalExpense = 0;\r\n        let totalRevenue = 0;\r\n        let balance = 0;\r\n        let total = 0;\r\n        let openBalance = 0;\r\n        let summary;\r\n        let isOpenBalanceAvailable = \"\";\r\n\r\n        console.log(\"result: \" + JSON.stringify(response.data));\r\n\r\n        isOpenBalanceAvailable = response.data.data[0].isOpenBalanceAvailable;\r\n        openBalance = response.data.data[0].openBalance;\r\n        totalRevenue = response.data.data[0].totalRevenue;\r\n        totalExpense = response.data.data[0].totalExpense;\r\n        total = response.data.data[0].total;\r\n        summary = response.data.data[0].summary;\r\n\r\n        balance = openBalance + totalRevenue + totalExpense;\r\n\r\n        this.setModalSettlementForm(\r\n          Constant.isOpenBalanceAvailable,\r\n          isOpenBalanceAvailable\r\n        );\r\n        this.setModalSettlementForm(Constant.openBalance, openBalance);\r\n        this.setModalSettlementForm(Constant.amountIn, totalRevenue);\r\n        this.setModalSettlementForm(Constant.amountOut, totalExpense);\r\n        this.setModalSettlementForm(Constant.balance, balance);\r\n\r\n        console.log(\"totalExpense: \" + totalExpense);\r\n        console.log(\"totalRevenue: \" + totalRevenue);\r\n        console.log(\"summary: \" + JSON.stringify(summary));\r\n      }\r\n    });\r\n  };\r\n\r\n  apiPostSettlementCreate = () => {\r\n    // POST\r\n    let url =\r\n      process.env.REACT_APP_BASE_URL +\r\n      process.env.REACT_APP_SETTLEMENT_POST_CREATE;\r\n    let error = false;\r\n    let errMsg = \"\";\r\n\r\n    let settlementForm = this.state.modalSettlementForm;\r\n\r\n    let userId = Global.getIndexByName(\r\n      this.state.userList,\r\n      settlementForm.user\r\n    );\r\n\r\n    settlementForm = { ...this.state.modalSettlementForm, userId: userId };\r\n\r\n    console.log(\"URL: \" + url);\r\n    console.log(\r\n      \"apiPostSettlementCreate settlementForm: \" +\r\n        JSON.stringify(settlementForm)\r\n    );\r\n\r\n    if (Global.isEmpty(settlementForm.user)) {\r\n      error = true;\r\n      errMsg = \"Empty Name\";\r\n    }\r\n\r\n    if (error) {\r\n      this.setState({ failedModalShow: true, modalFailedErrMsg: errMsg });\r\n    } else {\r\n      axios\r\n        .post(url, settlementForm)\r\n        .then((response) => {\r\n          console.log(\"response: \" + JSON.stringify(response));\r\n          if (response.data.message === \"success\") {\r\n            console.log(\"set successModalShow true\");\r\n            this.setState({ successModalShow: true });\r\n          } else {\r\n            console.log(\"set failedModalShow true\");\r\n            this.setState({\r\n              failedModalShow: true,\r\n              modalFailedErrMsg: response.data.message,\r\n            });\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          //console.log(\"error.response: \" + JSON.stringify(error.response));\r\n\r\n          console.log(\r\n            \"error.response.data: \" + JSON.stringify(error.response.data)\r\n          );\r\n          this.setState({\r\n            failedModalShow: true,\r\n            modalFailedErrMsg: error.response.data.message,\r\n          });\r\n        });\r\n    }\r\n  };\r\n  // API function end\r\n\r\n  // Update state value\r\n  setSearchForm = (type, value) => {\r\n    console.log(\"setSearchForm\");\r\n    console.log(\"type: \" + type);\r\n    console.log(\"value: \" + value);\r\n\r\n    this.setState(\r\n      {\r\n        searchForm: {\r\n          ...this.state.searchForm,\r\n          [type]: value,\r\n        },\r\n      },\r\n      () => console.log(\"searchForm: \" + JSON.stringify(this.state.searchForm))\r\n    );\r\n  };\r\n\r\n  setModalEditForm = (type, value) => {\r\n    console.log(\"setModalEditForm\");\r\n    console.log(\"type: \" + type);\r\n    console.log(\"value: \" + value);\r\n\r\n    this.setState(\r\n      {\r\n        modalEditForm: {\r\n          ...this.state.modalEditForm,\r\n          [type]: value,\r\n        },\r\n      },\r\n      () =>\r\n        console.log(\r\n          \"modalEditForm: \" + JSON.stringify(this.state.modalEditForm)\r\n        )\r\n    );\r\n  };\r\n\r\n  setSurveyDetail = (type, value) => {\r\n    console.log(\"setSurveyDetail\");\r\n    console.log(\"type: \" + type);\r\n    console.log(\"value: \" + value);\r\n\r\n    this.setState(\r\n      {\r\n        surveyDetail: {\r\n          ...this.state.surveyDetail,\r\n          [type]: value,\r\n        },\r\n      },\r\n      () =>\r\n        console.log(\r\n          \"setSurveyDetail: \" + JSON.stringify(this.state.surveyDetail)\r\n        )\r\n    );\r\n  };\r\n\r\n  setProductList = (index, type, value) => {\r\n    console.log(\"setProductList\");\r\n    console.log(\"index: \" + index);\r\n    console.log(\"type: \" + type);\r\n    console.log(\"value: \" + value);\r\n\r\n    let productList = [...this.state.productList];\r\n    productList[index] = { ...productList[index], [type]: value };\r\n\r\n    let array = this.state.surveyDetail;\r\n    console.log(\"array: \" + JSON.stringify(array));\r\n    this.setState(\r\n      {\r\n        productList: productList,\r\n      },\r\n      () =>\r\n        console.log(\"setProductList: \" + JSON.stringify(this.state.productList))\r\n    );\r\n  };\r\n\r\n  setModalSettlementForm = (type, value) => {\r\n    console.log(\"setModalSettlementForm\");\r\n    console.log(\"type: \" + type);\r\n    console.log(\"value: \" + value);\r\n\r\n    this.setState(\r\n      {\r\n        modalSettlementForm: {\r\n          ...this.state.modalSettlementForm,\r\n          [type]: value,\r\n        },\r\n      },\r\n      () =>\r\n        console.log(\r\n          \"setModalSettlementForm: \" +\r\n            JSON.stringify(this.state.modalSettlementForm)\r\n        )\r\n    );\r\n  };\r\n\r\n  // Update state value end\r\n}\r\n\r\nexport default Settlement;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport Constant from \"../../global/Constant.json\";\r\n\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Accordion from \"react-bootstrap/Accordion\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport Pagination from \"react-bootstrap/Pagination\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Tabs from \"react-bootstrap/Tabs\";\r\nimport Tab from \"react-bootstrap/Tab\";\r\n\r\n// font-awesome\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPen } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faTrashAlt } from \"@fortawesome/free-regular-svg-icons\";\r\n\r\n// import { SwitchRecType } from \"../../layouts/switch/Switch\";\r\n\r\nimport * as Global from \"../../global/GlobalUtil\";\r\n\r\nimport {\r\n  apiGetUserList,\r\n  apiGetCategoryList,\r\n  apiGetSubcategoryList,\r\n  apiGetRecordTypeList,\r\n} from \"../../global/GlobalAPI\";\r\n\r\nimport {\r\n  EditRecordModal,\r\n  DeleteRecordModal,\r\n  // SuccessModal,\r\n} from \"../../layouts/modal/Modal\";\r\n\r\nclass RecordView extends Component {\r\n  state = {\r\n    userList: [],\r\n    recordList: [],\r\n    recordListByPage: [],\r\n    recordTypeList: [],\r\n    categoryList: [],\r\n    subcategoryList: [],\r\n\r\n    filterForm: {\r\n      modalShow: false,\r\n      date: \"\",\r\n      month: Global.getCurrentYear() + \"-\" + Global.getCurrentMonth(),\r\n      user: \"\",\r\n      recordType: \"\",\r\n      category: \"\",\r\n      subcategory: \"\",\r\n    },\r\n\r\n    recordData: {},\r\n    totalExpenses: 0,\r\n    totalRevenue: 0,\r\n    grandTotal: 0,\r\n\r\n    editRecordModal: false,\r\n    deleteRecordModal: false,\r\n    modalEditRecordShow: false,\r\n\r\n    paginationForm: {\r\n      pageTotalItem: 12,\r\n      currentPage: 1,\r\n      totalPage: 1,\r\n    },\r\n  };\r\n\r\n  css = {\r\n    containerStyle1: \"border-2-gray rounded p-3\",\r\n    divStyle1: \"py-2 px-3\",\r\n    inputStyle1: \"width-100p\",\r\n    switchCatTypeActive: \"text-center btn-blue py-1 border-2-blue rounded-pill\",\r\n    switchCatTypeNonactive:\r\n      \"text-center btn-white py-1 border-2-gray rounded-pill\",\r\n    td_style: \"p-1\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.apiGetUserList();\r\n    this.apiGetRecordList();\r\n    this.apiGetRecordTypeList();\r\n    this.apiGetCategoryList();\r\n    this.apiGetSubcategoryList();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <br />\r\n        <EditRecordModal\r\n          show={this.state.editRecordModal}\r\n          value={this.state.recordData}\r\n          category={this.state.categoryList}\r\n          onHide={() => this.setState({ editRecordModal: false })}\r\n        />\r\n\r\n        <DeleteRecordModal\r\n          show={this.state.deleteRecordModal}\r\n          onHide={() => this.setState({ deleteRecordModal: false })}\r\n        />\r\n\r\n        {this.layoutModalFilterRecord()}\r\n\r\n        <Tabs\r\n          defaultActiveKey=\"home\"\r\n          transition={false}\r\n          id=\"noanim-tab-example\"\r\n          className=\"mb-3\"\r\n        >\r\n          <Tab eventKey=\"contact\" title=\"Platform\" disabled>\r\n            {/* <Sonnet /> */}\r\n          </Tab>\r\n          <Tab eventKey=\"home\" title=\"MPlus (MY)\">\r\n            {/* <Sonnet /> */}\r\n          </Tab>\r\n          <Tab eventKey=\"profile\" title=\"Profile\">\r\n            {/* <Sonnet /> */}\r\n          </Tab>\r\n        </Tabs>\r\n\r\n        <Container fluid>\r\n          <Row className=\"bg-red\">\r\n            <Col lg={1}></Col>\r\n            <Col lg={5} className=\"bg-gray\">\r\n              sss\r\n            </Col>\r\n            <Col lg={5}>aaa</Col>\r\n            <Col lg={1}></Col>\r\n          </Row>\r\n        </Container>\r\n\r\n        <br />\r\n\r\n        <Container fluid>\r\n          <Row>\r\n            <Col lg={1}></Col>\r\n\r\n            <Col sm=\"auto\" className=\"pr-1\">\r\n              <Form.Group controlId=\"\">\r\n                <Form.Control\r\n                  size=\"sm\"\r\n                  type=\"month\"\r\n                  defaultValue={this.state.filterForm.month}\r\n                  onBlur={(event) =>\r\n                    this.setFilterForm(Constant.month, event.target.value)\r\n                  }\r\n                />\r\n              </Form.Group>\r\n            </Col>\r\n            <Col sm=\"auto\" className=\"px-1\">\r\n              <Form.Group controlId=\"\">\r\n                <Form.Control\r\n                  size=\"sm\"\r\n                  type=\"text\"\r\n                  list=\"user\"\r\n                  placeholder=\"Name\"\r\n                  value={this.state.filterForm.name}\r\n                  onChange={(event) =>\r\n                    this.setFilterForm(Constant.name, event.target.value)\r\n                  }\r\n                ></Form.Control>\r\n              </Form.Group>\r\n            </Col>\r\n\r\n            <Col sm=\"auto\" className=\"px-1\">\r\n              <Button\r\n                variant=\"primary\"\r\n                size=\"sm\"\r\n                onClick={this.apiGetRecordList}\r\n              >\r\n                Search\r\n              </Button>\r\n            </Col>\r\n            <Col sm=\"auto\" className=\"px-1\">\r\n              <Form.Label\r\n                column=\"sm\"\r\n                className=\"px-1\"\r\n                onClick={() =>\r\n                  this.setState({\r\n                    filterForm: {\r\n                      ...this.state.filterForm,\r\n                      modalShow: true,\r\n                    },\r\n                  })\r\n                }\r\n              >\r\n                <span>\r\n                  <u>Filter</u>\r\n                </span>\r\n              </Form.Label>\r\n            </Col>\r\n            <Col lg={1}></Col>\r\n          </Row>\r\n        </Container>\r\n\r\n        <Container fluid>\r\n          <Row>\r\n            <Col lg={1}></Col>\r\n            <Col>\r\n              <Table>\r\n                {this.layoutRecordTableViewHead()}\r\n                {this.layoutRecordTableViewRow()}\r\n              </Table>\r\n            </Col>\r\n            <Col lg={1}></Col>\r\n          </Row>\r\n        </Container>\r\n\r\n        {/* <Container className={this.css.containerStyle1}>\r\n          <Row>\r\n            <Col>\r\n              <h5>Records</h5>\r\n              <hr />\r\n            </Col>\r\n          </Row>\r\n          <div className=\"d-flex flex-column scroll height-70vh\">\r\n            {this.layoutRecordList()}\r\n          </div>\r\n        </Container> */}\r\n\r\n        <datalist id=\"recordType\">\r\n          {Global.getLayoutDatalist(this.state.recordTypeList)}\r\n        </datalist>\r\n\r\n        <datalist id=\"category\">\r\n          {Global.getLayoutDatalist(this.state.categoryList)}\r\n        </datalist>\r\n\r\n        <datalist id=\"subcategory\">\r\n          {Global.getLayoutDatalist(this.state.subcategoryList)}\r\n        </datalist>\r\n\r\n        <datalist id=\"user\">\r\n          {Global.getLayoutDatalist(this.state.userList)}\r\n        </datalist>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Layout function\r\n\r\n  layoutRecordList = () => {\r\n    let date = \"\";\r\n    let displayDate = false;\r\n    return this.state.recordList.map((value, index) => (\r\n      <div className=\"py-1\">\r\n        {date !== value.date ? (date = value.date) : (displayDate = false)}\r\n        {displayDate ? <span>{value.date}</span> : <span></span>}\r\n        <Accordion>\r\n          {console.log(value.date.substring(5, 7))}\r\n          <Card\r\n            className={\r\n              parseInt(value.date.substring(5, 7)) % 2 === 0\r\n                ? \"bg-light\"\r\n                : \"bg-white\"\r\n            }\r\n          >\r\n            <Accordion.Toggle as={Card.Header} variant=\"link\" eventKey=\"0\">\r\n              <Row>\r\n                <Col md={3} lg={2} className=\"py-1\">\r\n                  <span>{value.date}</span>\r\n                  <br />\r\n                  <span>{Global.getDayOfWeek(value.date)}</span>\r\n                </Col>\r\n                <Col md={6} className=\"py-1\">\r\n                  <span>\r\n                    {value.category} - {value.subcategory}\r\n                  </span>\r\n                  <br />\r\n                  <span>{value.remark}</span>\r\n                </Col>\r\n                <Col className=\"text-center font-weight-bold py-3\">\r\n                  <span\r\n                    className={\r\n                      value.type === \"Revenue\" ? \"text-green\" : \"text-red\"\r\n                    }\r\n                  >\r\n                    {value.type === \"Revenue\"\r\n                      ? Global.amountDisplayConverter(value.amount)\r\n                      : Global.amountDisplayConverter(value.amount)}\r\n                  </span>\r\n                </Col>\r\n              </Row>\r\n            </Accordion.Toggle>\r\n            <Accordion.Collapse eventKey=\"0\">\r\n              <Card.Body>\r\n                <Card>\r\n                  <Accordion>\r\n                    <Accordion.Toggle\r\n                      as={Card.Header}\r\n                      variant=\"link\"\r\n                      eventKey=\"1\"\r\n                    >\r\n                      <span>Test Test</span>\r\n                    </Accordion.Toggle>\r\n                    <Accordion.Collapse eventKey=\"1\">\r\n                      <span>Test Test Body</span>\r\n                    </Accordion.Collapse>\r\n                  </Accordion>\r\n                </Card>\r\n\r\n                <Row>\r\n                  <Col md={3} lg={2} className=\"py-2\">\r\n                    <span>Record ID: {value.record_id}</span>\r\n                    {/* <br />\r\n                    <span>Settled: {value.settle}</span> */}\r\n                  </Col>\r\n                  <Col md={6}>\r\n                    <span>\r\n                      {/* Due: {amountDisplayConverter(value.unsettled_amount)} */}\r\n                    </span>\r\n                    {/* <br /> */}\r\n                    {/* <span>Settle by: {value.settle_by}</span> */}\r\n                  </Col>\r\n                  <Col className=\"cursor-pointer text-center py-2\">\r\n                    <FontAwesomeIcon\r\n                      icon={faPen}\r\n                      size=\"1x\"\r\n                      className=\"mx-2\"\r\n                      onClick={() => this.editRecord(value)}\r\n                    />\r\n                    <FontAwesomeIcon\r\n                      icon={faTrashAlt}\r\n                      size=\"1x\"\r\n                      className=\"mx-2\"\r\n                      onClick={() => this.deleteRecord(value)}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n\r\n                <Row>\r\n                  <Col></Col>\r\n                </Row>\r\n              </Card.Body>\r\n            </Accordion.Collapse>\r\n          </Card>\r\n        </Accordion>\r\n      </div>\r\n    ));\r\n  };\r\n\r\n  layoutRecordTableViewHead = () => {\r\n    return (\r\n      <thead>\r\n        <tr>\r\n          <th className={this.css.td_style}>MARKET</th>\r\n          <th className={this.css.td_style}>INVESTED</th>\r\n          <th className={this.css.td_style}>UNITS</th>\r\n          <th className={this.css.td_style}>OPEN</th>\r\n          <th className={this.css.td_style}>CURRENT</th>\r\n          <th className={this.css.td_style}>P/L($)</th>\r\n          <th className={this.css.td_style}>P/L(%)</th>\r\n          <th className={this.css.td_style}>Actions</th>\r\n        </tr>\r\n      </thead>\r\n    );\r\n  };\r\n\r\n  layoutRecordTableViewRow = () => {\r\n    return (\r\n      <tbody>\r\n        {this.state.recordListByPage.map((value, index) => (\r\n          <tr>\r\n            <td className={this.css.td_style}>{value.date}</td>\r\n            <td className={this.css.td_style}>{value.user_name}</td>\r\n\r\n            <td className={this.css.td_style}>{value.type}</td>\r\n            <td className={this.css.td_style}>{value.category}</td>\r\n            <td className={this.css.td_style}>{value.subcategory}</td>\r\n            <td className={this.css.td_style + \" width-20p\"}>{value.remark}</td>\r\n            <td className={this.css.td_style}>\r\n              {Global.amountDisplayConverter(value.amount)}\r\n            </td>\r\n            <td className={this.css.td_style}>\r\n              <FontAwesomeIcon\r\n                icon={faPen}\r\n                size=\"1x\"\r\n                className=\"mx-1\"\r\n                onClick={() =>\r\n                  this.setState({\r\n                    modalEditRecordShow: true,\r\n                    modalEditForm: {\r\n                      ...this.state.modalEditForm,\r\n                      editType: Constant.recordType,\r\n                      id: value.record_type_id,\r\n                      name: value.name,\r\n                    },\r\n                  })\r\n                }\r\n              />\r\n              <FontAwesomeIcon\r\n                icon={faTrashAlt}\r\n                size=\"1x\"\r\n                className=\"mx-1\"\r\n                onClick={() => this.deleteRecord(value)}\r\n              />\r\n            </td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    );\r\n  };\r\n\r\n  // Modal filter record\r\n  layoutModalFilterRecord = (value) => {\r\n    console.log(\"layoutModalFilterRecord\");\r\n    console.log(\"filterForm: \" + JSON.stringify(this.state.filterForm));\r\n\r\n    return (\r\n      <Modal\r\n        size=\"lg\"\r\n        backdrop=\"true\"\r\n        animation=\"true\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n        show={this.state.filterForm.modalShow}\r\n      >\r\n        <Modal.Header>\r\n          <Modal.Title className=\"text-center\">Filter</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body className=\"show-grid\">\r\n          <Form className=\"\">\r\n            <Row>\r\n              <Col>\r\n                <Form.Label>Date</Form.Label>\r\n                <Form.Control\r\n                  type=\"date\"\r\n                  placeholder=\"Date\"\r\n                  value={this.state.filterForm.date}\r\n                  onChange={(event) =>\r\n                    this.setFilterForm(Constant.date, event.target.value)\r\n                  }\r\n                ></Form.Control>\r\n              </Col>\r\n            </Row>\r\n            <Form.Row>\r\n              <Form.Group as={Col} controlId=\"\">\r\n                <Form.Label>Type</Form.Label>\r\n                <Form.Control\r\n                  list=\"recordType\"\r\n                  placeholder=\"Type\"\r\n                  value={this.state.filterForm.recordType}\r\n                  onChange={(event) =>\r\n                    this.setFilterForm(Constant.recordType, event.target.value)\r\n                  }\r\n                ></Form.Control>\r\n              </Form.Group>\r\n              <Form.Group as={Col} controlId=\"\">\r\n                <Form.Label>Category</Form.Label>\r\n                <Form.Control\r\n                  // type=\"text\"\r\n                  list=\"category\"\r\n                  placeholder=\"Category\"\r\n                  value={this.state.filterForm.category}\r\n                  onChange={(event) =>\r\n                    this.setFilterForm(Constant.category, event.target.value)\r\n                  }\r\n                ></Form.Control>\r\n              </Form.Group>\r\n              <Form.Group as={Col} controlId=\"\">\r\n                <Form.Label>Subcategory</Form.Label>\r\n                <Form.Control\r\n                  list=\"subcategory\"\r\n                  placeholder=\"Subcategory\"\r\n                  value={this.state.filterForm.subcategory}\r\n                  onChange={(event) =>\r\n                    this.setFilterForm(Constant.subcategory, event.target.value)\r\n                  }\r\n                />\r\n              </Form.Group>\r\n            </Form.Row>\r\n          </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            variant=\"primary\"\r\n            onClick={() =>\r\n              this.setState({\r\n                filterForm: {\r\n                  ...this.state.filterForm,\r\n                  [Constant.date]: \"\",\r\n                  [Constant.recordType]: \"\",\r\n                  [Constant.category]: \"\",\r\n                  [Constant.subcategory]: \"\",\r\n                },\r\n              })\r\n            }\r\n          >\r\n            Clear\r\n          </Button>\r\n          <Button\r\n            variant=\"secondary\"\r\n            onClick={() =>\r\n              this.setState({\r\n                filterForm: {\r\n                  ...this.state.filterForm,\r\n                  modalShow: false,\r\n                },\r\n              })\r\n            }\r\n          >\r\n            Close\r\n          </Button>\r\n\r\n          {/* {this.layoutModalEditRecordFooter()} */}\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n  };\r\n\r\n  layoutPagination = () => {\r\n    let currentPage = parseInt(this.state.paginationForm.currentPage);\r\n    let totalPage = parseInt(this.state.paginationForm.totalPage);\r\n\r\n    if (totalPage <= 7) {\r\n      // totalPage less than 7\r\n      let pageObject = [];\r\n\r\n      for (var i = 1; i <= totalPage; i++) {\r\n        pageObject.push(i);\r\n      }\r\n\r\n      return (\r\n        <Pagination>\r\n          <Pagination.Prev\r\n            disabled={currentPage == 1 ? \"true\" : \"\"}\r\n            onClick={() =>\r\n              this.setPaginationForm(\"currentPage\", currentPage - 1)\r\n            }\r\n          />\r\n\r\n          {pageObject.map((value, i) => (\r\n            <Pagination.Item\r\n              value={value}\r\n              active={currentPage == value ? \"true\" : \"\"}\r\n              onClick={() => this.setPaginationForm(\"currentPage\", value)}\r\n            >\r\n              {value}\r\n            </Pagination.Item>\r\n          ))}\r\n\r\n          <Pagination.Next\r\n            disabled={currentPage == totalPage ? \"true\" : \"\"}\r\n            onClick={() =>\r\n              this.setPaginationForm(\"currentPage\", currentPage + 1)\r\n            }\r\n          />\r\n        </Pagination>\r\n      );\r\n    }\r\n\r\n    if (totalPage > 7) {\r\n      // totalPage more than 7\r\n      if (currentPage < 5) {\r\n        // currentPage within 1 - 4\r\n        let pageObject;\r\n        if (currentPage == 4) {\r\n          pageObject = [1, 2, 3, 4, 5, 6];\r\n        } else {\r\n          pageObject = [1, 2, 3, 4, 5];\r\n        }\r\n\r\n        return (\r\n          <Pagination>\r\n            <Pagination.Prev\r\n              disabled={currentPage <= 1 ? \"true\" : \"\"}\r\n              onClick={() =>\r\n                this.setPaginationForm(\"currentPage\", currentPage - 1)\r\n              }\r\n            />\r\n\r\n            {pageObject.map((value, i) => (\r\n              <Pagination.Item\r\n                value={value}\r\n                active={currentPage == value ? \"true\" : \"\"}\r\n                onClick={() => this.setPaginationForm(\"currentPage\", value)}\r\n              >\r\n                {value}\r\n              </Pagination.Item>\r\n            ))}\r\n\r\n            <Pagination.Ellipsis />\r\n\r\n            <Pagination.Item\r\n              onClick={() => this.setPaginationForm(\"currentPage\", totalPage)}\r\n            >\r\n              {totalPage}\r\n            </Pagination.Item>\r\n\r\n            <Pagination.Next\r\n              disabled={currentPage == totalPage ? \"true\" : \"\"}\r\n              onClick={() =>\r\n                this.setPaginationForm(\"currentPage\", currentPage + 1)\r\n              }\r\n            />\r\n          </Pagination>\r\n        );\r\n      } else if (currentPage >= totalPage - 3) {\r\n        // totalPage at last 3 page\r\n        let pageObject = [];\r\n        var i;\r\n\r\n        if (currentPage == totalPage - 3) {\r\n          i = 6;\r\n        } else {\r\n          i = 5;\r\n        }\r\n\r\n        while (i > 0) {\r\n          --i;\r\n          pageObject.push(totalPage - i);\r\n        }\r\n\r\n        return (\r\n          <Pagination>\r\n            <Pagination.Prev\r\n              onClick={() =>\r\n                this.setPaginationForm(\"currentPage\", currentPage - 1)\r\n              }\r\n            />\r\n\r\n            <Pagination.Item\r\n              onClick={() => this.setPaginationForm(\"currentPage\", 1)}\r\n            >\r\n              {1}\r\n            </Pagination.Item>\r\n\r\n            <Pagination.Ellipsis />\r\n\r\n            {pageObject.map((value, i) => (\r\n              <Pagination.Item\r\n                value={value}\r\n                active={currentPage == value ? \"true\" : \"\"}\r\n                onClick={() => this.setPaginationForm(\"currentPage\", value)}\r\n              >\r\n                {value}\r\n              </Pagination.Item>\r\n            ))}\r\n\r\n            <Pagination.Next\r\n              disabled={currentPage == totalPage ? \"true\" : \"\"}\r\n              onClick={() =>\r\n                this.setPaginationForm(\"currentPage\", currentPage + 1)\r\n              }\r\n            />\r\n          </Pagination>\r\n        );\r\n      } else {\r\n        return (\r\n          <Pagination>\r\n            <Pagination.Prev\r\n              // disabled={currentPage <= 1 ? \"true\" : \"\"}\r\n              onClick={() =>\r\n                this.setPaginationForm(\"currentPage\", currentPage - 1)\r\n              }\r\n            />\r\n\r\n            <Pagination.Item>{1}</Pagination.Item>\r\n            <Pagination.Ellipsis />\r\n\r\n            <Pagination.Item\r\n              onClick={() =>\r\n                this.setPaginationForm(\"currentPage\", currentPage - 2)\r\n              }\r\n            >\r\n              {currentPage - 2}\r\n            </Pagination.Item>\r\n            <Pagination.Item\r\n              onClick={() =>\r\n                this.setPaginationForm(\"currentPage\", currentPage - 1)\r\n              }\r\n            >\r\n              {currentPage - 1}\r\n            </Pagination.Item>\r\n            <Pagination.Item\r\n              active\r\n              disable\r\n              onClick={() => this.setPaginationForm(\"currentPage\", currentPage)}\r\n            >\r\n              {currentPage}\r\n            </Pagination.Item>\r\n            <Pagination.Item\r\n              onClick={() =>\r\n                this.setPaginationForm(\"currentPage\", currentPage + 1)\r\n              }\r\n            >\r\n              {currentPage + 1}\r\n            </Pagination.Item>\r\n            <Pagination.Item\r\n              onClick={() =>\r\n                this.setPaginationForm(\"currentPage\", currentPage + 2)\r\n              }\r\n            >\r\n              {currentPage + 2}\r\n            </Pagination.Item>\r\n\r\n            <Pagination.Ellipsis />\r\n\r\n            <Pagination.Item\r\n              onClick={() => this.setPaginationForm(\"currentPage\", totalPage)}\r\n            >\r\n              {totalPage}\r\n            </Pagination.Item>\r\n\r\n            <Pagination.Next\r\n              // disabled={currentPage == totalPage ? \"true\" : \"\"}\r\n              onClick={() =>\r\n                this.setPaginationForm(\"currentPage\", currentPage + 1)\r\n              }\r\n            />\r\n          </Pagination>\r\n        );\r\n      }\r\n    }\r\n  };\r\n  // Layout function end\r\n\r\n  // API function\r\n  apiGetRecordTypeList = async () => {\r\n    // GET record type list\r\n    await apiGetRecordTypeList().then((response) => {\r\n      if (response.message === \"success\") {\r\n        console.log(\"recordTypeList: \" + JSON.stringify(response.data));\r\n        this.setState({ recordTypeList: response.data });\r\n      }\r\n    });\r\n  };\r\n\r\n  apiGetCategoryList = async () => {\r\n    // console.log(\"type: \" + type);\r\n    await apiGetCategoryList().then((response) => {\r\n      if (response.message === \"success\") {\r\n        this.setState({ categoryList: response.data });\r\n      }\r\n    });\r\n  };\r\n\r\n  apiGetSubcategoryList = async () => {\r\n    let type = \"\";\r\n    let category = \"\";\r\n\r\n    await apiGetSubcategoryList(type, category).then((response) => {\r\n      if (response.message === \"success\") {\r\n        this.setState({ subcategoryList: response.data });\r\n      }\r\n    });\r\n  };\r\n\r\n  apiGetUserList = async () => {\r\n    // console.log(\"type: \" + type);\r\n    await apiGetUserList().then((response) => {\r\n      if (response.message === \"success\") {\r\n        this.setState({ userList: response.data });\r\n      }\r\n    });\r\n  };\r\n\r\n  apiGetRecordList = () => {\r\n    let userId;\r\n    let userName = this.state.filterForm.name;\r\n    let recordType = this.state.filterForm.recordType;\r\n    let date = this.state.filterForm.date;\r\n    let month = this.state.filterForm.month;\r\n    let category = this.state.filterForm.category;\r\n    let subcategory = encodeURI(this.state.filterForm.subcategory);\r\n\r\n    console.log(\"apiGetRecordList userName: \" + userName);\r\n\r\n    if (month === \"\") {\r\n      month = Global.getCurrentYear() + \"-\" + Global.getCurrentMonth();\r\n    }\r\n\r\n    userId = Global.getIndexByName(this.state.userList, userName);\r\n\r\n    //Global.generateUrlParamsByJson(this.state.filterForm);\r\n\r\n    let url =\r\n      process.env.REACT_APP_API_GET_RECORD_LIST +\r\n      \"?userId=\" +\r\n      userId +\r\n      \"&type=\" +\r\n      recordType +\r\n      \"&date=\" +\r\n      date +\r\n      \"&month=\" +\r\n      month +\r\n      \"&category=\" +\r\n      category +\r\n      \"&subcategory=\" +\r\n      subcategory;\r\n    console.log(\"URL: \" + url);\r\n\r\n    axios.get(url).then((response) => {\r\n      if (response.data.message === \"success\") {\r\n        let totalExpenses = 0;\r\n        let totalRevenue = 0;\r\n        let grandTotal = 0;\r\n\r\n        for (let value of response.data.data) {\r\n          if (value.type === \"Expense\") {\r\n            totalExpenses += value.amount;\r\n          } else if (value.type === \"Revenue\") {\r\n            totalRevenue += value.amount;\r\n          }\r\n        }\r\n\r\n        grandTotal = totalRevenue + totalExpenses;\r\n        console.log(\"totalExpenses: \" + totalExpenses);\r\n        console.log(\"totalRevenue: \" + totalRevenue);\r\n\r\n        this.setState(\r\n          {\r\n            recordList: response.data.data,\r\n            totalExpenses: totalExpenses,\r\n            totalRevenue: totalRevenue,\r\n            grandTotal: grandTotal,\r\n          },\r\n\r\n          () => this.initPaginationForm()\r\n        );\r\n      }\r\n      console.log(\"recordList: \" + this.state.recordList);\r\n    });\r\n  };\r\n  // API function end\r\n\r\n  editRecord = (value) => {\r\n    this.setState({ editRecordModal: true, recordData: value });\r\n  };\r\n\r\n  deleteRecord = (value) => {\r\n    this.setState({ deleteRecordModal: true, recordData: value });\r\n  };\r\n\r\n  initPaginationForm = (type, value) => {\r\n    let pageTotalItem = this.state.paginationForm.pageTotalItem;\r\n    let totalPage = Math.ceil(this.state.recordList.length / pageTotalItem);\r\n    let currentPage = totalPage == 0 ? 0 : 1;\r\n    console.log(\"totalRecord: \" + this.state.recordList.length);\r\n    console.log(\"totalPage: \" + totalPage);\r\n    console.log(\"totalPage int: \" + Math.ceil(totalPage));\r\n\r\n    //this.setPaginationForm(\"lastPage\", lastPage);\r\n\r\n    console.log(\"initPaginationForm\");\r\n    console.log(\"type: \" + type);\r\n    console.log(\"value: \" + value);\r\n\r\n    this.setState(\r\n      {\r\n        paginationForm: {\r\n          ...this.state.paginationForm,\r\n          currentPage: currentPage,\r\n          totalPage: totalPage,\r\n        },\r\n      },\r\n      () => this.setRecordListView(),\r\n      console.log(\r\n        \"paginationForm: \" + JSON.stringify(this.state.paginationForm)\r\n      )\r\n    );\r\n  };\r\n\r\n  setRecordListView = () => {\r\n    let currentPage = this.state.paginationForm.currentPage;\r\n    let pageTotalItem = this.state.paginationForm.pageTotalItem;\r\n\r\n    let startIndex = (currentPage - 1) * pageTotalItem;\r\n    let endIndex = currentPage * pageTotalItem;\r\n    let recordList = this.state.recordList;\r\n    let recordListByPage;\r\n\r\n    recordListByPage = recordList.slice(startIndex, endIndex);\r\n\r\n    this.setState(\r\n      {\r\n        recordListByPage: recordListByPage,\r\n      },\r\n      () =>\r\n        console.log(\r\n          \"recordListByPage: \" + JSON.stringify(this.state.recordListByPage)\r\n        )\r\n    );\r\n  };\r\n\r\n  setPaginationForm = (type, value) => {\r\n    this.setState(\r\n      {\r\n        paginationForm: {\r\n          ...this.state.paginationForm,\r\n          [type]: value,\r\n        },\r\n      },\r\n      () => this.setRecordListView(),\r\n      console.log(\r\n        \"paginationForm: \" + JSON.stringify(this.state.paginationForm)\r\n      )\r\n    );\r\n  };\r\n\r\n  setFilterForm = (type, value) => {\r\n    console.log(\"setFilterForm\");\r\n    console.log(\"type: \" + type);\r\n    console.log(\"value: \" + value);\r\n\r\n    this.setState(\r\n      {\r\n        filterForm: {\r\n          ...this.state.filterForm,\r\n          [type]: value,\r\n        },\r\n      },\r\n      () => {\r\n        console.log(\"filterForm: \" + JSON.stringify(this.state.filterForm));\r\n      }\r\n    );\r\n  };\r\n}\r\n\r\nexport default RecordView;\r\n","import React, { Component } from \"react\";\n// import logo from \"./logo.svg\";\nimport \"./App.css\";\n// import i18n from \"./locales/i18n.js\";\nimport { withNamespaces } from \"react-i18next\";\n\n// react-router-dom\nimport { BrowserRouter, Switch, Route, Redirect } from \"react-router-dom\";\n\nimport Header from \"./components/header/Header\";\nimport Footer from \"./components/footer/Footer\";\nimport Category_v1 from \"./components/category/CategoryManage\";\nimport Category_v2 from \"./components/category/CategoryManage_v2\";\nimport RecordAdd from \"./components/record/RecordAdd\";\nimport RecordAdd_v2 from \"./components/record/RecordAdd_2\";\nimport RecordBatchAdd from \"./components/record/RecordBatchAdd\";\nimport RecordView from \"./components/record/RecordView\";\nimport RecordView_v2 from \"./components/record/RecordView_v2\";\nimport RecordSummary from \"./components/record/RecordSummary\";\n\nimport Settlement from \"./components/settlement/Settlement\";\n\nimport Login_v1 from \"./components/login/Login_v1\";\nimport Portfolio_v1 from \"./components/portfolio/PortfolioView_v1\";\n\nimport SurveyForm from \"./components/surveyForm/SurveyForm\";\n\nclass App extends Component {\n  render() {\n    // const { t } = this.props;\n\n    return (\n      <BrowserRouter>\n        <header>\n          <Header />\n        </header>\n\n        <Switch>\n          {/* <Route path=\"/v1/login\" component={Login_v1} />\n          <Route path=\"/v1/portfolio/manage\" component={Portfolio_v1} />\n\n          <Route path=\"/v1/category/manage\" component={Category_v1} />\n          <Route path=\"/v2/category/manage/\" component={Category_v2} />\n\n          <Route path=\"/record/batch-add\" component={RecordBatchAdd} />\n          <Route path=\"/record/add\" component={RecordAdd} />\n          <Route path=\"/v2/record/add\" component={RecordAdd_v2} />\n          <Route path=\"/record/view\" component={RecordView} />\n          <Route path=\"/v2/record/view\" component={RecordView_v2} />\n          <Route path=\"/record/summary\" component={RecordSummary} /> */}\n\n          <Route path=\"/survey\" component={SurveyForm} />\n\n          <Redirect to=\"/survey\" component={SurveyForm} />\n        </Switch>\n        {/* //<ModalCenter /> */}\n\n        {/* footer bar */}\n        <footer>\n          {/* <Footer /> */}\n          <br />\n        </footer>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default withNamespaces()(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import i18n from \"i18next\";\r\nimport { reactI18nextModule } from \"react-i18next\";\r\n\r\nimport string_en from \"../locales/en.json\";\r\nimport string_cn_simp from \"../locales/cn-simp.json\";\r\nimport string_cn_trad from \"../locales/cn-tran.json\";\r\n\r\n// the translations\r\nconst resources = {\r\n  en: {\r\n    translation: string_en,\r\n  },\r\n  cn_simp: {\r\n    translation: string_cn_simp,\r\n  },\r\n  cn_trad: {\r\n    translation: string_cn_trad,\r\n  },\r\n};\r\n\r\ni18n\r\n  .use(reactI18nextModule) // passes i18n down to react-i18next\r\n  .init({\r\n    resources,\r\n    lng: \"en\",\r\n\r\n    keySeparator: false, // we do not use keys in form messages.welcome\r\n\r\n    interpolation: {\r\n      escapeValue: false, // react already safes from xss\r\n    },\r\n  });\r\n\r\nexport default i18n;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./locales/i18n\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./global/Global.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}